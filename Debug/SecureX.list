
SecureX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d2c8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000020d0  0800d458  0800d458  0000e458  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 CMOX_CTA_PROTECTED_DATA 00000a00  0800f528  0800f528  00010528  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  0800ff28  0800ff28  0001115c  2**0
                  CONTENTS
  5 .ARM          00000008  0800ff28  0800ff28  00010f28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  0800ff30  0800ff30  0001115c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  0800ff30  0800ff30  00010f30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .fini_array   00000004  0800ff34  0800ff34  00010f34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .data         0000015c  20000000  0800ff38  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .ccmram       00000000  10000000  10000000  0001115c  2**0
                  CONTENTS
 11 .bss          000020c0  2000015c  2000015c  0001115c  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  2000221c  2000221c  0001115c  2**0
                  ALLOC
 13 .ARM.attributes 00000034  00000000  00000000  0001115c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001b073  00000000  00000000  00011190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00004d6f  00000000  00000000  0002c203  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001918  00000000  00000000  00030f78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000130b  00000000  00000000  00032890  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00029291  00000000  00000000  00033b9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00028c17  00000000  00000000  0005ce2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000cb81e  00000000  00000000  00085a43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  00151261  2**0
                  CONTENTS, READONLY
 22 .iar_vfe_header 00000040  00000000  00000000  001512a4  2**2
                  CONTENTS, READONLY
 23 .debug_frame  00007028  00000000  00000000  001512e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 0000004a  00000000  00000000  0015830c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000015c 	.word	0x2000015c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d440 	.word	0x0800d440

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000160 	.word	0x20000160
 80001cc:	0800d440 	.word	0x0800d440

080001d0 <CMOX_CBC_DEC_AESFAST_IMPL>:
 80001d0:	08000339 0800d9a4                       9.......

080001d8 <cmox_cbc_decrypt>:
 80001d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80001da:	b0cb      	sub	sp, #300	@ 0x12c
 80001dc:	4604      	mov	r4, r0
 80001de:	460d      	mov	r5, r1
 80001e0:	4616      	mov	r6, r2
 80001e2:	461f      	mov	r7, r3
 80001e4:	4909      	ldr	r1, [pc, #36]	@ (800020c <cmox_cbc_decrypt+0x34>)
 80001e6:	a805      	add	r0, sp, #20
 80001e8:	f000 f888 	bl	80002fc <cmox_cbc_construct>
 80001ec:	9953      	ldr	r1, [sp, #332]	@ 0x14c
 80001ee:	9a52      	ldr	r2, [sp, #328]	@ 0x148
 80001f0:	9104      	str	r1, [sp, #16]
 80001f2:	9203      	str	r2, [sp, #12]
 80001f4:	9700      	str	r7, [sp, #0]
 80001f6:	9951      	ldr	r1, [sp, #324]	@ 0x144
 80001f8:	9a50      	ldr	r2, [sp, #320]	@ 0x140
 80001fa:	9102      	str	r1, [sp, #8]
 80001fc:	9201      	str	r2, [sp, #4]
 80001fe:	4633      	mov	r3, r6
 8000200:	462a      	mov	r2, r5
 8000202:	4621      	mov	r1, r4
 8000204:	f000 fac0 	bl	8000788 <cmox_cipher_innerCompute>
 8000208:	b04b      	add	sp, #300	@ 0x12c
 800020a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800020c:	080001d0 	.word	0x080001d0

08000210 <CMOX_CBC_ENC_AESFAST_IMPL>:
 8000210:	080006c9 0800d9b0                       ........

08000218 <cmox_cbc_encrypt>:
 8000218:	b5f0      	push	{r4, r5, r6, r7, lr}
 800021a:	b0cb      	sub	sp, #300	@ 0x12c
 800021c:	4604      	mov	r4, r0
 800021e:	460d      	mov	r5, r1
 8000220:	4616      	mov	r6, r2
 8000222:	461f      	mov	r7, r3
 8000224:	4909      	ldr	r1, [pc, #36]	@ (800024c <cmox_cbc_encrypt+0x34>)
 8000226:	a805      	add	r0, sp, #20
 8000228:	f000 f868 	bl	80002fc <cmox_cbc_construct>
 800022c:	9953      	ldr	r1, [sp, #332]	@ 0x14c
 800022e:	9a52      	ldr	r2, [sp, #328]	@ 0x148
 8000230:	9104      	str	r1, [sp, #16]
 8000232:	9203      	str	r2, [sp, #12]
 8000234:	9700      	str	r7, [sp, #0]
 8000236:	9951      	ldr	r1, [sp, #324]	@ 0x144
 8000238:	9a50      	ldr	r2, [sp, #320]	@ 0x140
 800023a:	9102      	str	r1, [sp, #8]
 800023c:	9201      	str	r2, [sp, #4]
 800023e:	4633      	mov	r3, r6
 8000240:	462a      	mov	r2, r5
 8000242:	4621      	mov	r1, r4
 8000244:	f000 faa0 	bl	8000788 <cmox_cipher_innerCompute>
 8000248:	b04b      	add	sp, #300	@ 0x12c
 800024a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800024c:	08000210 	.word	0x08000210

08000250 <cmox_cbc_getByCipher>:
 8000250:	6802      	ldr	r2, [r0, #0]
 8000252:	428a      	cmp	r2, r1
 8000254:	bf18      	it	ne
 8000256:	2000      	movne	r0, #0
 8000258:	4770      	bx	lr
	...

0800025c <cmox_cbc_cleanup>:
 800025c:	b510      	push	{r4, lr}
 800025e:	f7ff fff7 	bl	8000250 <cmox_cbc_getByCipher>
 8000262:	f44f 3480 	mov.w	r4, #65536	@ 0x10000
 8000266:	2800      	cmp	r0, #0
 8000268:	bf0e      	itee	eq
 800026a:	4c03      	ldreq	r4, [pc, #12]	@ (8000278 <cmox_cbc_cleanup+0x1c>)
 800026c:	f44f 718a 	movne.w	r1, #276	@ 0x114
 8000270:	f00c fb99 	blne	800c9a6 <__aeabi_memclr>
 8000274:	4620      	mov	r0, r4
 8000276:	bd10      	pop	{r4, pc}
 8000278:	00010003 	.word	0x00010003

0800027c <cmox_cbc_init>:
 800027c:	b538      	push	{r3, r4, r5, lr}
 800027e:	0004      	movs	r4, r0
 8000280:	4d06      	ldr	r5, [pc, #24]	@ (800029c <cmox_cbc_init+0x20>)
 8000282:	d008      	beq.n	8000296 <cmox_cbc_init+0x1a>
 8000284:	f7ff ffe4 	bl	8000250 <cmox_cbc_getByCipher>
 8000288:	b128      	cbz	r0, 8000296 <cmox_cbc_init+0x1a>
 800028a:	f100 0108 	add.w	r1, r0, #8
 800028e:	4620      	mov	r0, r4
 8000290:	f000 faac 	bl	80007ec <cmox_cipherMode_init>
 8000294:	4605      	mov	r5, r0
 8000296:	4628      	mov	r0, r5
 8000298:	bd32      	pop	{r1, r4, r5, pc}
 800029a:	bf00      	nop
 800029c:	00010003 	.word	0x00010003

080002a0 <cmox_cbc_setKey>:
 80002a0:	b570      	push	{r4, r5, r6, lr}
 80002a2:	460c      	mov	r4, r1
 80002a4:	4615      	mov	r5, r2
 80002a6:	4619      	mov	r1, r3
 80002a8:	4e06      	ldr	r6, [pc, #24]	@ (80002c4 <cmox_cbc_setKey+0x24>)
 80002aa:	b140      	cbz	r0, 80002be <cmox_cbc_setKey+0x1e>
 80002ac:	f7ff ffd0 	bl	8000250 <cmox_cbc_getByCipher>
 80002b0:	b128      	cbz	r0, 80002be <cmox_cbc_setKey+0x1e>
 80002b2:	462a      	mov	r2, r5
 80002b4:	4621      	mov	r1, r4
 80002b6:	3008      	adds	r0, #8
 80002b8:	f000 faa0 	bl	80007fc <cmox_cipherMode_setKey>
 80002bc:	4606      	mov	r6, r0
 80002be:	4630      	mov	r0, r6
 80002c0:	bd70      	pop	{r4, r5, r6, pc}
 80002c2:	bf00      	nop
 80002c4:	00010003 	.word	0x00010003

080002c8 <cmox_cbc_setIV>:
 80002c8:	b57c      	push	{r2, r3, r4, r5, r6, lr}
 80002ca:	0004      	movs	r4, r0
 80002cc:	460d      	mov	r5, r1
 80002ce:	4616      	mov	r6, r2
 80002d0:	d003      	beq.n	80002da <cmox_cbc_setIV+0x12>
 80002d2:	4619      	mov	r1, r3
 80002d4:	f7ff ffbc 	bl	8000250 <cmox_cbc_getByCipher>
 80002d8:	b908      	cbnz	r0, 80002de <cmox_cbc_setIV+0x16>
 80002da:	4807      	ldr	r0, [pc, #28]	@ (80002f8 <cmox_cbc_setIV+0x30>)
 80002dc:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 80002de:	2e10      	cmp	r6, #16
 80002e0:	bf0c      	ite	eq
 80002e2:	2101      	moveq	r1, #1
 80002e4:	2100      	movne	r1, #0
 80002e6:	9100      	str	r1, [sp, #0]
 80002e8:	4633      	mov	r3, r6
 80002ea:	f500 7182 	add.w	r1, r0, #260	@ 0x104
 80002ee:	462a      	mov	r2, r5
 80002f0:	4620      	mov	r0, r4
 80002f2:	f000 fc67 	bl	8000bc4 <cmox_cipherMode_setIV>
 80002f6:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 80002f8:	00010003 	.word	0x00010003

080002fc <cmox_cbc_construct>:
 80002fc:	460a      	mov	r2, r1
 80002fe:	6853      	ldr	r3, [r2, #4]
 8000300:	6812      	ldr	r2, [r2, #0]
 8000302:	6819      	ldr	r1, [r3, #0]

08000304 <__iar_annotation$$tailcall>:
 8000304:	4710      	bx	r2
	...

08000308 <cmox_cbc_decrypt_cleanup>:
 8000308:	4901      	ldr	r1, [pc, #4]	@ (8000310 <cmox_cbc_decrypt_cleanup+0x8>)
 800030a:	f7ff bfa7 	b.w	800025c <cmox_cbc_cleanup>
 800030e:	bf00      	nop
 8000310:	0800d824 	.word	0x0800d824

08000314 <cmox_cbc_decrypt_init>:
 8000314:	4901      	ldr	r1, [pc, #4]	@ (800031c <cmox_cbc_decrypt_init+0x8>)
 8000316:	f7ff bfb1 	b.w	800027c <cmox_cbc_init>
 800031a:	bf00      	nop
 800031c:	0800d824 	.word	0x0800d824

08000320 <cmox_cbc_decrypt_setKey>:
 8000320:	4b01      	ldr	r3, [pc, #4]	@ (8000328 <cmox_cbc_decrypt_setKey+0x8>)
 8000322:	f7ff bfbd 	b.w	80002a0 <cmox_cbc_setKey>
 8000326:	bf00      	nop
 8000328:	0800d824 	.word	0x0800d824

0800032c <cmox_cbc_decrypt_setIV>:
 800032c:	4b01      	ldr	r3, [pc, #4]	@ (8000334 <cmox_cbc_decrypt_setIV+0x8>)
 800032e:	f7ff bfcb 	b.w	80002c8 <cmox_cbc_setIV>
 8000332:	bf00      	nop
 8000334:	0800d824 	.word	0x0800d824

08000338 <cmox_cbcDecrypt_construct>:
 8000338:	b110      	cbz	r0, 8000340 <cmox_cbcDecrypt_construct+0x8>
 800033a:	4a02      	ldr	r2, [pc, #8]	@ (8000344 <cmox_cbcDecrypt_construct+0xc>)
 800033c:	6002      	str	r2, [r0, #0]
 800033e:	6081      	str	r1, [r0, #8]
 8000340:	4770      	bx	lr
 8000342:	bf00      	nop
 8000344:	0800d824 	.word	0x0800d824

08000348 <cmox_cbc_decrypt>:
 8000348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800034c:	4617      	mov	r7, r2
 800034e:	2500      	movs	r5, #0
 8000350:	2f10      	cmp	r7, #16
 8000352:	b089      	sub	sp, #36	@ 0x24
 8000354:	4606      	mov	r6, r0
 8000356:	4689      	mov	r9, r1
 8000358:	4698      	mov	r8, r3
 800035a:	d309      	bcc.n	8000370 <cmox_cbc_decrypt+0x28>
 800035c:	7930      	ldrb	r0, [r6, #4]
 800035e:	07c2      	lsls	r2, r0, #31
 8000360:	d506      	bpl.n	8000370 <cmox_cbc_decrypt+0x28>
 8000362:	496f      	ldr	r1, [pc, #444]	@ (8000520 <cmox_cbc_decrypt+0x1d8>)
 8000364:	4630      	mov	r0, r6
 8000366:	f7ff ff73 	bl	8000250 <cmox_cbc_getByCipher>
 800036a:	ea5f 0a00 	movs.w	sl, r0
 800036e:	d101      	bne.n	8000374 <cmox_cbc_decrypt+0x2c>
 8000370:	486c      	ldr	r0, [pc, #432]	@ (8000524 <cmox_cbc_decrypt+0x1dc>)
 8000372:	e0d2      	b.n	800051a <cmox_cbc_decrypt+0x1d2>
 8000374:	f89a 0010 	ldrb.w	r0, [sl, #16]
 8000378:	f000 0005 	and.w	r0, r0, #5
 800037c:	2805      	cmp	r0, #5
 800037e:	bf18      	it	ne
 8000380:	4869      	ldrne	r0, [pc, #420]	@ (8000528 <cmox_cbc_decrypt+0x1e0>)
 8000382:	d1f6      	bne.n	8000372 <cmox_cbc_decrypt+0x2a>
 8000384:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8000386:	b104      	cbz	r4, 800038a <cmox_cbc_decrypt+0x42>
 8000388:	6025      	str	r5, [r4, #0]
 800038a:	f017 0f0f 	tst.w	r7, #15
 800038e:	bf08      	it	eq
 8000390:	463d      	moveq	r5, r7
 8000392:	d009      	beq.n	80003a8 <cmox_cbc_decrypt+0x60>
 8000394:	2f20      	cmp	r7, #32
 8000396:	bf38      	it	cc
 8000398:	6075      	strcc	r5, [r6, #4]
 800039a:	d305      	bcc.n	80003a8 <cmox_cbc_decrypt+0x60>
 800039c:	093d      	lsrs	r5, r7, #4
 800039e:	1e6d      	subs	r5, r5, #1
 80003a0:	2000      	movs	r0, #0
 80003a2:	012d      	lsls	r5, r5, #4
 80003a4:	f8ca 0010 	str.w	r0, [sl, #16]
 80003a8:	2600      	movs	r6, #0
 80003aa:	f50a 7b82 	add.w	fp, sl, #260	@ 0x104
 80003ae:	e01f      	b.n	80003f0 <cmox_cbc_decrypt+0xa8>
 80003b0:	a904      	add	r1, sp, #16
 80003b2:	eb09 0006 	add.w	r0, r9, r6
 80003b6:	f000 fc39 	bl	8000c2c <convert_block_2_words>
 80003ba:	f8da 3008 	ldr.w	r3, [sl, #8]
 80003be:	f8d3 c000 	ldr.w	ip, [r3]
 80003c2:	466a      	mov	r2, sp
 80003c4:	a904      	add	r1, sp, #16
 80003c6:	f10a 0008 	add.w	r0, sl, #8
 80003ca:	47e0      	blx	ip
 80003cc:	4659      	mov	r1, fp
 80003ce:	4668      	mov	r0, sp
 80003d0:	f000 fc57 	bl	8000c82 <xor_blocks>
 80003d4:	eb08 0106 	add.w	r1, r8, r6
 80003d8:	4668      	mov	r0, sp
 80003da:	f000 fc3b 	bl	8000c54 <convert_block_2_bytes>
 80003de:	4659      	mov	r1, fp
 80003e0:	a804      	add	r0, sp, #16
 80003e2:	f000 fc5b 	bl	8000c9c <copy_block>
 80003e6:	b114      	cbz	r4, 80003ee <cmox_cbc_decrypt+0xa6>
 80003e8:	6820      	ldr	r0, [r4, #0]
 80003ea:	3010      	adds	r0, #16
 80003ec:	6020      	str	r0, [r4, #0]
 80003ee:	3610      	adds	r6, #16
 80003f0:	42ae      	cmp	r6, r5
 80003f2:	d3dd      	bcc.n	80003b0 <cmox_cbc_decrypt+0x68>
 80003f4:	42bd      	cmp	r5, r7
 80003f6:	f080 808e 	bcs.w	8000516 <cmox_cbc_decrypt+0x1ce>
 80003fa:	a904      	add	r1, sp, #16
 80003fc:	eb09 0005 	add.w	r0, r9, r5
 8000400:	f000 fc14 	bl	8000c2c <convert_block_2_words>
 8000404:	f8da 3008 	ldr.w	r3, [sl, #8]
 8000408:	f8d3 c000 	ldr.w	ip, [r3]
 800040c:	466a      	mov	r2, sp
 800040e:	a904      	add	r1, sp, #16
 8000410:	f10a 0008 	add.w	r0, sl, #8
 8000414:	47e0      	blx	ip
 8000416:	f105 0110 	add.w	r1, r5, #16
 800041a:	1a7b      	subs	r3, r7, r1
 800041c:	4620      	mov	r0, r4
 800041e:	f04f 0e00 	mov.w	lr, #0
 8000422:	aa04      	add	r2, sp, #16
 8000424:	089c      	lsrs	r4, r3, #2
 8000426:	e014      	b.n	8000452 <cmox_cbc_decrypt+0x10a>
 8000428:	eb01 038e 	add.w	r3, r1, lr, lsl #2
 800042c:	f859 5003 	ldr.w	r5, [r9, r3]
 8000430:	ba2d      	rev	r5, r5
 8000432:	f842 502e 	str.w	r5, [r2, lr, lsl #2]
 8000436:	f85d 602e 	ldr.w	r6, [sp, lr, lsl #2]
 800043a:	4075      	eors	r5, r6
 800043c:	f84d 502e 	str.w	r5, [sp, lr, lsl #2]
 8000440:	ba2d      	rev	r5, r5
 8000442:	f848 5003 	str.w	r5, [r8, r3]
 8000446:	b110      	cbz	r0, 800044e <cmox_cbc_decrypt+0x106>
 8000448:	6803      	ldr	r3, [r0, #0]
 800044a:	1d1b      	adds	r3, r3, #4
 800044c:	6003      	str	r3, [r0, #0]
 800044e:	f10e 0e01 	add.w	lr, lr, #1
 8000452:	45a6      	cmp	lr, r4
 8000454:	d3e8      	bcc.n	8000428 <cmox_cbc_decrypt+0xe0>
 8000456:	4643      	mov	r3, r8
 8000458:	4688      	mov	r8, r1
 800045a:	2100      	movs	r1, #0
 800045c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8000460:	f04f 0e00 	mov.w	lr, #0
 8000464:	eb08 0184 	add.w	r1, r8, r4, lsl #2
 8000468:	1a7f      	subs	r7, r7, r1
 800046a:	4625      	mov	r5, r4
 800046c:	9108      	str	r1, [sp, #32]
 800046e:	e01c      	b.n	80004aa <cmox_cbc_decrypt+0x162>
 8000470:	9c08      	ldr	r4, [sp, #32]
 8000472:	f852 6025 	ldr.w	r6, [r2, r5, lsl #2]
 8000476:	4474      	add	r4, lr
 8000478:	ea4f 0cce 	mov.w	ip, lr, lsl #3
 800047c:	f819 1004 	ldrb.w	r1, [r9, r4]
 8000480:	f1cc 0c18 	rsb	ip, ip, #24
 8000484:	fa01 f10c 	lsl.w	r1, r1, ip
 8000488:	404e      	eors	r6, r1
 800048a:	f842 6025 	str.w	r6, [r2, r5, lsl #2]
 800048e:	f85d 6025 	ldr.w	r6, [sp, r5, lsl #2]
 8000492:	f819 1004 	ldrb.w	r1, [r9, r4]
 8000496:	fa26 f60c 	lsr.w	r6, r6, ip
 800049a:	404e      	eors	r6, r1
 800049c:	551e      	strb	r6, [r3, r4]
 800049e:	b110      	cbz	r0, 80004a6 <cmox_cbc_decrypt+0x15e>
 80004a0:	6804      	ldr	r4, [r0, #0]
 80004a2:	1c64      	adds	r4, r4, #1
 80004a4:	6004      	str	r4, [r0, #0]
 80004a6:	f10e 0e01 	add.w	lr, lr, #1
 80004aa:	45be      	cmp	lr, r7
 80004ac:	d3e0      	bcc.n	8000470 <cmox_cbc_decrypt+0x128>
 80004ae:	461e      	mov	r6, r3
 80004b0:	4604      	mov	r4, r0
 80004b2:	f85d 1025 	ldr.w	r1, [sp, r5, lsl #2]
 80004b6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80004ba:	00ff      	lsls	r7, r7, #3
 80004bc:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 80004c0:	40fb      	lsrs	r3, r7
 80004c2:	4019      	ands	r1, r3
 80004c4:	4048      	eors	r0, r1
 80004c6:	f842 0025 	str.w	r0, [r2, r5, lsl #2]
 80004ca:	1c68      	adds	r0, r5, #1
 80004cc:	2804      	cmp	r0, #4
 80004ce:	d20a      	bcs.n	80004e6 <cmox_cbc_decrypt+0x19e>
 80004d0:	4669      	mov	r1, sp
 80004d2:	f1c5 0503 	rsb	r5, r5, #3
 80004d6:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 80004da:	ab04      	add	r3, sp, #16
 80004dc:	00aa      	lsls	r2, r5, #2
 80004de:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80004e2:	f00c fa5e 	bl	800c9a2 <__aeabi_memcpy>
 80004e6:	f8da 3008 	ldr.w	r3, [sl, #8]
 80004ea:	681f      	ldr	r7, [r3, #0]
 80004ec:	466a      	mov	r2, sp
 80004ee:	a904      	add	r1, sp, #16
 80004f0:	f10a 0008 	add.w	r0, sl, #8
 80004f4:	47b8      	blx	r7
 80004f6:	f50a 7182 	add.w	r1, sl, #260	@ 0x104
 80004fa:	4668      	mov	r0, sp
 80004fc:	f000 fbc1 	bl	8000c82 <xor_blocks>
 8000500:	eb06 0008 	add.w	r0, r6, r8
 8000504:	f1a0 0110 	sub.w	r1, r0, #16
 8000508:	4668      	mov	r0, sp
 800050a:	f000 fba3 	bl	8000c54 <convert_block_2_bytes>
 800050e:	b114      	cbz	r4, 8000516 <cmox_cbc_decrypt+0x1ce>
 8000510:	6820      	ldr	r0, [r4, #0]
 8000512:	3010      	adds	r0, #16
 8000514:	6020      	str	r0, [r4, #0]
 8000516:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 800051a:	b009      	add	sp, #36	@ 0x24
 800051c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000520:	0800d824 	.word	0x0800d824
 8000524:	00010003 	.word	0x00010003
 8000528:	00010004 	.word	0x00010004

0800052c <cmox_cbc_encrypt_cleanup>:
 800052c:	4901      	ldr	r1, [pc, #4]	@ (8000534 <cmox_cbc_encrypt_cleanup+0x8>)
 800052e:	f7ff be95 	b.w	800025c <cmox_cbc_cleanup>
 8000532:	bf00      	nop
 8000534:	0800d850 	.word	0x0800d850

08000538 <cmox_cbc_encrypt_init>:
 8000538:	4901      	ldr	r1, [pc, #4]	@ (8000540 <cmox_cbc_encrypt_init+0x8>)
 800053a:	f7ff be9f 	b.w	800027c <cmox_cbc_init>
 800053e:	bf00      	nop
 8000540:	0800d850 	.word	0x0800d850

08000544 <cmox_cbc_encrypt_setKey>:
 8000544:	4b01      	ldr	r3, [pc, #4]	@ (800054c <cmox_cbc_encrypt_setKey+0x8>)
 8000546:	f7ff beab 	b.w	80002a0 <cmox_cbc_setKey>
 800054a:	bf00      	nop
 800054c:	0800d850 	.word	0x0800d850

08000550 <cmox_cbc_encrypt_setIV>:
 8000550:	4b01      	ldr	r3, [pc, #4]	@ (8000558 <cmox_cbc_encrypt_setIV+0x8>)
 8000552:	f7ff beb9 	b.w	80002c8 <cmox_cbc_setIV>
 8000556:	bf00      	nop
 8000558:	0800d850 	.word	0x0800d850

0800055c <cmox_cbc_encrypt>:
 800055c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000560:	4615      	mov	r5, r2
 8000562:	2d10      	cmp	r5, #16
 8000564:	b086      	sub	sp, #24
 8000566:	4606      	mov	r6, r0
 8000568:	460f      	mov	r7, r1
 800056a:	4698      	mov	r8, r3
 800056c:	d307      	bcc.n	800057e <cmox_cbc_encrypt+0x22>
 800056e:	7930      	ldrb	r0, [r6, #4]
 8000570:	07c2      	lsls	r2, r0, #31
 8000572:	d504      	bpl.n	800057e <cmox_cbc_encrypt+0x22>
 8000574:	4951      	ldr	r1, [pc, #324]	@ (80006bc <cmox_cbc_encrypt+0x160>)
 8000576:	4630      	mov	r0, r6
 8000578:	f7ff fe6a 	bl	8000250 <cmox_cbc_getByCipher>
 800057c:	b908      	cbnz	r0, 8000582 <cmox_cbc_encrypt+0x26>
 800057e:	4850      	ldr	r0, [pc, #320]	@ (80006c0 <cmox_cbc_encrypt+0x164>)
 8000580:	e098      	b.n	80006b4 <cmox_cbc_encrypt+0x158>
 8000582:	7c01      	ldrb	r1, [r0, #16]
 8000584:	f001 0105 	and.w	r1, r1, #5
 8000588:	2905      	cmp	r1, #5
 800058a:	bf18      	it	ne
 800058c:	484d      	ldrne	r0, [pc, #308]	@ (80006c4 <cmox_cbc_encrypt+0x168>)
 800058e:	d1f7      	bne.n	8000580 <cmox_cbc_encrypt+0x24>
 8000590:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8000592:	b10c      	cbz	r4, 8000598 <cmox_cbc_encrypt+0x3c>
 8000594:	2100      	movs	r1, #0
 8000596:	6021      	str	r1, [r4, #0]
 8000598:	f015 0f0f 	tst.w	r5, #15
 800059c:	bf08      	it	eq
 800059e:	46a9      	moveq	r9, r5
 80005a0:	d004      	beq.n	80005ac <cmox_cbc_encrypt+0x50>
 80005a2:	0929      	lsrs	r1, r5, #4
 80005a4:	ea4f 1901 	mov.w	r9, r1, lsl #4
 80005a8:	2100      	movs	r1, #0
 80005aa:	6071      	str	r1, [r6, #4]
 80005ac:	2600      	movs	r6, #0
 80005ae:	f500 7b82 	add.w	fp, r0, #260	@ 0x104
 80005b2:	4682      	mov	sl, r0
 80005b4:	e01e      	b.n	80005f4 <cmox_cbc_encrypt+0x98>
 80005b6:	4669      	mov	r1, sp
 80005b8:	19b8      	adds	r0, r7, r6
 80005ba:	f000 fb37 	bl	8000c2c <convert_block_2_words>
 80005be:	4659      	mov	r1, fp
 80005c0:	4668      	mov	r0, sp
 80005c2:	f000 fb5e 	bl	8000c82 <xor_blocks>
 80005c6:	f8da 3008 	ldr.w	r3, [sl, #8]
 80005ca:	f8d3 c000 	ldr.w	ip, [r3]
 80005ce:	466a      	mov	r2, sp
 80005d0:	4669      	mov	r1, sp
 80005d2:	f10a 0008 	add.w	r0, sl, #8
 80005d6:	47e0      	blx	ip
 80005d8:	eb08 0106 	add.w	r1, r8, r6
 80005dc:	4668      	mov	r0, sp
 80005de:	f000 fb39 	bl	8000c54 <convert_block_2_bytes>
 80005e2:	4659      	mov	r1, fp
 80005e4:	4668      	mov	r0, sp
 80005e6:	f000 fb59 	bl	8000c9c <copy_block>
 80005ea:	b114      	cbz	r4, 80005f2 <cmox_cbc_encrypt+0x96>
 80005ec:	6820      	ldr	r0, [r4, #0]
 80005ee:	3010      	adds	r0, #16
 80005f0:	6020      	str	r0, [r4, #0]
 80005f2:	3610      	adds	r6, #16
 80005f4:	454e      	cmp	r6, r9
 80005f6:	d3de      	bcc.n	80005b6 <cmox_cbc_encrypt+0x5a>
 80005f8:	45a9      	cmp	r9, r5
 80005fa:	d259      	bcs.n	80006b0 <cmox_cbc_encrypt+0x154>
 80005fc:	eba5 0109 	sub.w	r1, r5, r9
 8000600:	0889      	lsrs	r1, r1, #2
 8000602:	2300      	movs	r3, #0
 8000604:	e010      	b.n	8000628 <cmox_cbc_encrypt+0xcc>
 8000606:	eb09 0283 	add.w	r2, r9, r3, lsl #2
 800060a:	58b8      	ldr	r0, [r7, r2]
 800060c:	ba00      	rev	r0, r0
 800060e:	f84d 0023 	str.w	r0, [sp, r3, lsl #2]
 8000612:	f85b 6023 	ldr.w	r6, [fp, r3, lsl #2]
 8000616:	4070      	eors	r0, r6
 8000618:	f84d 0023 	str.w	r0, [sp, r3, lsl #2]
 800061c:	f85b 0023 	ldr.w	r0, [fp, r3, lsl #2]
 8000620:	ba00      	rev	r0, r0
 8000622:	f848 0002 	str.w	r0, [r8, r2]
 8000626:	1c5b      	adds	r3, r3, #1
 8000628:	428b      	cmp	r3, r1
 800062a:	d3ec      	bcc.n	8000606 <cmox_cbc_encrypt+0xaa>
 800062c:	eb09 0281 	add.w	r2, r9, r1, lsl #2
 8000630:	9204      	str	r2, [sp, #16]
 8000632:	4613      	mov	r3, r2
 8000634:	f85b 2021 	ldr.w	r2, [fp, r1, lsl #2]
 8000638:	f84d 2021 	str.w	r2, [sp, r1, lsl #2]
 800063c:	9705      	str	r7, [sp, #20]
 800063e:	2200      	movs	r2, #0
 8000640:	e015      	b.n	800066e <cmox_cbc_encrypt+0x112>
 8000642:	9f04      	ldr	r7, [sp, #16]
 8000644:	9e05      	ldr	r6, [sp, #20]
 8000646:	f85d 0021 	ldr.w	r0, [sp, r1, lsl #2]
 800064a:	19d7      	adds	r7, r2, r7
 800064c:	ea4f 0cc2 	mov.w	ip, r2, lsl #3
 8000650:	5df6      	ldrb	r6, [r6, r7]
 8000652:	f1cc 0c18 	rsb	ip, ip, #24
 8000656:	fa06 f60c 	lsl.w	r6, r6, ip
 800065a:	4070      	eors	r0, r6
 800065c:	f84d 0021 	str.w	r0, [sp, r1, lsl #2]
 8000660:	1c52      	adds	r2, r2, #1
 8000662:	f85b 0021 	ldr.w	r0, [fp, r1, lsl #2]
 8000666:	fa20 f00c 	lsr.w	r0, r0, ip
 800066a:	f808 0007 	strb.w	r0, [r8, r7]
 800066e:	1aef      	subs	r7, r5, r3
 8000670:	42ba      	cmp	r2, r7
 8000672:	d3e6      	bcc.n	8000642 <cmox_cbc_encrypt+0xe6>
 8000674:	e003      	b.n	800067e <cmox_cbc_encrypt+0x122>
 8000676:	f85b 2021 	ldr.w	r2, [fp, r1, lsl #2]
 800067a:	f84d 2021 	str.w	r2, [sp, r1, lsl #2]
 800067e:	1c49      	adds	r1, r1, #1
 8000680:	2904      	cmp	r1, #4
 8000682:	d3f8      	bcc.n	8000676 <cmox_cbc_encrypt+0x11a>
 8000684:	f8da 3008 	ldr.w	r3, [sl, #8]
 8000688:	f8d3 b000 	ldr.w	fp, [r3]
 800068c:	466a      	mov	r2, sp
 800068e:	4669      	mov	r1, sp
 8000690:	f10a 0008 	add.w	r0, sl, #8
 8000694:	47d8      	blx	fp
 8000696:	eb08 0009 	add.w	r0, r8, r9
 800069a:	f1a0 0110 	sub.w	r1, r0, #16
 800069e:	4668      	mov	r0, sp
 80006a0:	f000 fad8 	bl	8000c54 <convert_block_2_bytes>
 80006a4:	b124      	cbz	r4, 80006b0 <cmox_cbc_encrypt+0x154>
 80006a6:	6820      	ldr	r0, [r4, #0]
 80006a8:	182d      	adds	r5, r5, r0
 80006aa:	eba5 0509 	sub.w	r5, r5, r9
 80006ae:	6025      	str	r5, [r4, #0]
 80006b0:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 80006b4:	b007      	add	sp, #28
 80006b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80006ba:	bf00      	nop
 80006bc:	0800d850 	.word	0x0800d850
 80006c0:	00010003 	.word	0x00010003
 80006c4:	00010004 	.word	0x00010004

080006c8 <cmox_cbcEncrypt_construct>:
 80006c8:	b110      	cbz	r0, 80006d0 <cmox_cbcEncrypt_construct+0x8>
 80006ca:	4a02      	ldr	r2, [pc, #8]	@ (80006d4 <cmox_cbcEncrypt_construct+0xc>)
 80006cc:	6002      	str	r2, [r0, #0]
 80006ce:	6081      	str	r1, [r0, #8]
 80006d0:	4770      	bx	lr
 80006d2:	bf00      	nop
 80006d4:	0800d850 	.word	0x0800d850

080006d8 <cmox_cipher_encrypt>:
 80006d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006da:	460c      	mov	r4, r1
 80006dc:	4611      	mov	r1, r2
 80006de:	0005      	movs	r5, r0
 80006e0:	461a      	mov	r2, r3
 80006e2:	b084      	sub	sp, #16
 80006e4:	4b10      	ldr	r3, [pc, #64]	@ (8000728 <cmox_cipher_encrypt+0x50>)
 80006e6:	d01b      	beq.n	8000720 <cmox_cipher_encrypt+0x48>
 80006e8:	6868      	ldr	r0, [r5, #4]
 80006ea:	283a      	cmp	r0, #58	@ 0x3a
 80006ec:	bf18      	it	ne
 80006ee:	4b0f      	ldrne	r3, [pc, #60]	@ (800072c <cmox_cipher_encrypt+0x54>)
 80006f0:	d116      	bne.n	8000720 <cmox_cipher_encrypt+0x48>
 80006f2:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80006f4:	b90c      	cbnz	r4, 80006fa <cmox_cipher_encrypt+0x22>
 80006f6:	b109      	cbz	r1, 80006fc <cmox_cipher_encrypt+0x24>
 80006f8:	e012      	b.n	8000720 <cmox_cipher_encrypt+0x48>
 80006fa:	b188      	cbz	r0, 8000720 <cmox_cipher_encrypt+0x48>
 80006fc:	b182      	cbz	r2, 8000720 <cmox_cipher_encrypt+0x48>
 80006fe:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8000700:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8000702:	b907      	cbnz	r7, 8000706 <cmox_cipher_encrypt+0x2e>
 8000704:	b966      	cbnz	r6, 8000720 <cmox_cipher_encrypt+0x48>
 8000706:	b158      	cbz	r0, 8000720 <cmox_cipher_encrypt+0x48>
 8000708:	f8dd c038 	ldr.w	ip, [sp, #56]	@ 0x38
 800070c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800070e:	9002      	str	r0, [sp, #8]
 8000710:	f8cd c00c 	str.w	ip, [sp, #12]
 8000714:	9601      	str	r6, [sp, #4]
 8000716:	9700      	str	r7, [sp, #0]
 8000718:	4620      	mov	r0, r4
 800071a:	682c      	ldr	r4, [r5, #0]
 800071c:	47a0      	blx	r4
 800071e:	4603      	mov	r3, r0
 8000720:	4618      	mov	r0, r3
 8000722:	b005      	add	sp, #20
 8000724:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000726:	bf00      	nop
 8000728:	00010003 	.word	0x00010003
 800072c:	00010002 	.word	0x00010002

08000730 <cmox_cipher_decrypt>:
 8000730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000732:	460c      	mov	r4, r1
 8000734:	4611      	mov	r1, r2
 8000736:	0005      	movs	r5, r0
 8000738:	461a      	mov	r2, r3
 800073a:	b084      	sub	sp, #16
 800073c:	4b10      	ldr	r3, [pc, #64]	@ (8000780 <cmox_cipher_decrypt+0x50>)
 800073e:	d01c      	beq.n	800077a <cmox_cipher_decrypt+0x4a>
 8000740:	6868      	ldr	r0, [r5, #4]
 8000742:	f110 0f3b 	cmn.w	r0, #59	@ 0x3b
 8000746:	bf18      	it	ne
 8000748:	4b0e      	ldrne	r3, [pc, #56]	@ (8000784 <cmox_cipher_decrypt+0x54>)
 800074a:	d116      	bne.n	800077a <cmox_cipher_decrypt+0x4a>
 800074c:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800074e:	b90c      	cbnz	r4, 8000754 <cmox_cipher_decrypt+0x24>
 8000750:	b109      	cbz	r1, 8000756 <cmox_cipher_decrypt+0x26>
 8000752:	e012      	b.n	800077a <cmox_cipher_decrypt+0x4a>
 8000754:	b188      	cbz	r0, 800077a <cmox_cipher_decrypt+0x4a>
 8000756:	b182      	cbz	r2, 800077a <cmox_cipher_decrypt+0x4a>
 8000758:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800075a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800075c:	b907      	cbnz	r7, 8000760 <cmox_cipher_decrypt+0x30>
 800075e:	b966      	cbnz	r6, 800077a <cmox_cipher_decrypt+0x4a>
 8000760:	b158      	cbz	r0, 800077a <cmox_cipher_decrypt+0x4a>
 8000762:	f8dd c038 	ldr.w	ip, [sp, #56]	@ 0x38
 8000766:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8000768:	9002      	str	r0, [sp, #8]
 800076a:	f8cd c00c 	str.w	ip, [sp, #12]
 800076e:	9601      	str	r6, [sp, #4]
 8000770:	9700      	str	r7, [sp, #0]
 8000772:	4620      	mov	r0, r4
 8000774:	682c      	ldr	r4, [r5, #0]
 8000776:	47a0      	blx	r4
 8000778:	4603      	mov	r3, r0
 800077a:	4618      	mov	r0, r3
 800077c:	b005      	add	sp, #20
 800077e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000780:	00010003 	.word	0x00010003
 8000784:	00010002 	.word	0x00010002

08000788 <cmox_cipher_innerCompute>:
 8000788:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
 800078c:	4604      	mov	r4, r0
 800078e:	460d      	mov	r5, r1
 8000790:	6821      	ldr	r1, [r4, #0]
 8000792:	4616      	mov	r6, r2
 8000794:	684a      	ldr	r2, [r1, #4]
 8000796:	461f      	mov	r7, r3
 8000798:	4790      	blx	r2
 800079a:	4680      	mov	r8, r0
 800079c:	f5b8 3f80 	cmp.w	r8, #65536	@ 0x10000
 80007a0:	d11d      	bne.n	80007de <cmox_cipher_innerCompute+0x56>
 80007a2:	6823      	ldr	r3, [r4, #0]
 80007a4:	9a08      	ldr	r2, [sp, #32]
 80007a6:	4639      	mov	r1, r7
 80007a8:	689f      	ldr	r7, [r3, #8]
 80007aa:	4620      	mov	r0, r4
 80007ac:	47b8      	blx	r7
 80007ae:	4680      	mov	r8, r0
 80007b0:	f5b8 3f80 	cmp.w	r8, #65536	@ 0x10000
 80007b4:	d113      	bne.n	80007de <cmox_cipher_innerCompute+0x56>
 80007b6:	6823      	ldr	r3, [r4, #0]
 80007b8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80007ba:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80007bc:	68df      	ldr	r7, [r3, #12]
 80007be:	4620      	mov	r0, r4
 80007c0:	47b8      	blx	r7
 80007c2:	4680      	mov	r8, r0
 80007c4:	f5b8 3f80 	cmp.w	r8, #65536	@ 0x10000
 80007c8:	d109      	bne.n	80007de <cmox_cipher_innerCompute+0x56>
 80007ca:	4629      	mov	r1, r5
 80007cc:	980c      	ldr	r0, [sp, #48]	@ 0x30
 80007ce:	9000      	str	r0, [sp, #0]
 80007d0:	4632      	mov	r2, r6
 80007d2:	6825      	ldr	r5, [r4, #0]
 80007d4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80007d6:	6a2e      	ldr	r6, [r5, #32]
 80007d8:	4620      	mov	r0, r4
 80007da:	47b0      	blx	r6
 80007dc:	4680      	mov	r8, r0
 80007de:	6821      	ldr	r1, [r4, #0]
 80007e0:	680a      	ldr	r2, [r1, #0]
 80007e2:	4620      	mov	r0, r4
 80007e4:	4790      	blx	r2
 80007e6:	4640      	mov	r0, r8
 80007e8:	e8bd 81f6 	ldmia.w	sp!, {r1, r2, r4, r5, r6, r7, r8, pc}

080007ec <cmox_cipherMode_init>:
 80007ec:	2200      	movs	r2, #0
 80007ee:	6042      	str	r2, [r0, #4]
 80007f0:	2001      	movs	r0, #1
 80007f2:	6088      	str	r0, [r1, #8]
 80007f4:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 80007f8:	4770      	bx	lr
	...

080007fc <cmox_cipherMode_setKey>:
 80007fc:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000800:	b08c      	sub	sp, #48	@ 0x30
 8000802:	4692      	mov	sl, r2
 8000804:	f1ba 0f10 	cmp.w	sl, #16
 8000808:	4ae7      	ldr	r2, [pc, #924]	@ (8000ba8 <cmox_cipherMode_setKey+0x3ac>)
 800080a:	4be8      	ldr	r3, [pc, #928]	@ (8000bac <cmox_cipherMode_setKey+0x3b0>)
 800080c:	4de8      	ldr	r5, [pc, #928]	@ (8000bb0 <cmox_cipherMode_setKey+0x3b4>)
 800080e:	f8df 83a4 	ldr.w	r8, [pc, #932]	@ 8000bb4 <cmox_cipherMode_setKey+0x3b8>
 8000812:	4ee9      	ldr	r6, [pc, #932]	@ (8000bb8 <cmox_cipherMode_setKey+0x3bc>)
 8000814:	f8df b3a4 	ldr.w	fp, [pc, #932]	@ 8000bbc <cmox_cipherMode_setKey+0x3c0>
 8000818:	f10d 0c04 	add.w	ip, sp, #4
 800081c:	d008      	beq.n	8000830 <cmox_cipherMode_setKey+0x34>
 800081e:	f1ba 0f18 	cmp.w	sl, #24
 8000822:	f000 8092 	beq.w	800094a <cmox_cipherMode_setKey+0x14e>
 8000826:	f1ba 0f20 	cmp.w	sl, #32
 800082a:	f000 8118 	beq.w	8000a5e <cmox_cipherMode_setKey+0x262>
 800082e:	e1a8      	b.n	8000b82 <cmox_cipherMode_setKey+0x386>
 8000830:	e9db 0400 	ldrd	r0, r4, [fp]
 8000834:	f10d 0e24 	add.w	lr, sp, #36	@ 0x24
 8000838:	4fe1      	ldr	r7, [pc, #900]	@ (8000bc0 <cmox_cipherMode_setKey+0x3c4>)
 800083a:	e9ce 0400 	strd	r0, r4, [lr]
 800083e:	7838      	ldrb	r0, [r7, #0]
 8000840:	2800      	cmp	r0, #0
 8000842:	bf0c      	ite	eq
 8000844:	f04f 0900 	moveq.w	r9, #0
 8000848:	f04f 0904 	movne.w	r9, #4
 800084c:	f856 4009 	ldr.w	r4, [r6, r9]
 8000850:	f85e 7009 	ldr.w	r7, [lr, r9]
 8000854:	443c      	add	r4, r7
 8000856:	6023      	str	r3, [r4, #0]
 8000858:	2301      	movs	r3, #1
 800085a:	6827      	ldr	r7, [r4, #0]
 800085c:	60a3      	str	r3, [r4, #8]
 800085e:	f8d6 9000 	ldr.w	r9, [r6]
 8000862:	6873      	ldr	r3, [r6, #4]
 8000864:	7b8c      	ldrb	r4, [r1, #14]
 8000866:	9400      	str	r4, [sp, #0]
 8000868:	405f      	eors	r7, r3
 800086a:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 800086c:	407c      	eors	r4, r7
 800086e:	f8de 7004 	ldr.w	r7, [lr, #4]
 8000872:	ea87 0709 	eor.w	r7, r7, r9
 8000876:	f084 0404 	eor.w	r4, r4, #4
 800087a:	f087 0efc 	eor.w	lr, r7, #252	@ 0xfc
 800087e:	4474      	add	r4, lr
 8000880:	9f00      	ldr	r7, [sp, #0]
 8000882:	f084 0e52 	eor.w	lr, r4, #82	@ 0x52
 8000886:	44be      	add	lr, r7
 8000888:	f88c e00e 	strb.w	lr, [ip, #14]
 800088c:	f04f 0e01 	mov.w	lr, #1
 8000890:	f811 400e 	ldrb.w	r4, [r1, lr]
 8000894:	f80c 400e 	strb.w	r4, [ip, lr]
 8000898:	f10e 0e01 	add.w	lr, lr, #1
 800089c:	f1be 0f0e 	cmp.w	lr, #14
 80008a0:	d3f6      	bcc.n	8000890 <cmox_cipherMode_setKey+0x94>
 80008a2:	e9db 4700 	ldrd	r4, r7, [fp]
 80008a6:	f10d 0e24 	add.w	lr, sp, #36	@ 0x24
 80008aa:	2800      	cmp	r0, #0
 80008ac:	e9ce 4700 	strd	r4, r7, [lr]
 80008b0:	bf0c      	ite	eq
 80008b2:	2700      	moveq	r7, #0
 80008b4:	2704      	movne	r7, #4
 80008b6:	463c      	mov	r4, r7
 80008b8:	59f7      	ldr	r7, [r6, r7]
 80008ba:	f85e 4004 	ldr.w	r4, [lr, r4]
 80008be:	19e4      	adds	r4, r4, r7
 80008c0:	2701      	movs	r7, #1
 80008c2:	f8c4 8000 	str.w	r8, [r4]
 80008c6:	2800      	cmp	r0, #0
 80008c8:	f8d4 8000 	ldr.w	r8, [r4]
 80008cc:	60a7      	str	r7, [r4, #8]
 80008ce:	ea83 0808 	eor.w	r8, r3, r8
 80008d2:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 80008d4:	780f      	ldrb	r7, [r1, #0]
 80008d6:	ea84 0408 	eor.w	r4, r4, r8
 80008da:	f084 0804 	eor.w	r8, r4, #4
 80008de:	f8de 4004 	ldr.w	r4, [lr, #4]
 80008e2:	ea84 0409 	eor.w	r4, r4, r9
 80008e6:	f084 04fc 	eor.w	r4, r4, #252	@ 0xfc
 80008ea:	4444      	add	r4, r8
 80008ec:	f084 080b 	eor.w	r8, r4, #11
 80008f0:	e9db 4e00 	ldrd	r4, lr, [fp]
 80008f4:	44b8      	add	r8, r7
 80008f6:	af09      	add	r7, sp, #36	@ 0x24
 80008f8:	f88d 8004 	strb.w	r8, [sp, #4]
 80008fc:	e9c7 4e00 	strd	r4, lr, [r7]
 8000900:	bf0e      	itee	eq
 8000902:	f04f 0e00 	moveq.w	lr, #0
 8000906:	2004      	movne	r0, #4
 8000908:	4686      	movne	lr, r0
 800090a:	ac09      	add	r4, sp, #36	@ 0x24
 800090c:	5836      	ldr	r6, [r6, r0]
 800090e:	f854 000e 	ldr.w	r0, [r4, lr]
 8000912:	1986      	adds	r6, r0, r6
 8000914:	6035      	str	r5, [r6, #0]
 8000916:	2501      	movs	r5, #1
 8000918:	6830      	ldr	r0, [r6, #0]
 800091a:	60b5      	str	r5, [r6, #8]
 800091c:	4043      	eors	r3, r0
 800091e:	7bce      	ldrb	r6, [r1, #15]
 8000920:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8000922:	6860      	ldr	r0, [r4, #4]
 8000924:	404b      	eors	r3, r1
 8000926:	ea80 0009 	eor.w	r0, r0, r9
 800092a:	f083 0304 	eor.w	r3, r3, #4
 800092e:	f080 00fc 	eor.w	r0, r0, #252	@ 0xfc
 8000932:	4403      	add	r3, r0
 8000934:	f083 0385 	eor.w	r3, r3, #133	@ 0x85
 8000938:	199b      	adds	r3, r3, r6
 800093a:	f88c 300f 	strb.w	r3, [ip, #15]
 800093e:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8000940:	7a28      	ldrb	r0, [r5, #8]
 8000942:	07c1      	lsls	r1, r0, #31
 8000944:	f100 811f 	bmi.w	8000b86 <cmox_cipherMode_setKey+0x38a>
 8000948:	e11b      	b.n	8000b82 <cmox_cipherMode_setKey+0x386>
 800094a:	e9db e900 	ldrd	lr, r9, [fp]
 800094e:	a809      	add	r0, sp, #36	@ 0x24
 8000950:	4c9b      	ldr	r4, [pc, #620]	@ (8000bc0 <cmox_cipherMode_setKey+0x3c4>)
 8000952:	e9c0 e900 	strd	lr, r9, [r0]
 8000956:	7820      	ldrb	r0, [r4, #0]
 8000958:	2800      	cmp	r0, #0
 800095a:	bf0c      	ite	eq
 800095c:	f04f 0900 	moveq.w	r9, #0
 8000960:	f04f 0904 	movne.w	r9, #4
 8000964:	f10d 0e24 	add.w	lr, sp, #36	@ 0x24
 8000968:	f856 4009 	ldr.w	r4, [r6, r9]
 800096c:	f85e 7009 	ldr.w	r7, [lr, r9]
 8000970:	443c      	add	r4, r7
 8000972:	6025      	str	r5, [r4, #0]
 8000974:	2501      	movs	r5, #1
 8000976:	6827      	ldr	r7, [r4, #0]
 8000978:	60a5      	str	r5, [r4, #8]
 800097a:	f8d6 9000 	ldr.w	r9, [r6]
 800097e:	6875      	ldr	r5, [r6, #4]
 8000980:	7b8c      	ldrb	r4, [r1, #14]
 8000982:	9400      	str	r4, [sp, #0]
 8000984:	406f      	eors	r7, r5
 8000986:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8000988:	407c      	eors	r4, r7
 800098a:	f8de 7004 	ldr.w	r7, [lr, #4]
 800098e:	ea87 0709 	eor.w	r7, r7, r9
 8000992:	f084 0404 	eor.w	r4, r4, #4
 8000996:	f087 0efc 	eor.w	lr, r7, #252	@ 0xfc
 800099a:	4474      	add	r4, lr
 800099c:	9f00      	ldr	r7, [sp, #0]
 800099e:	f084 0e85 	eor.w	lr, r4, #133	@ 0x85
 80009a2:	44be      	add	lr, r7
 80009a4:	f88c e00e 	strb.w	lr, [ip, #14]
 80009a8:	f04f 0e01 	mov.w	lr, #1
 80009ac:	f811 400e 	ldrb.w	r4, [r1, lr]
 80009b0:	f80c 400e 	strb.w	r4, [ip, lr]
 80009b4:	f10e 0e01 	add.w	lr, lr, #1
 80009b8:	f1be 0f0e 	cmp.w	lr, #14
 80009bc:	d3f6      	bcc.n	80009ac <cmox_cipherMode_setKey+0x1b0>
 80009be:	e9db 4700 	ldrd	r4, r7, [fp]
 80009c2:	f10d 0e24 	add.w	lr, sp, #36	@ 0x24
 80009c6:	2800      	cmp	r0, #0
 80009c8:	e9ce 4700 	strd	r4, r7, [lr]
 80009cc:	bf0c      	ite	eq
 80009ce:	2700      	moveq	r7, #0
 80009d0:	2704      	movne	r7, #4
 80009d2:	463c      	mov	r4, r7
 80009d4:	59f7      	ldr	r7, [r6, r7]
 80009d6:	f85e 4004 	ldr.w	r4, [lr, r4]
 80009da:	19e4      	adds	r4, r4, r7
 80009dc:	6023      	str	r3, [r4, #0]
 80009de:	2301      	movs	r3, #1
 80009e0:	6827      	ldr	r7, [r4, #0]
 80009e2:	60a3      	str	r3, [r4, #8]
 80009e4:	406f      	eors	r7, r5
 80009e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80009e8:	780c      	ldrb	r4, [r1, #0]
 80009ea:	405f      	eors	r7, r3
 80009ec:	f8de 3004 	ldr.w	r3, [lr, #4]
 80009f0:	ea83 0309 	eor.w	r3, r3, r9
 80009f4:	f087 0704 	eor.w	r7, r7, #4
 80009f8:	f083 03fc 	eor.w	r3, r3, #252	@ 0xfc
 80009fc:	441f      	add	r7, r3
 80009fe:	f087 0752 	eor.w	r7, r7, #82	@ 0x52
 8000a02:	193f      	adds	r7, r7, r4
 8000a04:	f88d 7004 	strb.w	r7, [sp, #4]
 8000a08:	ac09      	add	r4, sp, #36	@ 0x24
 8000a0a:	e9db 7300 	ldrd	r7, r3, [fp]
 8000a0e:	e9c4 7300 	strd	r7, r3, [r4]
 8000a12:	2800      	cmp	r0, #0
 8000a14:	bf0e      	itee	eq
 8000a16:	2300      	moveq	r3, #0
 8000a18:	2004      	movne	r0, #4
 8000a1a:	2304      	movne	r3, #4
 8000a1c:	5836      	ldr	r6, [r6, r0]
 8000a1e:	58e0      	ldr	r0, [r4, r3]
 8000a20:	1986      	adds	r6, r0, r6
 8000a22:	2301      	movs	r3, #1
 8000a24:	f8c6 8000 	str.w	r8, [r6]
 8000a28:	6830      	ldr	r0, [r6, #0]
 8000a2a:	60b3      	str	r3, [r6, #8]
 8000a2c:	4045      	eors	r5, r0
 8000a2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8000a30:	6860      	ldr	r0, [r4, #4]
 8000a32:	405d      	eors	r5, r3
 8000a34:	ea80 0009 	eor.w	r0, r0, r9
 8000a38:	f085 0504 	eor.w	r5, r5, #4
 8000a3c:	f080 00fc 	eor.w	r0, r0, #252	@ 0xfc
 8000a40:	7bce      	ldrb	r6, [r1, #15]
 8000a42:	4405      	add	r5, r0
 8000a44:	f085 050b 	eor.w	r5, r5, #11
 8000a48:	19ad      	adds	r5, r5, r6
 8000a4a:	f88c 500f 	strb.w	r5, [ip, #15]
 8000a4e:	2010      	movs	r0, #16
 8000a50:	5c0b      	ldrb	r3, [r1, r0]
 8000a52:	f80c 3000 	strb.w	r3, [ip, r0]
 8000a56:	1c40      	adds	r0, r0, #1
 8000a58:	2818      	cmp	r0, #24
 8000a5a:	d3f9      	bcc.n	8000a50 <cmox_cipherMode_setKey+0x254>
 8000a5c:	e76f      	b.n	800093e <cmox_cipherMode_setKey+0x142>
 8000a5e:	e9db e900 	ldrd	lr, r9, [fp]
 8000a62:	a809      	add	r0, sp, #36	@ 0x24
 8000a64:	4c56      	ldr	r4, [pc, #344]	@ (8000bc0 <cmox_cipherMode_setKey+0x3c4>)
 8000a66:	e9c0 e900 	strd	lr, r9, [r0]
 8000a6a:	7820      	ldrb	r0, [r4, #0]
 8000a6c:	2800      	cmp	r0, #0
 8000a6e:	bf0c      	ite	eq
 8000a70:	f04f 0900 	moveq.w	r9, #0
 8000a74:	f04f 0904 	movne.w	r9, #4
 8000a78:	f10d 0e24 	add.w	lr, sp, #36	@ 0x24
 8000a7c:	f856 4009 	ldr.w	r4, [r6, r9]
 8000a80:	f85e 7009 	ldr.w	r7, [lr, r9]
 8000a84:	443c      	add	r4, r7
 8000a86:	f8c4 8000 	str.w	r8, [r4]
 8000a8a:	f04f 0801 	mov.w	r8, #1
 8000a8e:	6827      	ldr	r7, [r4, #0]
 8000a90:	f8c4 8008 	str.w	r8, [r4, #8]
 8000a94:	f8d6 9000 	ldr.w	r9, [r6]
 8000a98:	f8d6 8004 	ldr.w	r8, [r6, #4]
 8000a9c:	7fcc      	ldrb	r4, [r1, #31]
 8000a9e:	9400      	str	r4, [sp, #0]
 8000aa0:	ea88 0707 	eor.w	r7, r8, r7
 8000aa4:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8000aa6:	407c      	eors	r4, r7
 8000aa8:	f8de 7004 	ldr.w	r7, [lr, #4]
 8000aac:	ea87 0709 	eor.w	r7, r7, r9
 8000ab0:	f084 0404 	eor.w	r4, r4, #4
 8000ab4:	f087 0efc 	eor.w	lr, r7, #252	@ 0xfc
 8000ab8:	4474      	add	r4, lr
 8000aba:	9f00      	ldr	r7, [sp, #0]
 8000abc:	f084 0e0b 	eor.w	lr, r4, #11
 8000ac0:	44be      	add	lr, r7
 8000ac2:	f88c e01f 	strb.w	lr, [ip, #31]
 8000ac6:	f04f 0e00 	mov.w	lr, #0
 8000aca:	f811 400e 	ldrb.w	r4, [r1, lr]
 8000ace:	f80c 400e 	strb.w	r4, [ip, lr]
 8000ad2:	f10e 0e01 	add.w	lr, lr, #1
 8000ad6:	f1be 0f10 	cmp.w	lr, #16
 8000ada:	d3f6      	bcc.n	8000aca <cmox_cipherMode_setKey+0x2ce>
 8000adc:	e9db 4700 	ldrd	r4, r7, [fp]
 8000ae0:	f10d 0e24 	add.w	lr, sp, #36	@ 0x24
 8000ae4:	2800      	cmp	r0, #0
 8000ae6:	e9ce 4700 	strd	r4, r7, [lr]
 8000aea:	bf0c      	ite	eq
 8000aec:	2700      	moveq	r7, #0
 8000aee:	2704      	movne	r7, #4
 8000af0:	463c      	mov	r4, r7
 8000af2:	59f7      	ldr	r7, [r6, r7]
 8000af4:	f85e 4004 	ldr.w	r4, [lr, r4]
 8000af8:	19e4      	adds	r4, r4, r7
 8000afa:	6025      	str	r5, [r4, #0]
 8000afc:	2501      	movs	r5, #1
 8000afe:	6827      	ldr	r7, [r4, #0]
 8000b00:	60a5      	str	r5, [r4, #8]
 8000b02:	ea88 0707 	eor.w	r7, r8, r7
 8000b06:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8000b08:	7c4c      	ldrb	r4, [r1, #17]
 8000b0a:	406f      	eors	r7, r5
 8000b0c:	f8de 5004 	ldr.w	r5, [lr, #4]
 8000b10:	ea85 0509 	eor.w	r5, r5, r9
 8000b14:	f087 0704 	eor.w	r7, r7, #4
 8000b18:	f085 05fc 	eor.w	r5, r5, #252	@ 0xfc
 8000b1c:	442f      	add	r7, r5
 8000b1e:	f087 0785 	eor.w	r7, r7, #133	@ 0x85
 8000b22:	193f      	adds	r7, r7, r4
 8000b24:	f88c 7011 	strb.w	r7, [ip, #17]
 8000b28:	ad09      	add	r5, sp, #36	@ 0x24
 8000b2a:	e9db 4700 	ldrd	r4, r7, [fp]
 8000b2e:	e9c5 4700 	strd	r4, r7, [r5]
 8000b32:	2800      	cmp	r0, #0
 8000b34:	bf0e      	itee	eq
 8000b36:	f04f 0b00 	moveq.w	fp, #0
 8000b3a:	2004      	movne	r0, #4
 8000b3c:	4683      	movne	fp, r0
 8000b3e:	5836      	ldr	r6, [r6, r0]
 8000b40:	f855 000b 	ldr.w	r0, [r5, fp]
 8000b44:	1986      	adds	r6, r0, r6
 8000b46:	6033      	str	r3, [r6, #0]
 8000b48:	2301      	movs	r3, #1
 8000b4a:	6830      	ldr	r0, [r6, #0]
 8000b4c:	60b3      	str	r3, [r6, #8]
 8000b4e:	ea88 0000 	eor.w	r0, r8, r0
 8000b52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8000b54:	7c0e      	ldrb	r6, [r1, #16]
 8000b56:	4058      	eors	r0, r3
 8000b58:	f080 0804 	eor.w	r8, r0, #4
 8000b5c:	6868      	ldr	r0, [r5, #4]
 8000b5e:	ea80 0009 	eor.w	r0, r0, r9
 8000b62:	f080 00fc 	eor.w	r0, r0, #252	@ 0xfc
 8000b66:	4440      	add	r0, r8
 8000b68:	f080 0852 	eor.w	r8, r0, #82	@ 0x52
 8000b6c:	44b0      	add	r8, r6
 8000b6e:	f88c 8010 	strb.w	r8, [ip, #16]
 8000b72:	2012      	movs	r0, #18
 8000b74:	5c0b      	ldrb	r3, [r1, r0]
 8000b76:	f80c 3000 	strb.w	r3, [ip, r0]
 8000b7a:	1c40      	adds	r0, r0, #1
 8000b7c:	281f      	cmp	r0, #31
 8000b7e:	d3f9      	bcc.n	8000b74 <cmox_cipherMode_setKey+0x378>
 8000b80:	e6dd      	b.n	800093e <cmox_cipherMode_setKey+0x142>
 8000b82:	4610      	mov	r0, r2
 8000b84:	e00d      	b.n	8000ba2 <cmox_cipherMode_setKey+0x3a6>
 8000b86:	682b      	ldr	r3, [r5, #0]
 8000b88:	685e      	ldr	r6, [r3, #4]
 8000b8a:	4652      	mov	r2, sl
 8000b8c:	a901      	add	r1, sp, #4
 8000b8e:	4628      	mov	r0, r5
 8000b90:	47b0      	blx	r6
 8000b92:	68a8      	ldr	r0, [r5, #8]
 8000b94:	f8c5 a004 	str.w	sl, [r5, #4]
 8000b98:	f040 0004 	orr.w	r0, r0, #4
 8000b9c:	60a8      	str	r0, [r5, #8]
 8000b9e:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8000ba2:	b00d      	add	sp, #52	@ 0x34
 8000ba4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000ba8:	00010003 	.word	0x00010003
 8000bac:	f78e2254 	.word	0xf78e2254
 8000bb0:	2e8f137d 	.word	0x2e8f137d
 8000bb4:	910e0ba4 	.word	0x910e0ba4
 8000bb8:	0800d87c 	.word	0x0800d87c
 8000bbc:	08000c24 	.word	0x08000c24
 8000bc0:	20000178 	.word	0x20000178

08000bc4 <cmox_cipherMode_setIV>:
 8000bc4:	b530      	push	{r4, r5, lr}
 8000bc6:	9c03      	ldr	r4, [sp, #12]
 8000bc8:	2c00      	cmp	r4, #0
 8000bca:	bf18      	it	ne
 8000bcc:	2a00      	cmpne	r2, #0
 8000bce:	d101      	bne.n	8000bd4 <cmox_cipherMode_setIV+0x10>
 8000bd0:	4809      	ldr	r0, [pc, #36]	@ (8000bf8 <cmox_cipherMode_setIV+0x34>)
 8000bd2:	bd30      	pop	{r4, r5, pc}
 8000bd4:	2400      	movs	r4, #0
 8000bd6:	e004      	b.n	8000be2 <cmox_cipherMode_setIV+0x1e>
 8000bd8:	5955      	ldr	r5, [r2, r5]
 8000bda:	ba2d      	rev	r5, r5
 8000bdc:	f841 5024 	str.w	r5, [r1, r4, lsl #2]
 8000be0:	1c64      	adds	r4, r4, #1
 8000be2:	00a5      	lsls	r5, r4, #2
 8000be4:	429d      	cmp	r5, r3
 8000be6:	d3f7      	bcc.n	8000bd8 <cmox_cipherMode_setIV+0x14>
 8000be8:	6841      	ldr	r1, [r0, #4]
 8000bea:	f041 0101 	orr.w	r1, r1, #1
 8000bee:	6041      	str	r1, [r0, #4]
 8000bf0:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8000bf4:	bd30      	pop	{r4, r5, pc}
 8000bf6:	bf00      	nop
 8000bf8:	00010003 	.word	0x00010003

08000bfc <cmox_cipher_setTagLen_empty>:
 8000bfc:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8000c00:	4770      	bx	lr

08000c02 <cmox_cipher_setPayloadLen_empty>:
 8000c02:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8000c06:	4770      	bx	lr

08000c08 <cmox_cipher_setADLen_empty>:
 8000c08:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8000c0c:	4770      	bx	lr

08000c0e <cmox_cipher_appendAD_empty>:
 8000c0e:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8000c12:	4770      	bx	lr

08000c14 <cmox_cipher_generateTag_empty>:
 8000c14:	4800      	ldr	r0, [pc, #0]	@ (8000c18 <cmox_cipher_generateTag_empty+0x4>)
 8000c16:	4770      	bx	lr
 8000c18:	00010002 	.word	0x00010002

08000c1c <cmox_cipher_verifyTag_empty>:
 8000c1c:	4800      	ldr	r0, [pc, #0]	@ (8000c20 <cmox_cipher_verifyTag_empty+0x4>)
 8000c1e:	4770      	bx	lr
 8000c20:	00010002 	.word	0x00010002
 8000c24:	0101b004 	.word	0x0101b004
 8000c28:	45011700 	.word	0x45011700

08000c2c <convert_block_2_words>:
 8000c2c:	b530      	push	{r4, r5, lr}
 8000c2e:	2200      	movs	r2, #0
 8000c30:	eb00 0382 	add.w	r3, r0, r2, lsl #2
 8000c34:	785d      	ldrb	r5, [r3, #1]
 8000c36:	781c      	ldrb	r4, [r3, #0]
 8000c38:	042d      	lsls	r5, r5, #16
 8000c3a:	ea45 6504 	orr.w	r5, r5, r4, lsl #24
 8000c3e:	789c      	ldrb	r4, [r3, #2]
 8000c40:	78db      	ldrb	r3, [r3, #3]
 8000c42:	ea45 2504 	orr.w	r5, r5, r4, lsl #8
 8000c46:	431d      	orrs	r5, r3
 8000c48:	f841 5022 	str.w	r5, [r1, r2, lsl #2]
 8000c4c:	1c52      	adds	r2, r2, #1
 8000c4e:	2a04      	cmp	r2, #4
 8000c50:	d3ee      	bcc.n	8000c30 <convert_block_2_words+0x4>
 8000c52:	bd30      	pop	{r4, r5, pc}

08000c54 <convert_block_2_bytes>:
 8000c54:	b530      	push	{r4, r5, lr}
 8000c56:	2200      	movs	r2, #0
 8000c58:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 8000c5c:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
 8000c60:	70dc      	strb	r4, [r3, #3]
 8000c62:	f850 5022 	ldr.w	r5, [r0, r2, lsl #2]
 8000c66:	0a2d      	lsrs	r5, r5, #8
 8000c68:	709d      	strb	r5, [r3, #2]
 8000c6a:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
 8000c6e:	0c24      	lsrs	r4, r4, #16
 8000c70:	705c      	strb	r4, [r3, #1]
 8000c72:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
 8000c76:	1c52      	adds	r2, r2, #1
 8000c78:	0e24      	lsrs	r4, r4, #24
 8000c7a:	2a04      	cmp	r2, #4
 8000c7c:	701c      	strb	r4, [r3, #0]
 8000c7e:	d3eb      	bcc.n	8000c58 <convert_block_2_bytes+0x4>
 8000c80:	bd30      	pop	{r4, r5, pc}

08000c82 <xor_blocks>:
 8000c82:	b510      	push	{r4, lr}
 8000c84:	2200      	movs	r2, #0
 8000c86:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
 8000c8a:	f851 4022 	ldr.w	r4, [r1, r2, lsl #2]
 8000c8e:	4063      	eors	r3, r4
 8000c90:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8000c94:	1c52      	adds	r2, r2, #1
 8000c96:	2a04      	cmp	r2, #4
 8000c98:	d3f5      	bcc.n	8000c86 <xor_blocks+0x4>
 8000c9a:	bd10      	pop	{r4, pc}

08000c9c <copy_block>:
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
 8000ca2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8000ca6:	1c52      	adds	r2, r2, #1
 8000ca8:	2a04      	cmp	r2, #4
 8000caa:	d3f8      	bcc.n	8000c9e <copy_block+0x2>
 8000cac:	4770      	bx	lr
	...

08000cb0 <cmox_hash_compute>:
 8000cb0:	b538      	push	{r3, r4, r5, lr}
 8000cb2:	460c      	mov	r4, r1
 8000cb4:	4611      	mov	r1, r2
 8000cb6:	2800      	cmp	r0, #0
 8000cb8:	461a      	mov	r2, r3
 8000cba:	bf1c      	itt	ne
 8000cbc:	6805      	ldrne	r5, [r0, #0]
 8000cbe:	2d00      	cmpne	r5, #0
 8000cc0:	4b07      	ldr	r3, [pc, #28]	@ (8000ce0 <cmox_hash_compute+0x30>)
 8000cc2:	d00a      	beq.n	8000cda <cmox_hash_compute+0x2a>
 8000cc4:	b14a      	cbz	r2, 8000cda <cmox_hash_compute+0x2a>
 8000cc6:	b904      	cbnz	r4, 8000cca <cmox_hash_compute+0x1a>
 8000cc8:	b939      	cbnz	r1, 8000cda <cmox_hash_compute+0x2a>
 8000cca:	9804      	ldr	r0, [sp, #16]
 8000ccc:	b128      	cbz	r0, 8000cda <cmox_hash_compute+0x2a>
 8000cce:	9b05      	ldr	r3, [sp, #20]
 8000cd0:	9300      	str	r3, [sp, #0]
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	47a8      	blx	r5
 8000cd8:	4603      	mov	r3, r0
 8000cda:	4618      	mov	r0, r3
 8000cdc:	bd32      	pop	{r1, r4, r5, pc}
 8000cde:	bf00      	nop
 8000ce0:	00020003 	.word	0x00020003

08000ce4 <cmox_hash_common_compute>:
 8000ce4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000ce8:	4604      	mov	r4, r0
 8000cea:	460e      	mov	r6, r1
 8000cec:	6821      	ldr	r1, [r4, #0]
 8000cee:	4617      	mov	r7, r2
 8000cf0:	684a      	ldr	r2, [r1, #4]
 8000cf2:	461d      	mov	r5, r3
 8000cf4:	4790      	blx	r2
 8000cf6:	4680      	mov	r8, r0
 8000cf8:	f5b8 3f00 	cmp.w	r8, #131072	@ 0x20000
 8000cfc:	d119      	bne.n	8000d32 <cmox_hash_common_compute+0x4e>
 8000cfe:	6822      	ldr	r2, [r4, #0]
 8000d00:	9906      	ldr	r1, [sp, #24]
 8000d02:	6893      	ldr	r3, [r2, #8]
 8000d04:	4620      	mov	r0, r4
 8000d06:	4798      	blx	r3
 8000d08:	4680      	mov	r8, r0
 8000d0a:	f5b8 3f00 	cmp.w	r8, #131072	@ 0x20000
 8000d0e:	d110      	bne.n	8000d32 <cmox_hash_common_compute+0x4e>
 8000d10:	6823      	ldr	r3, [r4, #0]
 8000d12:	4631      	mov	r1, r6
 8000d14:	68de      	ldr	r6, [r3, #12]
 8000d16:	463a      	mov	r2, r7
 8000d18:	4620      	mov	r0, r4
 8000d1a:	47b0      	blx	r6
 8000d1c:	4680      	mov	r8, r0
 8000d1e:	f5b8 3f00 	cmp.w	r8, #131072	@ 0x20000
 8000d22:	d106      	bne.n	8000d32 <cmox_hash_common_compute+0x4e>
 8000d24:	6823      	ldr	r3, [r4, #0]
 8000d26:	9a07      	ldr	r2, [sp, #28]
 8000d28:	4629      	mov	r1, r5
 8000d2a:	691d      	ldr	r5, [r3, #16]
 8000d2c:	4620      	mov	r0, r4
 8000d2e:	47a8      	blx	r5
 8000d30:	4680      	mov	r8, r0
 8000d32:	6821      	ldr	r1, [r4, #0]
 8000d34:	680a      	ldr	r2, [r1, #0]
 8000d36:	4620      	mov	r0, r4
 8000d38:	4790      	blx	r2
 8000d3a:	4640      	mov	r0, r8
 8000d3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08000d40 <cmox_sha256_cleanup>:
 8000d40:	b500      	push	{lr}
 8000d42:	b081      	sub	sp, #4
 8000d44:	6801      	ldr	r1, [r0, #0]
 8000d46:	4a07      	ldr	r2, [pc, #28]	@ (8000d64 <cmox_sha256_cleanup+0x24>)
 8000d48:	4291      	cmp	r1, r2
 8000d4a:	d100      	bne.n	8000d4e <cmox_sha256_cleanup+0xe>
 8000d4c:	b910      	cbnz	r0, 8000d54 <cmox_sha256_cleanup+0x14>
 8000d4e:	4806      	ldr	r0, [pc, #24]	@ (8000d68 <cmox_sha256_cleanup+0x28>)
 8000d50:	b001      	add	sp, #4
 8000d52:	bd00      	pop	{pc}
 8000d54:	217c      	movs	r1, #124	@ 0x7c
 8000d56:	f00b fe26 	bl	800c9a6 <__aeabi_memclr>
 8000d5a:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8000d5e:	b001      	add	sp, #4
 8000d60:	bd00      	pop	{pc}
 8000d62:	bf00      	nop
 8000d64:	08000e4c 	.word	0x08000e4c
 8000d68:	00020003 	.word	0x00020003

08000d6c <cmox_sha256_init>:
 8000d6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000d70:	4a0b      	ldr	r2, [pc, #44]	@ (8000da0 <cmox_sha256_init+0x34>)
 8000d72:	e892 51f8 	ldmia.w	r2, {r3, r4, r5, r6, r7, r8, ip, lr}
 8000d76:	b088      	sub	sp, #32
 8000d78:	4669      	mov	r1, sp
 8000d7a:	e881 51f8 	stmia.w	r1, {r3, r4, r5, r6, r7, r8, ip, lr}
 8000d7e:	6802      	ldr	r2, [r0, #0]
 8000d80:	4b08      	ldr	r3, [pc, #32]	@ (8000da4 <cmox_sha256_init+0x38>)
 8000d82:	429a      	cmp	r2, r3
 8000d84:	d100      	bne.n	8000d88 <cmox_sha256_init+0x1c>
 8000d86:	b918      	cbnz	r0, 8000d90 <cmox_sha256_init+0x24>
 8000d88:	4807      	ldr	r0, [pc, #28]	@ (8000da8 <cmox_sha256_init+0x3c>)
 8000d8a:	b008      	add	sp, #32
 8000d8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000d90:	2220      	movs	r2, #32
 8000d92:	3008      	adds	r0, #8
 8000d94:	f000 fd23 	bl	80017de <cmox_md_init>
 8000d98:	b008      	add	sp, #32
 8000d9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000d9e:	bf00      	nop
 8000da0:	08000e2c 	.word	0x08000e2c
 8000da4:	08000e4c 	.word	0x08000e4c
 8000da8:	00020003 	.word	0x00020003

08000dac <cmox_sha256_setTagLen>:
 8000dac:	2921      	cmp	r1, #33	@ 0x21
 8000dae:	d204      	bcs.n	8000dba <cmox_sha256_setTagLen+0xe>
 8000db0:	6802      	ldr	r2, [r0, #0]
 8000db2:	4b04      	ldr	r3, [pc, #16]	@ (8000dc4 <cmox_sha256_setTagLen+0x18>)
 8000db4:	429a      	cmp	r2, r3
 8000db6:	d100      	bne.n	8000dba <cmox_sha256_setTagLen+0xe>
 8000db8:	b908      	cbnz	r0, 8000dbe <cmox_sha256_setTagLen+0x12>
 8000dba:	4803      	ldr	r0, [pc, #12]	@ (8000dc8 <cmox_sha256_setTagLen+0x1c>)
 8000dbc:	4770      	bx	lr
 8000dbe:	3008      	adds	r0, #8
 8000dc0:	f000 bd1c 	b.w	80017fc <cmox_md_setTagSize>
 8000dc4:	08000e4c 	.word	0x08000e4c
 8000dc8:	00020003 	.word	0x00020003

08000dcc <cmox_sha256_append>:
 8000dcc:	b410      	push	{r4}
 8000dce:	b081      	sub	sp, #4
 8000dd0:	4613      	mov	r3, r2
 8000dd2:	6802      	ldr	r2, [r0, #0]
 8000dd4:	4c07      	ldr	r4, [pc, #28]	@ (8000df4 <cmox_sha256_append+0x28>)
 8000dd6:	42a2      	cmp	r2, r4
 8000dd8:	d100      	bne.n	8000ddc <cmox_sha256_append+0x10>
 8000dda:	b918      	cbnz	r0, 8000de4 <cmox_sha256_append+0x18>
 8000ddc:	b001      	add	sp, #4
 8000dde:	bc10      	pop	{r4}
 8000de0:	4805      	ldr	r0, [pc, #20]	@ (8000df8 <cmox_sha256_append+0x2c>)
 8000de2:	4770      	bx	lr
 8000de4:	b001      	add	sp, #4
 8000de6:	f100 0224 	add.w	r2, r0, #36	@ 0x24
 8000dea:	bc10      	pop	{r4}
 8000dec:	3008      	adds	r0, #8
 8000dee:	f000 bd09 	b.w	8001804 <cmox_md_append>
 8000df2:	bf00      	nop
 8000df4:	08000e4c 	.word	0x08000e4c
 8000df8:	00020003 	.word	0x00020003

08000dfc <cmox_sha256_generateTag>:
 8000dfc:	b410      	push	{r4}
 8000dfe:	b081      	sub	sp, #4
 8000e00:	4613      	mov	r3, r2
 8000e02:	6802      	ldr	r2, [r0, #0]
 8000e04:	4c07      	ldr	r4, [pc, #28]	@ (8000e24 <cmox_sha256_generateTag+0x28>)
 8000e06:	42a2      	cmp	r2, r4
 8000e08:	d100      	bne.n	8000e0c <cmox_sha256_generateTag+0x10>
 8000e0a:	b918      	cbnz	r0, 8000e14 <cmox_sha256_generateTag+0x18>
 8000e0c:	b001      	add	sp, #4
 8000e0e:	bc10      	pop	{r4}
 8000e10:	4805      	ldr	r0, [pc, #20]	@ (8000e28 <cmox_sha256_generateTag+0x2c>)
 8000e12:	4770      	bx	lr
 8000e14:	460a      	mov	r2, r1
 8000e16:	b001      	add	sp, #4
 8000e18:	f100 0124 	add.w	r1, r0, #36	@ 0x24
 8000e1c:	bc10      	pop	{r4}
 8000e1e:	3008      	adds	r0, #8
 8000e20:	f000 bd44 	b.w	80018ac <cmox_md_generateTag>
 8000e24:	08000e4c 	.word	0x08000e4c
 8000e28:	00020003 	.word	0x00020003
 8000e2c:	6a09e667 	.word	0x6a09e667
 8000e30:	bb67ae85 	.word	0xbb67ae85
 8000e34:	3c6ef372 	.word	0x3c6ef372
 8000e38:	a54ff53a 	.word	0xa54ff53a
 8000e3c:	510e527f 	.word	0x510e527f
 8000e40:	9b05688c 	.word	0x9b05688c
 8000e44:	1f83d9ab 	.word	0x1f83d9ab
 8000e48:	5be0cd19 	.word	0x5be0cd19

08000e4c <CMOX_SHA256_VTABLE>:
 8000e4c:	08000d41 08000d6d 08000dad 08000dcd     A...m...........
 8000e5c:	08000dfd                                ....

08000e60 <cmox_sha256_compute>:
 8000e60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e62:	b0a3      	sub	sp, #140	@ 0x8c
 8000e64:	4604      	mov	r4, r0
 8000e66:	480b      	ldr	r0, [pc, #44]	@ (8000e94 <cmox_sha256_compute+0x34>)
 8000e68:	9002      	str	r0, [sp, #8]
 8000e6a:	460d      	mov	r5, r1
 8000e6c:	4616      	mov	r6, r2
 8000e6e:	461f      	mov	r7, r3
 8000e70:	4b09      	ldr	r3, [pc, #36]	@ (8000e98 <cmox_sha256_compute+0x38>)
 8000e72:	2208      	movs	r2, #8
 8000e74:	2140      	movs	r1, #64	@ 0x40
 8000e76:	a804      	add	r0, sp, #16
 8000e78:	f000 fcad 	bl	80017d6 <cmox_md_construct>
 8000e7c:	9828      	ldr	r0, [sp, #160]	@ 0xa0
 8000e7e:	9001      	str	r0, [sp, #4]
 8000e80:	9700      	str	r7, [sp, #0]
 8000e82:	4633      	mov	r3, r6
 8000e84:	462a      	mov	r2, r5
 8000e86:	4621      	mov	r1, r4
 8000e88:	a802      	add	r0, sp, #8
 8000e8a:	f7ff ff2b 	bl	8000ce4 <cmox_hash_common_compute>
 8000e8e:	b023      	add	sp, #140	@ 0x8c
 8000e90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e92:	bf00      	nop
 8000e94:	08000e4c 	.word	0x08000e4c
 8000e98:	0800d98c 	.word	0x0800d98c

08000e9c <cmox_sha256_transform>:
 8000e9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000ea0:	b0c1      	sub	sp, #260	@ 0x104
 8000ea2:	680b      	ldr	r3, [r1, #0]
 8000ea4:	ba1b      	rev	r3, r3
 8000ea6:	9301      	str	r3, [sp, #4]
 8000ea8:	4602      	mov	r2, r0
 8000eaa:	684b      	ldr	r3, [r1, #4]
 8000eac:	a801      	add	r0, sp, #4
 8000eae:	ba1b      	rev	r3, r3
 8000eb0:	6043      	str	r3, [r0, #4]
 8000eb2:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 8000eb6:	688b      	ldr	r3, [r1, #8]
 8000eb8:	ba1b      	rev	r3, r3
 8000eba:	6083      	str	r3, [r0, #8]
 8000ebc:	68cb      	ldr	r3, [r1, #12]
 8000ebe:	ba1b      	rev	r3, r3
 8000ec0:	60c3      	str	r3, [r0, #12]
 8000ec2:	690b      	ldr	r3, [r1, #16]
 8000ec4:	ba1b      	rev	r3, r3
 8000ec6:	6103      	str	r3, [r0, #16]
 8000ec8:	694b      	ldr	r3, [r1, #20]
 8000eca:	ba1b      	rev	r3, r3
 8000ecc:	6143      	str	r3, [r0, #20]
 8000ece:	698b      	ldr	r3, [r1, #24]
 8000ed0:	ba1b      	rev	r3, r3
 8000ed2:	6183      	str	r3, [r0, #24]
 8000ed4:	69cb      	ldr	r3, [r1, #28]
 8000ed6:	ba1b      	rev	r3, r3
 8000ed8:	61c3      	str	r3, [r0, #28]
 8000eda:	6a0b      	ldr	r3, [r1, #32]
 8000edc:	ba1b      	rev	r3, r3
 8000ede:	6203      	str	r3, [r0, #32]
 8000ee0:	6a4b      	ldr	r3, [r1, #36]	@ 0x24
 8000ee2:	ba1b      	rev	r3, r3
 8000ee4:	6243      	str	r3, [r0, #36]	@ 0x24
 8000ee6:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 8000ee8:	ba1b      	rev	r3, r3
 8000eea:	6283      	str	r3, [r0, #40]	@ 0x28
 8000eec:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
 8000eee:	ba1b      	rev	r3, r3
 8000ef0:	62c3      	str	r3, [r0, #44]	@ 0x2c
 8000ef2:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
 8000ef4:	ba1b      	rev	r3, r3
 8000ef6:	6303      	str	r3, [r0, #48]	@ 0x30
 8000ef8:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 8000efa:	ba1b      	rev	r3, r3
 8000efc:	6343      	str	r3, [r0, #52]	@ 0x34
 8000efe:	6b8b      	ldr	r3, [r1, #56]	@ 0x38
 8000f00:	ba1b      	rev	r3, r3
 8000f02:	6383      	str	r3, [r0, #56]	@ 0x38
 8000f04:	6bc9      	ldr	r1, [r1, #60]	@ 0x3c
 8000f06:	ba09      	rev	r1, r1
 8000f08:	63c1      	str	r1, [r0, #60]	@ 0x3c
 8000f0a:	2018      	movs	r0, #24
 8000f0c:	f85c 4c08 	ldr.w	r4, [ip, #-8]
 8000f10:	ea4f 41f4 	mov.w	r1, r4, ror #19
 8000f14:	ea91 4374 	eors.w	r3, r1, r4, ror #17
 8000f18:	f85c 1c3c 	ldr.w	r1, [ip, #-60]
 8000f1c:	ea83 2394 	eor.w	r3, r3, r4, lsr #10
 8000f20:	ea4f 47b1 	mov.w	r7, r1, ror #18
 8000f24:	f85c 4c1c 	ldr.w	r4, [ip, #-28]
 8000f28:	ea97 16f1 	eors.w	r6, r7, r1, ror #7
 8000f2c:	4423      	add	r3, r4
 8000f2e:	ea86 06d1 	eor.w	r6, r6, r1, lsr #3
 8000f32:	18f3      	adds	r3, r6, r3
 8000f34:	f85c 6c40 	ldr.w	r6, [ip, #-64]
 8000f38:	18f3      	adds	r3, r6, r3
 8000f3a:	f8cc 3000 	str.w	r3, [ip]
 8000f3e:	f85c 4c04 	ldr.w	r4, [ip, #-4]
 8000f42:	ea4f 46f4 	mov.w	r6, r4, ror #19
 8000f46:	ea96 4374 	eors.w	r3, r6, r4, ror #17
 8000f4a:	f85c 6c38 	ldr.w	r6, [ip, #-56]
 8000f4e:	ea83 2394 	eor.w	r3, r3, r4, lsr #10
 8000f52:	ea4f 4ab6 	mov.w	sl, r6, ror #18
 8000f56:	f85c 4c18 	ldr.w	r4, [ip, #-24]
 8000f5a:	ea8a 17f6 	eor.w	r7, sl, r6, ror #7
 8000f5e:	4423      	add	r3, r4
 8000f60:	ea87 07d6 	eor.w	r7, r7, r6, lsr #3
 8000f64:	18fb      	adds	r3, r7, r3
 8000f66:	18c9      	adds	r1, r1, r3
 8000f68:	f8cc 1004 	str.w	r1, [ip, #4]
 8000f6c:	1e40      	subs	r0, r0, #1
 8000f6e:	f10c 0c08 	add.w	ip, ip, #8
 8000f72:	d1cb      	bne.n	8000f0c <cmox_sha256_transform+0x70>
 8000f74:	4610      	mov	r0, r2
 8000f76:	9200      	str	r2, [sp, #0]
 8000f78:	6dc1      	ldr	r1, [r0, #92]	@ 0x5c
 8000f7a:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 8000f7c:	f8d0 e060 	ldr.w	lr, [r0, #96]	@ 0x60
 8000f80:	f8d0 8070 	ldr.w	r8, [r0, #112]	@ 0x70
 8000f84:	6e42      	ldr	r2, [r0, #100]	@ 0x64
 8000f86:	6f44      	ldr	r4, [r0, #116]	@ 0x74
 8000f88:	f8d0 a068 	ldr.w	sl, [r0, #104]	@ 0x68
 8000f8c:	6f85      	ldr	r5, [r0, #120]	@ 0x78
 8000f8e:	f8df 90f4 	ldr.w	r9, [pc, #244]	@ 8001084 <cmox_sha256_transform+0x1e8>
 8000f92:	f10d 0c04 	add.w	ip, sp, #4
 8000f96:	2020      	movs	r0, #32
 8000f98:	ea4f 16b3 	mov.w	r6, r3, ror #6
 8000f9c:	ea86 26f3 	eor.w	r6, r6, r3, ror #11
 8000fa0:	ea86 6673 	eor.w	r6, r6, r3, ror #25
 8000fa4:	1975      	adds	r5, r6, r5
 8000fa6:	ea84 0608 	eor.w	r6, r4, r8
 8000faa:	401e      	ands	r6, r3
 8000fac:	4066      	eors	r6, r4
 8000fae:	1975      	adds	r5, r6, r5
 8000fb0:	f859 6b04 	ldr.w	r6, [r9], #4
 8000fb4:	f85c 7b04 	ldr.w	r7, [ip], #4
 8000fb8:	1975      	adds	r5, r6, r5
 8000fba:	197e      	adds	r6, r7, r5
 8000fbc:	ea4f 07b1 	mov.w	r7, r1, ror #2
 8000fc0:	ea4e 0b01 	orr.w	fp, lr, r1
 8000fc4:	ea87 3771 	eor.w	r7, r7, r1, ror #13
 8000fc8:	ea0e 0501 	and.w	r5, lr, r1
 8000fcc:	ea0b 0b02 	and.w	fp, fp, r2
 8000fd0:	ea87 57b1 	eor.w	r7, r7, r1, ror #22
 8000fd4:	ea4b 0505 	orr.w	r5, fp, r5
 8000fd8:	19ef      	adds	r7, r5, r7
 8000fda:	4645      	mov	r5, r8
 8000fdc:	eb06 080a 	add.w	r8, r6, sl
 8000fe0:	4692      	mov	sl, r2
 8000fe2:	4672      	mov	r2, lr
 8000fe4:	eb07 0e06 	add.w	lr, r7, r6
 8000fe8:	ea4f 16b8 	mov.w	r6, r8, ror #6
 8000fec:	ea86 26f8 	eor.w	r6, r6, r8, ror #11
 8000ff0:	ea86 6678 	eor.w	r6, r6, r8, ror #25
 8000ff4:	1934      	adds	r4, r6, r4
 8000ff6:	ea85 0603 	eor.w	r6, r5, r3
 8000ffa:	ea06 0608 	and.w	r6, r6, r8
 8000ffe:	406e      	eors	r6, r5
 8001000:	1934      	adds	r4, r6, r4
 8001002:	f859 6b04 	ldr.w	r6, [r9], #4
 8001006:	f85c 7b04 	ldr.w	r7, [ip], #4
 800100a:	1934      	adds	r4, r6, r4
 800100c:	193e      	adds	r6, r7, r4
 800100e:	ea4f 07be 	mov.w	r7, lr, ror #2
 8001012:	ea41 0b0e 	orr.w	fp, r1, lr
 8001016:	ea87 377e 	eor.w	r7, r7, lr, ror #13
 800101a:	ea01 040e 	and.w	r4, r1, lr
 800101e:	ea0b 0b02 	and.w	fp, fp, r2
 8001022:	ea87 57be 	eor.w	r7, r7, lr, ror #22
 8001026:	ea4b 0404 	orr.w	r4, fp, r4
 800102a:	19e7      	adds	r7, r4, r7
 800102c:	461c      	mov	r4, r3
 800102e:	eb06 030a 	add.w	r3, r6, sl
 8001032:	4692      	mov	sl, r2
 8001034:	460a      	mov	r2, r1
 8001036:	19b9      	adds	r1, r7, r6
 8001038:	1e40      	subs	r0, r0, #1
 800103a:	d1ad      	bne.n	8000f98 <cmox_sha256_transform+0xfc>
 800103c:	9800      	ldr	r0, [sp, #0]
 800103e:	6dc6      	ldr	r6, [r0, #92]	@ 0x5c
 8001040:	4431      	add	r1, r6
 8001042:	65c1      	str	r1, [r0, #92]	@ 0x5c
 8001044:	9900      	ldr	r1, [sp, #0]
 8001046:	6e08      	ldr	r0, [r1, #96]	@ 0x60
 8001048:	4470      	add	r0, lr
 800104a:	6608      	str	r0, [r1, #96]	@ 0x60
 800104c:	9800      	ldr	r0, [sp, #0]
 800104e:	6e41      	ldr	r1, [r0, #100]	@ 0x64
 8001050:	1852      	adds	r2, r2, r1
 8001052:	6642      	str	r2, [r0, #100]	@ 0x64
 8001054:	9900      	ldr	r1, [sp, #0]
 8001056:	6e88      	ldr	r0, [r1, #104]	@ 0x68
 8001058:	4450      	add	r0, sl
 800105a:	6688      	str	r0, [r1, #104]	@ 0x68
 800105c:	9800      	ldr	r0, [sp, #0]
 800105e:	6ec1      	ldr	r1, [r0, #108]	@ 0x6c
 8001060:	185b      	adds	r3, r3, r1
 8001062:	66c3      	str	r3, [r0, #108]	@ 0x6c
 8001064:	9900      	ldr	r1, [sp, #0]
 8001066:	6f08      	ldr	r0, [r1, #112]	@ 0x70
 8001068:	4440      	add	r0, r8
 800106a:	6708      	str	r0, [r1, #112]	@ 0x70
 800106c:	9800      	ldr	r0, [sp, #0]
 800106e:	6f41      	ldr	r1, [r0, #116]	@ 0x74
 8001070:	1864      	adds	r4, r4, r1
 8001072:	6744      	str	r4, [r0, #116]	@ 0x74
 8001074:	9900      	ldr	r1, [sp, #0]
 8001076:	6f88      	ldr	r0, [r1, #120]	@ 0x78
 8001078:	182d      	adds	r5, r5, r0
 800107a:	678d      	str	r5, [r1, #120]	@ 0x78
 800107c:	b041      	add	sp, #260	@ 0x104
 800107e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001082:	bf00      	nop
 8001084:	0800d88c 	.word	0x0800d88c

08001088 <cmox_aesFast_decrypt>:
 8001088:	e92d 4ff4 	stmdb	sp!, {r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800108c:	f100 050c 	add.w	r5, r0, #12
 8001090:	b08c      	sub	sp, #48	@ 0x30
 8001092:	680e      	ldr	r6, [r1, #0]
 8001094:	684c      	ldr	r4, [r1, #4]
 8001096:	6842      	ldr	r2, [r0, #4]
 8001098:	68cf      	ldr	r7, [r1, #12]
 800109a:	08d3      	lsrs	r3, r2, #3
 800109c:	08d2      	lsrs	r2, r2, #3
 800109e:	00d2      	lsls	r2, r2, #3
 80010a0:	f102 0818 	add.w	r8, r2, #24
 80010a4:	eb05 0588 	add.w	r5, r5, r8, lsl #2
 80010a8:	1cdb      	adds	r3, r3, #3
 80010aa:	682a      	ldr	r2, [r5, #0]
 80010ac:	4056      	eors	r6, r2
 80010ae:	686a      	ldr	r2, [r5, #4]
 80010b0:	ea82 0e04 	eor.w	lr, r2, r4
 80010b4:	688c      	ldr	r4, [r1, #8]
 80010b6:	68aa      	ldr	r2, [r5, #8]
 80010b8:	68e9      	ldr	r1, [r5, #12]
 80010ba:	9300      	str	r3, [sp, #0]
 80010bc:	eb00 0088 	add.w	r0, r0, r8, lsl #2
 80010c0:	4054      	eors	r4, r2
 80010c2:	404f      	eors	r7, r1
 80010c4:	f1a0 0514 	sub.w	r5, r0, #20
 80010c8:	f8df 8290 	ldr.w	r8, [pc, #656]	@ 800135c <cmox_aesFast_decrypt+0x2d4>
 80010cc:	e056      	b.n	800117c <cmox_aesFast_decrypt+0xf4>
 80010ce:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 80010d0:	f858 7020 	ldr.w	r7, [r8, r0, lsl #2]
 80010d4:	f8dd b028 	ldr.w	fp, [sp, #40]	@ 0x28
 80010d8:	f858 6026 	ldr.w	r6, [r8, r6, lsl #2]
 80010dc:	f858 1021 	ldr.w	r1, [r8, r1, lsl #2]
 80010e0:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 80010e4:	ea4f 2037 	mov.w	r0, r7, ror #8
 80010e8:	f858 702b 	ldr.w	r7, [r8, fp, lsl #2]
 80010ec:	4070      	eors	r0, r6
 80010ee:	ea90 4037 	eors.w	r0, r0, r7, ror #16
 80010f2:	ea90 6031 	eors.w	r0, r0, r1, ror #24
 80010f6:	ea82 0600 	eor.w	r6, r2, r0
 80010fa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80010fc:	f858 1020 	ldr.w	r1, [r8, r0, lsl #2]
 8001100:	f858 202e 	ldr.w	r2, [r8, lr, lsl #2]
 8001104:	ea4f 2031 	mov.w	r0, r1, ror #8
 8001108:	ea4f 4132 	mov.w	r1, r2, ror #16
 800110c:	ea4f 6233 	mov.w	r2, r3, ror #24
 8001110:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8001114:	4058      	eors	r0, r3
 8001116:	4048      	eors	r0, r1
 8001118:	ea82 0100 	eor.w	r1, r2, r0
 800111c:	6868      	ldr	r0, [r5, #4]
 800111e:	9b05      	ldr	r3, [sp, #20]
 8001120:	ea80 0e01 	eor.w	lr, r0, r1
 8001124:	9908      	ldr	r1, [sp, #32]
 8001126:	f858 0021 	ldr.w	r0, [r8, r1, lsl #2]
 800112a:	9907      	ldr	r1, [sp, #28]
 800112c:	ea4f 2430 	mov.w	r4, r0, ror #8
 8001130:	f858 0021 	ldr.w	r0, [r8, r1, lsl #2]
 8001134:	9906      	ldr	r1, [sp, #24]
 8001136:	f858 2021 	ldr.w	r2, [r8, r1, lsl #2]
 800113a:	ea4f 6132 	mov.w	r1, r2, ror #24
 800113e:	f858 2023 	ldr.w	r2, [r8, r3, lsl #2]
 8001142:	9b01      	ldr	r3, [sp, #4]
 8001144:	4054      	eors	r4, r2
 8001146:	ea94 4430 	eors.w	r4, r4, r0, ror #16
 800114a:	68a8      	ldr	r0, [r5, #8]
 800114c:	404c      	eors	r4, r1
 800114e:	9904      	ldr	r1, [sp, #16]
 8001150:	4044      	eors	r4, r0
 8001152:	f858 0021 	ldr.w	r0, [r8, r1, lsl #2]
 8001156:	9903      	ldr	r1, [sp, #12]
 8001158:	ea4f 2730 	mov.w	r7, r0, ror #8
 800115c:	f858 0021 	ldr.w	r0, [r8, r1, lsl #2]
 8001160:	9902      	ldr	r1, [sp, #8]
 8001162:	f858 2021 	ldr.w	r2, [r8, r1, lsl #2]
 8001166:	ea4f 6132 	mov.w	r1, r2, ror #24
 800116a:	f858 2023 	ldr.w	r2, [r8, r3, lsl #2]
 800116e:	4057      	eors	r7, r2
 8001170:	ea97 4730 	eors.w	r7, r7, r0, ror #16
 8001174:	68e8      	ldr	r0, [r5, #12]
 8001176:	404f      	eors	r7, r1
 8001178:	4047      	eors	r7, r0
 800117a:	3d20      	subs	r5, #32
 800117c:	0238      	lsls	r0, r7, #8
 800117e:	0e00      	lsrs	r0, r0, #24
 8001180:	f858 1020 	ldr.w	r1, [r8, r0, lsl #2]
 8001184:	0420      	lsls	r0, r4, #16
 8001186:	ea4f 2231 	mov.w	r2, r1, ror #8
 800118a:	0e00      	lsrs	r0, r0, #24
 800118c:	f858 1020 	ldr.w	r1, [r8, r0, lsl #2]
 8001190:	ea4f 4031 	mov.w	r0, r1, ror #16
 8001194:	fa5f f38e 	uxtb.w	r3, lr
 8001198:	f858 1023 	ldr.w	r1, [r8, r3, lsl #2]
 800119c:	0e33      	lsrs	r3, r6, #24
 800119e:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 80011a2:	405a      	eors	r2, r3
 80011a4:	4042      	eors	r2, r0
 80011a6:	6928      	ldr	r0, [r5, #16]
 80011a8:	ea92 6231 	eors.w	r2, r2, r1, ror #24
 80011ac:	0231      	lsls	r1, r6, #8
 80011ae:	0e09      	lsrs	r1, r1, #24
 80011b0:	4042      	eors	r2, r0
 80011b2:	f858 3021 	ldr.w	r3, [r8, r1, lsl #2]
 80011b6:	0438      	lsls	r0, r7, #16
 80011b8:	ea4f 2133 	mov.w	r1, r3, ror #8
 80011bc:	0e00      	lsrs	r0, r0, #24
 80011be:	f858 3020 	ldr.w	r3, [r8, r0, lsl #2]
 80011c2:	ea4f 4033 	mov.w	r0, r3, ror #16
 80011c6:	b2e3      	uxtb	r3, r4
 80011c8:	f858 b023 	ldr.w	fp, [r8, r3, lsl #2]
 80011cc:	ea4f 633b 	mov.w	r3, fp, ror #24
 80011d0:	ea4f 6b1e 	mov.w	fp, lr, lsr #24
 80011d4:	f858 b02b 	ldr.w	fp, [r8, fp, lsl #2]
 80011d8:	ea81 010b 	eor.w	r1, r1, fp
 80011dc:	4041      	eors	r1, r0
 80011de:	6968      	ldr	r0, [r5, #20]
 80011e0:	4059      	eors	r1, r3
 80011e2:	ea4f 230e 	mov.w	r3, lr, lsl #8
 80011e6:	4041      	eors	r1, r0
 80011e8:	0e1b      	lsrs	r3, r3, #24
 80011ea:	f858 0023 	ldr.w	r0, [r8, r3, lsl #2]
 80011ee:	ea4f 2330 	mov.w	r3, r0, ror #8
 80011f2:	0430      	lsls	r0, r6, #16
 80011f4:	0e00      	lsrs	r0, r0, #24
 80011f6:	f858 b020 	ldr.w	fp, [r8, r0, lsl #2]
 80011fa:	ea4f 4b3b 	mov.w	fp, fp, ror #16
 80011fe:	f8cd b004 	str.w	fp, [sp, #4]
 8001202:	b2f8      	uxtb	r0, r7
 8001204:	f858 b020 	ldr.w	fp, [r8, r0, lsl #2]
 8001208:	ea4f 603b 	mov.w	r0, fp, ror #24
 800120c:	ea4f 6b14 	mov.w	fp, r4, lsr #24
 8001210:	f858 b02b 	ldr.w	fp, [r8, fp, lsl #2]
 8001214:	ea83 030b 	eor.w	r3, r3, fp
 8001218:	f8dd b004 	ldr.w	fp, [sp, #4]
 800121c:	ea8b 0303 	eor.w	r3, fp, r3
 8001220:	4043      	eors	r3, r0
 8001222:	0224      	lsls	r4, r4, #8
 8001224:	69a8      	ldr	r0, [r5, #24]
 8001226:	0e24      	lsrs	r4, r4, #24
 8001228:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
 800122c:	4043      	eors	r3, r0
 800122e:	ea4f 2034 	mov.w	r0, r4, ror #8
 8001232:	ea4f 440e 	mov.w	r4, lr, lsl #16
 8001236:	0e3f      	lsrs	r7, r7, #24
 8001238:	ea4f 6e14 	mov.w	lr, r4, lsr #24
 800123c:	f858 7027 	ldr.w	r7, [r8, r7, lsl #2]
 8001240:	f858 e02e 	ldr.w	lr, [r8, lr, lsl #2]
 8001244:	b2f6      	uxtb	r6, r6
 8001246:	f858 4026 	ldr.w	r4, [r8, r6, lsl #2]
 800124a:	4047      	eors	r7, r0
 800124c:	ea87 473e 	eor.w	r7, r7, lr, ror #16
 8001250:	69e8      	ldr	r0, [r5, #28]
 8001252:	ea97 6734 	eors.w	r7, r7, r4, ror #24
 8001256:	9c00      	ldr	r4, [sp, #0]
 8001258:	4047      	eors	r7, r0
 800125a:	0438      	lsls	r0, r7, #16
 800125c:	ea4f 6e10 	mov.w	lr, r0, lsr #24
 8001260:	0210      	lsls	r0, r2, #8
 8001262:	0e00      	lsrs	r0, r0, #24
 8001264:	1e64      	subs	r4, r4, #1
 8001266:	9400      	str	r4, [sp, #0]
 8001268:	0e3e      	lsrs	r6, r7, #24
 800126a:	040c      	lsls	r4, r1, #16
 800126c:	9601      	str	r6, [sp, #4]
 800126e:	0e24      	lsrs	r4, r4, #24
 8001270:	021e      	lsls	r6, r3, #8
 8001272:	9403      	str	r4, [sp, #12]
 8001274:	0e36      	lsrs	r6, r6, #24
 8001276:	9604      	str	r6, [sp, #16]
 8001278:	0e1c      	lsrs	r4, r3, #24
 800127a:	0416      	lsls	r6, r2, #16
 800127c:	9405      	str	r4, [sp, #20]
 800127e:	0e36      	lsrs	r6, r6, #24
 8001280:	020c      	lsls	r4, r1, #8
 8001282:	9607      	str	r6, [sp, #28]
 8001284:	0e24      	lsrs	r4, r4, #24
 8001286:	0e16      	lsrs	r6, r2, #24
 8001288:	b2d2      	uxtb	r2, r2
 800128a:	9408      	str	r4, [sp, #32]
 800128c:	9009      	str	r0, [sp, #36]	@ 0x24
 800128e:	0e0c      	lsrs	r4, r1, #24
 8001290:	0418      	lsls	r0, r3, #16
 8001292:	0e00      	lsrs	r0, r0, #24
 8001294:	900a      	str	r0, [sp, #40]	@ 0x28
 8001296:	9202      	str	r2, [sp, #8]
 8001298:	0238      	lsls	r0, r7, #8
 800129a:	0e00      	lsrs	r0, r0, #24
 800129c:	900b      	str	r0, [sp, #44]	@ 0x2c
 800129e:	b2ff      	uxtb	r7, r7
 80012a0:	9706      	str	r7, [sp, #24]
 80012a2:	b2db      	uxtb	r3, r3
 80012a4:	9800      	ldr	r0, [sp, #0]
 80012a6:	682a      	ldr	r2, [r5, #0]
 80012a8:	2800      	cmp	r0, #0
 80012aa:	b2c9      	uxtb	r1, r1
 80012ac:	f47f af0f 	bne.w	80010ce <cmox_aesFast_decrypt+0x46>
 80012b0:	f8df 90ac 	ldr.w	r9, [pc, #172]	@ 8001360 <cmox_aesFast_decrypt+0x2d8>
 80012b4:	f819 0006 	ldrb.w	r0, [r9, r6]
 80012b8:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80012ba:	f819 6006 	ldrb.w	r6, [r9, r6]
 80012be:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80012c2:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 80012c4:	0436      	lsls	r6, r6, #16
 80012c6:	ea46 6000 	orr.w	r0, r6, r0, lsl #24
 80012ca:	f819 600a 	ldrb.w	r6, [r9, sl]
 80012ce:	ea40 2606 	orr.w	r6, r0, r6, lsl #8
 80012d2:	f819 0001 	ldrb.w	r0, [r9, r1]
 80012d6:	4330      	orrs	r0, r6
 80012d8:	4042      	eors	r2, r0
 80012da:	603a      	str	r2, [r7, #0]
 80012dc:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80012de:	f819 2000 	ldrb.w	r2, [r9, r0]
 80012e2:	f819 1004 	ldrb.w	r1, [r9, r4]
 80012e6:	f819 000e 	ldrb.w	r0, [r9, lr]
 80012ea:	0412      	lsls	r2, r2, #16
 80012ec:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80012f0:	f819 1003 	ldrb.w	r1, [r9, r3]
 80012f4:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 80012f8:	6868      	ldr	r0, [r5, #4]
 80012fa:	430a      	orrs	r2, r1
 80012fc:	4042      	eors	r2, r0
 80012fe:	607a      	str	r2, [r7, #4]
 8001300:	9905      	ldr	r1, [sp, #20]
 8001302:	f819 0001 	ldrb.w	r0, [r9, r1]
 8001306:	9908      	ldr	r1, [sp, #32]
 8001308:	f819 2001 	ldrb.w	r2, [r9, r1]
 800130c:	9b06      	ldr	r3, [sp, #24]
 800130e:	0412      	lsls	r2, r2, #16
 8001310:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 8001314:	9807      	ldr	r0, [sp, #28]
 8001316:	f819 1000 	ldrb.w	r1, [r9, r0]
 800131a:	68a8      	ldr	r0, [r5, #8]
 800131c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001320:	f819 1003 	ldrb.w	r1, [r9, r3]
 8001324:	430a      	orrs	r2, r1
 8001326:	4042      	eors	r2, r0
 8001328:	60ba      	str	r2, [r7, #8]
 800132a:	9901      	ldr	r1, [sp, #4]
 800132c:	f819 0001 	ldrb.w	r0, [r9, r1]
 8001330:	9904      	ldr	r1, [sp, #16]
 8001332:	f819 2001 	ldrb.w	r2, [r9, r1]
 8001336:	9b02      	ldr	r3, [sp, #8]
 8001338:	0412      	lsls	r2, r2, #16
 800133a:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 800133e:	9803      	ldr	r0, [sp, #12]
 8001340:	f819 1000 	ldrb.w	r1, [r9, r0]
 8001344:	f819 0003 	ldrb.w	r0, [r9, r3]
 8001348:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800134c:	68e9      	ldr	r1, [r5, #12]
 800134e:	4302      	orrs	r2, r0
 8001350:	404a      	eors	r2, r1
 8001352:	60fa      	str	r2, [r7, #12]
 8001354:	b00d      	add	sp, #52	@ 0x34
 8001356:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800135a:	bf00      	nop
 800135c:	0800f528 	.word	0x0800f528
 8001360:	0800fe28 	.word	0x0800fe28

08001364 <cmox_aesFast_keySchedule_dec>:
 8001364:	e92d 42f0 	stmdb	sp!, {r4, r5, r6, r7, r9, lr}
 8001368:	4615      	mov	r5, r2
 800136a:	f100 040c 	add.w	r4, r0, #12
 800136e:	f000 fb71 	bl	8001a54 <cmox_aesSmall_keySchedule>
 8001372:	08ed      	lsrs	r5, r5, #3
 8001374:	1ce8      	adds	r0, r5, #3
 8001376:	0040      	lsls	r0, r0, #1
 8001378:	2802      	cmp	r0, #2
 800137a:	f0c0 808c 	bcc.w	8001496 <cmox_aesFast_keySchedule_dec+0x132>
 800137e:	006d      	lsls	r5, r5, #1
 8001380:	1d68      	adds	r0, r5, #5
 8001382:	4a46      	ldr	r2, [pc, #280]	@ (800149c <cmox_aesFast_keySchedule_dec+0x138>)
 8001384:	f8df 3118 	ldr.w	r3, [pc, #280]	@ 80014a0 <cmox_aesFast_keySchedule_dec+0x13c>
 8001388:	f854 7f10 	ldr.w	r7, [r4, #16]!
 800138c:	0239      	lsls	r1, r7, #8
 800138e:	0e09      	lsrs	r1, r1, #24
 8001390:	043e      	lsls	r6, r7, #16
 8001392:	f812 c001 	ldrb.w	ip, [r2, r1]
 8001396:	f853 102c 	ldr.w	r1, [r3, ip, lsl #2]
 800139a:	0e36      	lsrs	r6, r6, #24
 800139c:	ea4f 2c31 	mov.w	ip, r1, ror #8
 80013a0:	f812 e006 	ldrb.w	lr, [r2, r6]
 80013a4:	f853 102e 	ldr.w	r1, [r3, lr, lsl #2]
 80013a8:	b2fe      	uxtb	r6, r7
 80013aa:	ea4f 4e31 	mov.w	lr, r1, ror #16
 80013ae:	5d96      	ldrb	r6, [r2, r6]
 80013b0:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 80013b4:	0e3f      	lsrs	r7, r7, #24
 80013b6:	ea4f 6631 	mov.w	r6, r1, ror #24
 80013ba:	5dd7      	ldrb	r7, [r2, r7]
 80013bc:	f853 1027 	ldr.w	r1, [r3, r7, lsl #2]
 80013c0:	ea8c 0101 	eor.w	r1, ip, r1
 80013c4:	ea8e 0101 	eor.w	r1, lr, r1
 80013c8:	4071      	eors	r1, r6
 80013ca:	6021      	str	r1, [r4, #0]
 80013cc:	6867      	ldr	r7, [r4, #4]
 80013ce:	0239      	lsls	r1, r7, #8
 80013d0:	0e09      	lsrs	r1, r1, #24
 80013d2:	f812 e001 	ldrb.w	lr, [r2, r1]
 80013d6:	f853 602e 	ldr.w	r6, [r3, lr, lsl #2]
 80013da:	0439      	lsls	r1, r7, #16
 80013dc:	0e09      	lsrs	r1, r1, #24
 80013de:	ea4f 2c36 	mov.w	ip, r6, ror #8
 80013e2:	f812 9001 	ldrb.w	r9, [r2, r1]
 80013e6:	f853 6029 	ldr.w	r6, [r3, r9, lsl #2]
 80013ea:	ea4f 4e36 	mov.w	lr, r6, ror #16
 80013ee:	b2fe      	uxtb	r6, r7
 80013f0:	0e3f      	lsrs	r7, r7, #24
 80013f2:	5dd7      	ldrb	r7, [r2, r7]
 80013f4:	f812 9006 	ldrb.w	r9, [r2, r6]
 80013f8:	f853 1027 	ldr.w	r1, [r3, r7, lsl #2]
 80013fc:	f853 6029 	ldr.w	r6, [r3, r9, lsl #2]
 8001400:	ea8c 0101 	eor.w	r1, ip, r1
 8001404:	ea8e 0101 	eor.w	r1, lr, r1
 8001408:	ea91 6136 	eors.w	r1, r1, r6, ror #24
 800140c:	6061      	str	r1, [r4, #4]
 800140e:	68a7      	ldr	r7, [r4, #8]
 8001410:	0239      	lsls	r1, r7, #8
 8001412:	0e09      	lsrs	r1, r1, #24
 8001414:	f812 e001 	ldrb.w	lr, [r2, r1]
 8001418:	f853 602e 	ldr.w	r6, [r3, lr, lsl #2]
 800141c:	0439      	lsls	r1, r7, #16
 800141e:	0e09      	lsrs	r1, r1, #24
 8001420:	ea4f 2c36 	mov.w	ip, r6, ror #8
 8001424:	f812 9001 	ldrb.w	r9, [r2, r1]
 8001428:	f853 6029 	ldr.w	r6, [r3, r9, lsl #2]
 800142c:	ea4f 4e36 	mov.w	lr, r6, ror #16
 8001430:	b2fe      	uxtb	r6, r7
 8001432:	0e3f      	lsrs	r7, r7, #24
 8001434:	5dd7      	ldrb	r7, [r2, r7]
 8001436:	f812 9006 	ldrb.w	r9, [r2, r6]
 800143a:	f853 1027 	ldr.w	r1, [r3, r7, lsl #2]
 800143e:	f853 6029 	ldr.w	r6, [r3, r9, lsl #2]
 8001442:	ea8c 0101 	eor.w	r1, ip, r1
 8001446:	ea8e 0101 	eor.w	r1, lr, r1
 800144a:	ea91 6136 	eors.w	r1, r1, r6, ror #24
 800144e:	60a1      	str	r1, [r4, #8]
 8001450:	68e7      	ldr	r7, [r4, #12]
 8001452:	0239      	lsls	r1, r7, #8
 8001454:	0e09      	lsrs	r1, r1, #24
 8001456:	f812 e001 	ldrb.w	lr, [r2, r1]
 800145a:	f853 602e 	ldr.w	r6, [r3, lr, lsl #2]
 800145e:	0439      	lsls	r1, r7, #16
 8001460:	0e09      	lsrs	r1, r1, #24
 8001462:	ea4f 2536 	mov.w	r5, r6, ror #8
 8001466:	f812 e001 	ldrb.w	lr, [r2, r1]
 800146a:	f853 602e 	ldr.w	r6, [r3, lr, lsl #2]
 800146e:	b2f9      	uxtb	r1, r7
 8001470:	0e3f      	lsrs	r7, r7, #24
 8001472:	f812 c001 	ldrb.w	ip, [r2, r1]
 8001476:	f853 102c 	ldr.w	r1, [r3, ip, lsl #2]
 800147a:	5dd7      	ldrb	r7, [r2, r7]
 800147c:	ea4f 6c31 	mov.w	ip, r1, ror #24
 8001480:	f853 1027 	ldr.w	r1, [r3, r7, lsl #2]
 8001484:	404d      	eors	r5, r1
 8001486:	ea85 4536 	eor.w	r5, r5, r6, ror #16
 800148a:	ea8c 0505 	eor.w	r5, ip, r5
 800148e:	1e40      	subs	r0, r0, #1
 8001490:	60e5      	str	r5, [r4, #12]
 8001492:	f47f af79 	bne.w	8001388 <cmox_aesFast_keySchedule_dec+0x24>
 8001496:	e8bd 82f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, pc}
 800149a:	bf00      	nop
 800149c:	0800fd28 	.word	0x0800fd28
 80014a0:	0800f528 	.word	0x0800f528

080014a4 <cmox_aesFast_encrypt>:
 80014a4:	e92d 4ff4 	stmdb	sp!, {r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80014a8:	f100 030c 	add.w	r3, r0, #12
 80014ac:	b08c      	sub	sp, #48	@ 0x30
 80014ae:	681a      	ldr	r2, [r3, #0]
 80014b0:	684c      	ldr	r4, [r1, #4]
 80014b2:	688f      	ldr	r7, [r1, #8]
 80014b4:	6845      	ldr	r5, [r0, #4]
 80014b6:	6808      	ldr	r0, [r1, #0]
 80014b8:	4050      	eors	r0, r2
 80014ba:	685a      	ldr	r2, [r3, #4]
 80014bc:	4054      	eors	r4, r2
 80014be:	689a      	ldr	r2, [r3, #8]
 80014c0:	4057      	eors	r7, r2
 80014c2:	68ca      	ldr	r2, [r1, #12]
 80014c4:	68d9      	ldr	r1, [r3, #12]
 80014c6:	08ed      	lsrs	r5, r5, #3
 80014c8:	1ced      	adds	r5, r5, #3
 80014ca:	ea81 0e02 	eor.w	lr, r1, r2
 80014ce:	4aa6      	ldr	r2, [pc, #664]	@ (8001768 <cmox_aesFast_encrypt+0x2c4>)
 80014d0:	9500      	str	r5, [sp, #0]
 80014d2:	4621      	mov	r1, r4
 80014d4:	e059      	b.n	800158a <cmox_aesFast_encrypt+0xe6>
 80014d6:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 80014d8:	f852 4020 	ldr.w	r4, [r2, r0, lsl #2]
 80014dc:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80014e0:	f852 c02a 	ldr.w	ip, [r2, sl, lsl #2]
 80014e4:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 80014e8:	f852 7027 	ldr.w	r7, [r2, r7, lsl #2]
 80014ec:	ea4f 2034 	mov.w	r0, r4, ror #8
 80014f0:	f852 4028 	ldr.w	r4, [r2, r8, lsl #2]
 80014f4:	4060      	eors	r0, r4
 80014f6:	ea80 403c 	eor.w	r0, r0, ip, ror #16
 80014fa:	ea90 6031 	eors.w	r0, r0, r1, ror #24
 80014fe:	6819      	ldr	r1, [r3, #0]
 8001500:	f8dd c024 	ldr.w	ip, [sp, #36]	@ 0x24
 8001504:	685c      	ldr	r4, [r3, #4]
 8001506:	4048      	eors	r0, r1
 8001508:	f852 102c 	ldr.w	r1, [r2, ip, lsl #2]
 800150c:	f852 c02e 	ldr.w	ip, [r2, lr, lsl #2]
 8001510:	f852 e029 	ldr.w	lr, [r2, r9, lsl #2]
 8001514:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8001518:	ea97 2131 	eors.w	r1, r7, r1, ror #8
 800151c:	ea81 413c 	eor.w	r1, r1, ip, ror #16
 8001520:	ea81 613e 	eor.w	r1, r1, lr, ror #24
 8001524:	f8dd e01c 	ldr.w	lr, [sp, #28]
 8001528:	9f08      	ldr	r7, [sp, #32]
 800152a:	f852 c02e 	ldr.w	ip, [r2, lr, lsl #2]
 800152e:	f8dd e018 	ldr.w	lr, [sp, #24]
 8001532:	4061      	eors	r1, r4
 8001534:	f852 4027 	ldr.w	r4, [r2, r7, lsl #2]
 8001538:	ea4f 2734 	mov.w	r7, r4, ror #8
 800153c:	f852 402e 	ldr.w	r4, [r2, lr, lsl #2]
 8001540:	ea4f 6e34 	mov.w	lr, r4, ror #24
 8001544:	f852 4029 	ldr.w	r4, [r2, r9, lsl #2]
 8001548:	4067      	eors	r7, r4
 800154a:	ea87 473c 	eor.w	r7, r7, ip, ror #16
 800154e:	689c      	ldr	r4, [r3, #8]
 8001550:	ea8e 0707 	eor.w	r7, lr, r7
 8001554:	f8dd e010 	ldr.w	lr, [sp, #16]
 8001558:	4067      	eors	r7, r4
 800155a:	f852 402e 	ldr.w	r4, [r2, lr, lsl #2]
 800155e:	ea4f 2e34 	mov.w	lr, r4, ror #8
 8001562:	9c03      	ldr	r4, [sp, #12]
 8001564:	f852 5024 	ldr.w	r5, [r2, r4, lsl #2]
 8001568:	ea4f 4435 	mov.w	r4, r5, ror #16
 800156c:	9d02      	ldr	r5, [sp, #8]
 800156e:	f852 6025 	ldr.w	r6, [r2, r5, lsl #2]
 8001572:	ea4f 6536 	mov.w	r5, r6, ror #24
 8001576:	9e01      	ldr	r6, [sp, #4]
 8001578:	f852 6026 	ldr.w	r6, [r2, r6, lsl #2]
 800157c:	ea8e 0606 	eor.w	r6, lr, r6
 8001580:	4074      	eors	r4, r6
 8001582:	4065      	eors	r5, r4
 8001584:	68dc      	ldr	r4, [r3, #12]
 8001586:	ea84 0e05 	eor.w	lr, r4, r5
 800158a:	020d      	lsls	r5, r1, #8
 800158c:	fa5f f88e 	uxtb.w	r8, lr
 8001590:	0e2d      	lsrs	r5, r5, #24
 8001592:	f852 6025 	ldr.w	r6, [r2, r5, lsl #2]
 8001596:	043c      	lsls	r4, r7, #16
 8001598:	ea4f 6b10 	mov.w	fp, r0, lsr #24
 800159c:	ea4f 2936 	mov.w	r9, r6, ror #8
 80015a0:	ea4f 6c14 	mov.w	ip, r4, lsr #24
 80015a4:	f852 4028 	ldr.w	r4, [r2, r8, lsl #2]
 80015a8:	f852 602c 	ldr.w	r6, [r2, ip, lsl #2]
 80015ac:	691d      	ldr	r5, [r3, #16]
 80015ae:	ea4f 6834 	mov.w	r8, r4, ror #24
 80015b2:	f852 402b 	ldr.w	r4, [r2, fp, lsl #2]
 80015b6:	ea89 0404 	eor.w	r4, r9, r4
 80015ba:	ea84 4436 	eor.w	r4, r4, r6, ror #16
 80015be:	ea88 0404 	eor.w	r4, r8, r4
 80015c2:	406c      	eors	r4, r5
 80015c4:	023d      	lsls	r5, r7, #8
 80015c6:	ea4f 6815 	mov.w	r8, r5, lsr #24
 80015ca:	ea4f 450e 	mov.w	r5, lr, lsl #16
 80015ce:	ea4f 6c15 	mov.w	ip, r5, lsr #24
 80015d2:	f852 a028 	ldr.w	sl, [r2, r8, lsl #2]
 80015d6:	f852 502c 	ldr.w	r5, [r2, ip, lsl #2]
 80015da:	ea4f 4c35 	mov.w	ip, r5, ror #16
 80015de:	fa5f f880 	uxtb.w	r8, r0
 80015e2:	f852 5028 	ldr.w	r5, [r2, r8, lsl #2]
 80015e6:	ea4f 6835 	mov.w	r8, r5, ror #24
 80015ea:	ea4f 6b11 	mov.w	fp, r1, lsr #24
 80015ee:	f852 502b 	ldr.w	r5, [r2, fp, lsl #2]
 80015f2:	695e      	ldr	r6, [r3, #20]
 80015f4:	ea85 253a 	eor.w	r5, r5, sl, ror #8
 80015f8:	ea8c 0505 	eor.w	r5, ip, r5
 80015fc:	ea88 0505 	eor.w	r5, r8, r5
 8001600:	4075      	eors	r5, r6
 8001602:	ea4f 260e 	mov.w	r6, lr, lsl #8
 8001606:	ea4f 6816 	mov.w	r8, r6, lsr #24
 800160a:	f852 b028 	ldr.w	fp, [r2, r8, lsl #2]
 800160e:	0406      	lsls	r6, r0, #16
 8001610:	ea4f 6c16 	mov.w	ip, r6, lsr #24
 8001614:	f852 802c 	ldr.w	r8, [r2, ip, lsl #2]
 8001618:	ea4f 4838 	mov.w	r8, r8, ror #16
 800161c:	f8cd 8004 	str.w	r8, [sp, #4]
 8001620:	fa5f fc81 	uxtb.w	ip, r1
 8001624:	f852 602c 	ldr.w	r6, [r2, ip, lsl #2]
 8001628:	ea4f 6c36 	mov.w	ip, r6, ror #24
 800162c:	ea4f 6817 	mov.w	r8, r7, lsr #24
 8001630:	f852 6028 	ldr.w	r6, [r2, r8, lsl #2]
 8001634:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8001638:	ea86 263b 	eor.w	r6, r6, fp, ror #8
 800163c:	ea88 0606 	eor.w	r6, r8, r6
 8001640:	ea8c 0606 	eor.w	r6, ip, r6
 8001644:	0409      	lsls	r1, r1, #16
 8001646:	f8d3 c018 	ldr.w	ip, [r3, #24]
 800164a:	0e09      	lsrs	r1, r1, #24
 800164c:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 8001650:	ea8c 0606 	eor.w	r6, ip, r6
 8001654:	0200      	lsls	r0, r0, #8
 8001656:	0e00      	lsrs	r0, r0, #24
 8001658:	ea4f 4c31 	mov.w	ip, r1, ror #16
 800165c:	ea4f 6e1e 	mov.w	lr, lr, lsr #24
 8001660:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 8001664:	f852 102e 	ldr.w	r1, [r2, lr, lsl #2]
 8001668:	b2ff      	uxtb	r7, r7
 800166a:	f852 7027 	ldr.w	r7, [r2, r7, lsl #2]
 800166e:	ea91 2030 	eors.w	r0, r1, r0, ror #8
 8001672:	ea8c 0100 	eor.w	r1, ip, r0
 8001676:	69d8      	ldr	r0, [r3, #28]
 8001678:	ea91 6137 	eors.w	r1, r1, r7, ror #24
 800167c:	9f00      	ldr	r7, [sp, #0]
 800167e:	4041      	eors	r1, r0
 8001680:	1e7f      	subs	r7, r7, #1
 8001682:	9700      	str	r7, [sp, #0]
 8001684:	0e08      	lsrs	r0, r1, #24
 8001686:	042f      	lsls	r7, r5, #16
 8001688:	9001      	str	r0, [sp, #4]
 800168a:	0e3f      	lsrs	r7, r7, #24
 800168c:	0220      	lsls	r0, r4, #8
 800168e:	9703      	str	r7, [sp, #12]
 8001690:	0e00      	lsrs	r0, r0, #24
 8001692:	9004      	str	r0, [sp, #16]
 8001694:	0e37      	lsrs	r7, r6, #24
 8001696:	0420      	lsls	r0, r4, #16
 8001698:	9705      	str	r7, [sp, #20]
 800169a:	0e00      	lsrs	r0, r0, #24
 800169c:	020f      	lsls	r7, r1, #8
 800169e:	9007      	str	r0, [sp, #28]
 80016a0:	0e3f      	lsrs	r7, r7, #24
 80016a2:	0408      	lsls	r0, r1, #16
 80016a4:	ea4f 6e10 	mov.w	lr, r0, lsr #24
 80016a8:	0230      	lsls	r0, r6, #8
 80016aa:	0e00      	lsrs	r0, r0, #24
 80016ac:	9708      	str	r7, [sp, #32]
 80016ae:	9009      	str	r0, [sp, #36]	@ 0x24
 80016b0:	3320      	adds	r3, #32
 80016b2:	0430      	lsls	r0, r6, #16
 80016b4:	0e00      	lsrs	r0, r0, #24
 80016b6:	900a      	str	r0, [sp, #40]	@ 0x28
 80016b8:	0e2f      	lsrs	r7, r5, #24
 80016ba:	0228      	lsls	r0, r5, #8
 80016bc:	0e00      	lsrs	r0, r0, #24
 80016be:	900b      	str	r0, [sp, #44]	@ 0x2c
 80016c0:	ea4f 6814 	mov.w	r8, r4, lsr #24
 80016c4:	b2f0      	uxtb	r0, r6
 80016c6:	9002      	str	r0, [sp, #8]
 80016c8:	fa5f f984 	uxtb.w	r9, r4
 80016cc:	b2e8      	uxtb	r0, r5
 80016ce:	9006      	str	r0, [sp, #24]
 80016d0:	b2c9      	uxtb	r1, r1
 80016d2:	9800      	ldr	r0, [sp, #0]
 80016d4:	2800      	cmp	r0, #0
 80016d6:	f47f aefe 	bne.w	80014d6 <cmox_aesFast_encrypt+0x32>
 80016da:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80016dc:	4c23      	ldr	r4, [pc, #140]	@ (800176c <cmox_aesFast_encrypt+0x2c8>)
 80016de:	5d66      	ldrb	r6, [r4, r5]
 80016e0:	f814 0008 	ldrb.w	r0, [r4, r8]
 80016e4:	5c61      	ldrb	r1, [r4, r1]
 80016e6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80016e8:	0436      	lsls	r6, r6, #16
 80016ea:	ea46 6600 	orr.w	r6, r6, r0, lsl #24
 80016ee:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80016f0:	5c25      	ldrb	r5, [r4, r0]
 80016f2:	6818      	ldr	r0, [r3, #0]
 80016f4:	ea46 2605 	orr.w	r6, r6, r5, lsl #8
 80016f8:	430e      	orrs	r6, r1
 80016fa:	4046      	eors	r6, r0
 80016fc:	6016      	str	r6, [r2, #0]
 80016fe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8001700:	5c26      	ldrb	r6, [r4, r0]
 8001702:	5de5      	ldrb	r5, [r4, r7]
 8001704:	f814 1009 	ldrb.w	r1, [r4, r9]
 8001708:	6858      	ldr	r0, [r3, #4]
 800170a:	0436      	lsls	r6, r6, #16
 800170c:	ea46 6605 	orr.w	r6, r6, r5, lsl #24
 8001710:	f814 500e 	ldrb.w	r5, [r4, lr]
 8001714:	ea46 2605 	orr.w	r6, r6, r5, lsl #8
 8001718:	430e      	orrs	r6, r1
 800171a:	4046      	eors	r6, r0
 800171c:	6056      	str	r6, [r2, #4]
 800171e:	9905      	ldr	r1, [sp, #20]
 8001720:	5c60      	ldrb	r0, [r4, r1]
 8001722:	9908      	ldr	r1, [sp, #32]
 8001724:	5c65      	ldrb	r5, [r4, r1]
 8001726:	9e06      	ldr	r6, [sp, #24]
 8001728:	042d      	lsls	r5, r5, #16
 800172a:	ea45 6500 	orr.w	r5, r5, r0, lsl #24
 800172e:	9807      	ldr	r0, [sp, #28]
 8001730:	5c21      	ldrb	r1, [r4, r0]
 8001732:	6898      	ldr	r0, [r3, #8]
 8001734:	ea45 2501 	orr.w	r5, r5, r1, lsl #8
 8001738:	5da1      	ldrb	r1, [r4, r6]
 800173a:	430d      	orrs	r5, r1
 800173c:	4045      	eors	r5, r0
 800173e:	6095      	str	r5, [r2, #8]
 8001740:	9901      	ldr	r1, [sp, #4]
 8001742:	5c60      	ldrb	r0, [r4, r1]
 8001744:	9904      	ldr	r1, [sp, #16]
 8001746:	5c65      	ldrb	r5, [r4, r1]
 8001748:	9e02      	ldr	r6, [sp, #8]
 800174a:	042d      	lsls	r5, r5, #16
 800174c:	ea45 6500 	orr.w	r5, r5, r0, lsl #24
 8001750:	9803      	ldr	r0, [sp, #12]
 8001752:	5c21      	ldrb	r1, [r4, r0]
 8001754:	5da0      	ldrb	r0, [r4, r6]
 8001756:	ea45 2501 	orr.w	r5, r5, r1, lsl #8
 800175a:	68d9      	ldr	r1, [r3, #12]
 800175c:	4305      	orrs	r5, r0
 800175e:	404d      	eors	r5, r1
 8001760:	60d5      	str	r5, [r2, #12]
 8001762:	b00d      	add	sp, #52	@ 0x34
 8001764:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001768:	0800f928 	.word	0x0800f928
 800176c:	0800fd28 	.word	0x0800fd28

08001770 <cmox_md_updateState_small>:
 8001770:	2220      	movs	r2, #32
 8001772:	305c      	adds	r0, #92	@ 0x5c
 8001774:	f00b b915 	b.w	800c9a2 <__aeabi_memcpy>

08001778 <cmox_md_copyLastState_small>:
 8001778:	b5f0      	push	{r4, r5, r6, r7, lr}
 800177a:	6884      	ldr	r4, [r0, #8]
 800177c:	08a3      	lsrs	r3, r4, #2
 800177e:	2200      	movs	r2, #0
 8001780:	f004 0403 	and.w	r4, r4, #3
 8001784:	e007      	b.n	8001796 <cmox_md_copyLastState_small+0x1e>
 8001786:	f100 055c 	add.w	r5, r0, #92	@ 0x5c
 800178a:	f855 6022 	ldr.w	r6, [r5, r2, lsl #2]
 800178e:	ba35      	rev	r5, r6
 8001790:	f841 5022 	str.w	r5, [r1, r2, lsl #2]
 8001794:	1c52      	adds	r2, r2, #1
 8001796:	429a      	cmp	r2, r3
 8001798:	d3f5      	bcc.n	8001786 <cmox_md_copyLastState_small+0xe>
 800179a:	2200      	movs	r2, #0
 800179c:	e00b      	b.n	80017b6 <cmox_md_copyLastState_small+0x3e>
 800179e:	f100 055c 	add.w	r5, r0, #92	@ 0x5c
 80017a2:	eb02 0783 	add.w	r7, r2, r3, lsl #2
 80017a6:	f855 6023 	ldr.w	r6, [r5, r3, lsl #2]
 80017aa:	00d5      	lsls	r5, r2, #3
 80017ac:	f1c5 0518 	rsb	r5, r5, #24
 80017b0:	40ee      	lsrs	r6, r5
 80017b2:	55ce      	strb	r6, [r1, r7]
 80017b4:	1c52      	adds	r2, r2, #1
 80017b6:	42a2      	cmp	r2, r4
 80017b8:	d3f1      	bcc.n	800179e <cmox_md_copyLastState_small+0x26>
 80017ba:	bdf0      	pop	{r4, r5, r6, r7, pc}

080017bc <cmox_md_padMsgLen_small>:
 80017bc:	b530      	push	{r4, r5, lr}
 80017be:	68c4      	ldr	r4, [r0, #12]
 80017c0:	6903      	ldr	r3, [r0, #16]
 80017c2:	2200      	movs	r2, #0
 80017c4:	1ae3      	subs	r3, r4, r3
 80017c6:	18d5      	adds	r5, r2, r3
 80017c8:	5c8c      	ldrb	r4, [r1, r2]
 80017ca:	4405      	add	r5, r0
 80017cc:	1c52      	adds	r2, r2, #1
 80017ce:	2a08      	cmp	r2, #8
 80017d0:	772c      	strb	r4, [r5, #28]
 80017d2:	d3f8      	bcc.n	80017c6 <cmox_md_padMsgLen_small+0xa>
 80017d4:	bd30      	pop	{r4, r5, pc}

080017d6 <cmox_md_construct>:
 80017d6:	6003      	str	r3, [r0, #0]
 80017d8:	60c1      	str	r1, [r0, #12]
 80017da:	6102      	str	r2, [r0, #16]
 80017dc:	4770      	bx	lr

080017de <cmox_md_init>:
 80017de:	b538      	push	{r3, r4, r5, lr}
 80017e0:	4604      	mov	r4, r0
 80017e2:	4615      	mov	r5, r2
 80017e4:	2200      	movs	r2, #0
 80017e6:	6062      	str	r2, [r4, #4]
 80017e8:	6823      	ldr	r3, [r4, #0]
 80017ea:	685a      	ldr	r2, [r3, #4]
 80017ec:	4790      	blx	r2
 80017ee:	2000      	movs	r0, #0
 80017f0:	6160      	str	r0, [r4, #20]
 80017f2:	61a0      	str	r0, [r4, #24]
 80017f4:	60a5      	str	r5, [r4, #8]
 80017f6:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 80017fa:	bd32      	pop	{r1, r4, r5, pc}

080017fc <cmox_md_setTagSize>:
 80017fc:	6081      	str	r1, [r0, #8]
 80017fe:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8001802:	4770      	bx	lr

08001804 <cmox_md_append>:
 8001804:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001808:	4604      	mov	r4, r0
 800180a:	7920      	ldrb	r0, [r4, #4]
 800180c:	f8d4 800c 	ldr.w	r8, [r4, #12]
 8001810:	0745      	lsls	r5, r0, #29
 8001812:	bf48      	it	mi
 8001814:	4824      	ldrmi	r0, [pc, #144]	@ (80018a8 <cmox_md_append+0xa4>)
 8001816:	d445      	bmi.n	80018a4 <cmox_md_append+0xa0>
 8001818:	6966      	ldr	r6, [r4, #20]
 800181a:	461d      	mov	r5, r3
 800181c:	f1a8 0001 	sub.w	r0, r8, #1
 8001820:	ea00 03d6 	and.w	r3, r0, r6, lsr #3
 8001824:	eb06 06c5 	add.w	r6, r6, r5, lsl #3
 8001828:	ebb6 0fc5 	cmp.w	r6, r5, lsl #3
 800182c:	6166      	str	r6, [r4, #20]
 800182e:	d202      	bcs.n	8001836 <cmox_md_append+0x32>
 8001830:	69a6      	ldr	r6, [r4, #24]
 8001832:	1c76      	adds	r6, r6, #1
 8001834:	61a6      	str	r6, [r4, #24]
 8001836:	4617      	mov	r7, r2
 8001838:	69a6      	ldr	r6, [r4, #24]
 800183a:	eb06 7655 	add.w	r6, r6, r5, lsr #29
 800183e:	61a6      	str	r6, [r4, #24]
 8001840:	460e      	mov	r6, r1
 8001842:	18e9      	adds	r1, r5, r3
 8001844:	4288      	cmp	r0, r1
 8001846:	d225      	bcs.n	8001894 <cmox_md_append+0x90>
 8001848:	eba8 0903 	sub.w	r9, r8, r3
 800184c:	464a      	mov	r2, r9
 800184e:	4631      	mov	r1, r6
 8001850:	18f8      	adds	r0, r7, r3
 8001852:	f00b f8a6 	bl	800c9a2 <__aeabi_memcpy>
 8001856:	6822      	ldr	r2, [r4, #0]
 8001858:	6813      	ldr	r3, [r2, #0]
 800185a:	4639      	mov	r1, r7
 800185c:	e00f      	b.n	800187e <cmox_md_append+0x7a>
 800185e:	4642      	mov	r2, r8
 8001860:	4638      	mov	r0, r7
 8001862:	f00b f89e 	bl	800c9a2 <__aeabi_memcpy>
 8001866:	6823      	ldr	r3, [r4, #0]
 8001868:	681a      	ldr	r2, [r3, #0]
 800186a:	4639      	mov	r1, r7
 800186c:	4620      	mov	r0, r4
 800186e:	4790      	blx	r2
 8001870:	e007      	b.n	8001882 <cmox_md_append+0x7e>
 8001872:	1831      	adds	r1, r6, r0
 8001874:	f011 0003 	ands.w	r0, r1, #3
 8001878:	d1f1      	bne.n	800185e <cmox_md_append+0x5a>
 800187a:	6822      	ldr	r2, [r4, #0]
 800187c:	6813      	ldr	r3, [r2, #0]
 800187e:	4620      	mov	r0, r4
 8001880:	4798      	blx	r3
 8001882:	4648      	mov	r0, r9
 8001884:	eb00 0908 	add.w	r9, r0, r8
 8001888:	f1a9 0101 	sub.w	r1, r9, #1
 800188c:	42a9      	cmp	r1, r5
 800188e:	d3f0      	bcc.n	8001872 <cmox_md_append+0x6e>
 8001890:	2300      	movs	r3, #0
 8001892:	e000      	b.n	8001896 <cmox_md_append+0x92>
 8001894:	2000      	movs	r0, #0
 8001896:	1a2a      	subs	r2, r5, r0
 8001898:	1831      	adds	r1, r6, r0
 800189a:	18f8      	adds	r0, r7, r3
 800189c:	f00b f881 	bl	800c9a2 <__aeabi_memcpy>
 80018a0:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 80018a4:	e8bd 83f2 	ldmia.w	sp!, {r1, r4, r5, r6, r7, r8, r9, pc}
 80018a8:	00020004 	.word	0x00020004

080018ac <cmox_md_generateTag>:
 80018ac:	e92d 4ffc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80018b0:	4602      	mov	r2, r0
 80018b2:	b085      	sub	sp, #20
 80018b4:	68d0      	ldr	r0, [r2, #12]
 80018b6:	6913      	ldr	r3, [r2, #16]
 80018b8:	f8df c16c 	ldr.w	ip, [pc, #364]	@ 8001a28 <cmox_md_generateTag+0x17c>
 80018bc:	f8df 816c 	ldr.w	r8, [pc, #364]	@ 8001a2c <cmox_md_generateTag+0x180>
 80018c0:	eba0 0a03 	sub.w	sl, r0, r3
 80018c4:	6850      	ldr	r0, [r2, #4]
 80018c6:	f040 0004 	orr.w	r0, r0, #4
 80018ca:	6050      	str	r0, [r2, #4]
 80018cc:	2700      	movs	r7, #0
 80018ce:	a803      	add	r0, sp, #12
 80018d0:	9002      	str	r0, [sp, #8]
 80018d2:	f10d 0e0c 	add.w	lr, sp, #12
 80018d6:	e9d8 3400 	ldrd	r3, r4, [r8]
 80018da:	a803      	add	r0, sp, #12
 80018dc:	4d54      	ldr	r5, [pc, #336]	@ (8001a30 <cmox_md_generateTag+0x184>)
 80018de:	e9c0 3400 	strd	r3, r4, [r0]
 80018e2:	7828      	ldrb	r0, [r5, #0]
 80018e4:	4d53      	ldr	r5, [pc, #332]	@ (8001a34 <cmox_md_generateTag+0x188>)
 80018e6:	2800      	cmp	r0, #0
 80018e8:	bf0c      	ite	eq
 80018ea:	2300      	moveq	r3, #0
 80018ec:	2304      	movne	r3, #4
 80018ee:	4699      	mov	r9, r3
 80018f0:	f85c 3003 	ldr.w	r3, [ip, r3]
 80018f4:	f85e 4009 	ldr.w	r4, [lr, r9]
 80018f8:	4423      	add	r3, r4
 80018fa:	2601      	movs	r6, #1
 80018fc:	601d      	str	r5, [r3, #0]
 80018fe:	681c      	ldr	r4, [r3, #0]
 8001900:	609e      	str	r6, [r3, #8]
 8001902:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8001906:	9d03      	ldr	r5, [sp, #12]
 8001908:	f8dc 9000 	ldr.w	r9, [ip]
 800190c:	f8de 6004 	ldr.w	r6, [lr, #4]
 8001910:	405d      	eors	r5, r3
 8001912:	4065      	eors	r5, r4
 8001914:	4c48      	ldr	r4, [pc, #288]	@ (8001a38 <cmox_md_generateTag+0x18c>)
 8001916:	4065      	eors	r5, r4
 8001918:	ea89 0606 	eor.w	r6, r9, r6
 800191c:	4c47      	ldr	r4, [pc, #284]	@ (8001a3c <cmox_md_generateTag+0x190>)
 800191e:	4066      	eors	r6, r4
 8001920:	1975      	adds	r5, r6, r5
 8001922:	4c47      	ldr	r4, [pc, #284]	@ (8001a40 <cmox_md_generateTag+0x194>)
 8001924:	4065      	eors	r5, r4
 8001926:	e9d8 6b00 	ldrd	r6, fp, [r8]
 800192a:	ac03      	add	r4, sp, #12
 800192c:	2800      	cmp	r0, #0
 800192e:	e9c4 6b00 	strd	r6, fp, [r4]
 8001932:	bf0e      	itee	eq
 8001934:	2400      	moveq	r4, #0
 8001936:	2004      	movne	r0, #4
 8001938:	2404      	movne	r4, #4
 800193a:	9e02      	ldr	r6, [sp, #8]
 800193c:	f85c 0000 	ldr.w	r0, [ip, r0]
 8001940:	5934      	ldr	r4, [r6, r4]
 8001942:	1820      	adds	r0, r4, r0
 8001944:	4c3f      	ldr	r4, [pc, #252]	@ (8001a44 <cmox_md_generateTag+0x198>)
 8001946:	6004      	str	r4, [r0, #0]
 8001948:	2601      	movs	r6, #1
 800194a:	6804      	ldr	r4, [r0, #0]
 800194c:	6086      	str	r6, [r0, #8]
 800194e:	9803      	ldr	r0, [sp, #12]
 8001950:	9e02      	ldr	r6, [sp, #8]
 8001952:	4043      	eors	r3, r0
 8001954:	4063      	eors	r3, r4
 8001956:	4c38      	ldr	r4, [pc, #224]	@ (8001a38 <cmox_md_generateTag+0x18c>)
 8001958:	6870      	ldr	r0, [r6, #4]
 800195a:	4063      	eors	r3, r4
 800195c:	ea89 0000 	eor.w	r0, r9, r0
 8001960:	4c36      	ldr	r4, [pc, #216]	@ (8001a3c <cmox_md_generateTag+0x190>)
 8001962:	4060      	eors	r0, r4
 8001964:	4403      	add	r3, r0
 8001966:	4838      	ldr	r0, [pc, #224]	@ (8001a48 <cmox_md_generateTag+0x19c>)
 8001968:	4043      	eors	r3, r0
 800196a:	0028      	movs	r0, r5
 800196c:	bf18      	it	ne
 800196e:	2001      	movne	r0, #1
 8001970:	1e5b      	subs	r3, r3, #1
 8001972:	419b      	sbcs	r3, r3
 8001974:	2f04      	cmp	r7, #4
 8001976:	bf2c      	ite	cs
 8001978:	b2c0      	uxtbcs	r0, r0
 800197a:	0fd8      	lsrcc	r0, r3, #31
 800197c:	f102 0314 	add.w	r3, r2, #20
 8001980:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8001984:	f007 0303 	and.w	r3, r7, #3
 8001988:	f1c3 0303 	rsb	r3, r3, #3
 800198c:	00db      	lsls	r3, r3, #3
 800198e:	40d8      	lsrs	r0, r3
 8001990:	f80d 0007 	strb.w	r0, [sp, r7]
 8001994:	1c7f      	adds	r7, r7, #1
 8001996:	2f08      	cmp	r7, #8
 8001998:	d39d      	bcc.n	80018d6 <cmox_md_generateTag+0x2a>
 800199a:	4615      	mov	r5, r2
 800199c:	460c      	mov	r4, r1
 800199e:	696a      	ldr	r2, [r5, #20]
 80019a0:	69ab      	ldr	r3, [r5, #24]
 80019a2:	68e8      	ldr	r0, [r5, #12]
 80019a4:	08d2      	lsrs	r2, r2, #3
 80019a6:	ea42 7243 	orr.w	r2, r2, r3, lsl #29
 80019aa:	1e40      	subs	r0, r0, #1
 80019ac:	ea00 0702 	and.w	r7, r0, r2
 80019b0:	2300      	movs	r3, #0
 80019b2:	4002      	ands	r2, r0
 80019b4:	429b      	cmp	r3, r3
 80019b6:	d80a      	bhi.n	80019ce <cmox_md_generateTag+0x122>
 80019b8:	4552      	cmp	r2, sl
 80019ba:	d208      	bcs.n	80019ce <cmox_md_generateTag+0x122>
 80019bc:	2080      	movs	r0, #128	@ 0x80
 80019be:	55e0      	strb	r0, [r4, r7]
 80019c0:	1c7f      	adds	r7, r7, #1
 80019c2:	4557      	cmp	r7, sl
 80019c4:	d216      	bcs.n	80019f4 <cmox_md_generateTag+0x148>
 80019c6:	ebaa 0107 	sub.w	r1, sl, r7
 80019ca:	19e0      	adds	r0, r4, r7
 80019cc:	e010      	b.n	80019f0 <cmox_md_generateTag+0x144>
 80019ce:	2080      	movs	r0, #128	@ 0x80
 80019d0:	55e0      	strb	r0, [r4, r7]
 80019d2:	e000      	b.n	80019d6 <cmox_md_generateTag+0x12a>
 80019d4:	55e3      	strb	r3, [r4, r7]
 80019d6:	68e8      	ldr	r0, [r5, #12]
 80019d8:	1c7f      	adds	r7, r7, #1
 80019da:	4287      	cmp	r7, r0
 80019dc:	d3fa      	bcc.n	80019d4 <cmox_md_generateTag+0x128>
 80019de:	682a      	ldr	r2, [r5, #0]
 80019e0:	6813      	ldr	r3, [r2, #0]
 80019e2:	4628      	mov	r0, r5
 80019e4:	4798      	blx	r3
 80019e6:	f1ba 0f00 	cmp.w	sl, #0
 80019ea:	d003      	beq.n	80019f4 <cmox_md_generateTag+0x148>
 80019ec:	4651      	mov	r1, sl
 80019ee:	4620      	mov	r0, r4
 80019f0:	f00a ffd9 	bl	800c9a6 <__aeabi_memclr>
 80019f4:	682a      	ldr	r2, [r5, #0]
 80019f6:	9e06      	ldr	r6, [sp, #24]
 80019f8:	9f05      	ldr	r7, [sp, #20]
 80019fa:	6893      	ldr	r3, [r2, #8]
 80019fc:	4669      	mov	r1, sp
 80019fe:	4628      	mov	r0, r5
 8001a00:	4798      	blx	r3
 8001a02:	682a      	ldr	r2, [r5, #0]
 8001a04:	f8d2 9000 	ldr.w	r9, [r2]
 8001a08:	4621      	mov	r1, r4
 8001a0a:	4628      	mov	r0, r5
 8001a0c:	47c8      	blx	r9
 8001a0e:	682b      	ldr	r3, [r5, #0]
 8001a10:	68da      	ldr	r2, [r3, #12]
 8001a12:	4639      	mov	r1, r7
 8001a14:	4628      	mov	r0, r5
 8001a16:	4790      	blx	r2
 8001a18:	b10e      	cbz	r6, 8001a1e <cmox_md_generateTag+0x172>
 8001a1a:	68a8      	ldr	r0, [r5, #8]
 8001a1c:	6030      	str	r0, [r6, #0]
 8001a1e:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8001a22:	b007      	add	sp, #28
 8001a24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001a28:	0800d87c 	.word	0x0800d87c
 8001a2c:	08001a4c 	.word	0x08001a4c
 8001a30:	20000178 	.word	0x20000178
 8001a34:	9310c55f 	.word	0x9310c55f
 8001a38:	12008504 	.word	0x12008504
 8001a3c:	7a0168fc 	.word	0x7a0168fc
 8001a40:	ff24f5c0 	.word	0xff24f5c0
 8001a44:	d433af24 	.word	0xd433af24
 8001a48:	8b69af26 	.word	0x8b69af26
 8001a4c:	0101b004 	.word	0x0101b004
 8001a50:	45011700 	.word	0x45011700

08001a54 <cmox_aesSmall_keySchedule>:
 8001a54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001a58:	f100 050c 	add.w	r5, r0, #12
 8001a5c:	2400      	movs	r4, #0
 8001a5e:	0892      	lsrs	r2, r2, #2
 8001a60:	4b3d      	ldr	r3, [pc, #244]	@ (8001b58 <cmox_aesSmall_keySchedule+0x104>)
 8001a62:	2000      	movs	r0, #0
 8001a64:	e005      	b.n	8001a72 <cmox_aesSmall_keySchedule+0x1e>
 8001a66:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 8001a6a:	ba36      	rev	r6, r6
 8001a6c:	f845 6020 	str.w	r6, [r5, r0, lsl #2]
 8001a70:	1c40      	adds	r0, r0, #1
 8001a72:	4290      	cmp	r0, r2
 8001a74:	d3f7      	bcc.n	8001a66 <cmox_aesSmall_keySchedule+0x12>
 8001a76:	eb05 0882 	add.w	r8, r5, r2, lsl #2
 8001a7a:	4f38      	ldr	r7, [pc, #224]	@ (8001b5c <cmox_aesSmall_keySchedule+0x108>)
 8001a7c:	f858 0c04 	ldr.w	r0, [r8, #-4]
 8001a80:	f8d5 c000 	ldr.w	ip, [r5]
 8001a84:	0406      	lsls	r6, r0, #16
 8001a86:	0201      	lsls	r1, r0, #8
 8001a88:	0e36      	lsrs	r6, r6, #24
 8001a8a:	0e09      	lsrs	r1, r1, #24
 8001a8c:	5dbe      	ldrb	r6, [r7, r6]
 8001a8e:	5c79      	ldrb	r1, [r7, r1]
 8001a90:	0436      	lsls	r6, r6, #16
 8001a92:	ea46 6601 	orr.w	r6, r6, r1, lsl #24
 8001a96:	b2c1      	uxtb	r1, r0
 8001a98:	0e00      	lsrs	r0, r0, #24
 8001a9a:	5c79      	ldrb	r1, [r7, r1]
 8001a9c:	ea46 2601 	orr.w	r6, r6, r1, lsl #8
 8001aa0:	5c39      	ldrb	r1, [r7, r0]
 8001aa2:	ea41 0006 	orr.w	r0, r1, r6
 8001aa6:	4e2e      	ldr	r6, [pc, #184]	@ (8001b60 <cmox_aesSmall_keySchedule+0x10c>)
 8001aa8:	ea80 010c 	eor.w	r1, r0, ip
 8001aac:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8001ab0:	4048      	eors	r0, r1
 8001ab2:	f845 0022 	str.w	r0, [r5, r2, lsl #2]
 8001ab6:	1c64      	adds	r4, r4, #1
 8001ab8:	2001      	movs	r0, #1
 8001aba:	1f2e      	subs	r6, r5, #4
 8001abc:	1881      	adds	r1, r0, r2
 8001abe:	f856 6021 	ldr.w	r6, [r6, r1, lsl #2]
 8001ac2:	f855 c020 	ldr.w	ip, [r5, r0, lsl #2]
 8001ac6:	ea8c 0606 	eor.w	r6, ip, r6
 8001aca:	1c40      	adds	r0, r0, #1
 8001acc:	f845 6021 	str.w	r6, [r5, r1, lsl #2]
 8001ad0:	2804      	cmp	r0, #4
 8001ad2:	d3f2      	bcc.n	8001aba <cmox_aesSmall_keySchedule+0x66>
 8001ad4:	2a04      	cmp	r2, #4
 8001ad6:	d004      	beq.n	8001ae2 <cmox_aesSmall_keySchedule+0x8e>
 8001ad8:	2a06      	cmp	r2, #6
 8001ada:	d00b      	beq.n	8001af4 <cmox_aesSmall_keySchedule+0xa0>
 8001adc:	2a08      	cmp	r2, #8
 8001ade:	d014      	beq.n	8001b0a <cmox_aesSmall_keySchedule+0xb6>
 8001ae0:	e037      	b.n	8001b52 <cmox_aesSmall_keySchedule+0xfe>
 8001ae2:	2c0a      	cmp	r4, #10
 8001ae4:	d204      	bcs.n	8001af0 <cmox_aesSmall_keySchedule+0x9c>
 8001ae6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001aea:	d001      	beq.n	8001af0 <cmox_aesSmall_keySchedule+0x9c>
 8001aec:	4645      	mov	r5, r8
 8001aee:	e7c2      	b.n	8001a76 <cmox_aesSmall_keySchedule+0x22>
 8001af0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001af4:	2c07      	cmp	r4, #7
 8001af6:	d8fb      	bhi.n	8001af0 <cmox_aesSmall_keySchedule+0x9c>
 8001af8:	6a6f      	ldr	r7, [r5, #36]	@ 0x24
 8001afa:	6928      	ldr	r0, [r5, #16]
 8001afc:	4047      	eors	r7, r0
 8001afe:	62af      	str	r7, [r5, #40]	@ 0x28
 8001b00:	6968      	ldr	r0, [r5, #20]
 8001b02:	ea80 0107 	eor.w	r1, r0, r7
 8001b06:	62e9      	str	r1, [r5, #44]	@ 0x2c
 8001b08:	e7ed      	b.n	8001ae6 <cmox_aesSmall_keySchedule+0x92>
 8001b0a:	2c07      	cmp	r4, #7
 8001b0c:	d2f0      	bcs.n	8001af0 <cmox_aesSmall_keySchedule+0x9c>
 8001b0e:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 8001b10:	6929      	ldr	r1, [r5, #16]
 8001b12:	0e06      	lsrs	r6, r0, #24
 8001b14:	f817 e006 	ldrb.w	lr, [r7, r6]
 8001b18:	0206      	lsls	r6, r0, #8
 8001b1a:	0e36      	lsrs	r6, r6, #24
 8001b1c:	5dbe      	ldrb	r6, [r7, r6]
 8001b1e:	0436      	lsls	r6, r6, #16
 8001b20:	ea46 6c0e 	orr.w	ip, r6, lr, lsl #24
 8001b24:	0406      	lsls	r6, r0, #16
 8001b26:	ea4f 6e16 	mov.w	lr, r6, lsr #24
 8001b2a:	b2c0      	uxtb	r0, r0
 8001b2c:	f817 600e 	ldrb.w	r6, [r7, lr]
 8001b30:	5c38      	ldrb	r0, [r7, r0]
 8001b32:	ea4c 2606 	orr.w	r6, ip, r6, lsl #8
 8001b36:	4330      	orrs	r0, r6
 8001b38:	4041      	eors	r1, r0
 8001b3a:	6329      	str	r1, [r5, #48]	@ 0x30
 8001b3c:	2005      	movs	r0, #5
 8001b3e:	eb05 0180 	add.w	r1, r5, r0, lsl #2
 8001b42:	69cf      	ldr	r7, [r1, #28]
 8001b44:	680e      	ldr	r6, [r1, #0]
 8001b46:	1c40      	adds	r0, r0, #1
 8001b48:	4077      	eors	r7, r6
 8001b4a:	2807      	cmp	r0, #7
 8001b4c:	620f      	str	r7, [r1, #32]
 8001b4e:	d9f6      	bls.n	8001b3e <cmox_aesSmall_keySchedule+0xea>
 8001b50:	e7c9      	b.n	8001ae6 <cmox_aesSmall_keySchedule+0x92>
 8001b52:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 8001b56:	e7c9      	b.n	8001aec <cmox_aesSmall_keySchedule+0x98>
 8001b58:	00010004 	.word	0x00010004
 8001b5c:	0800fd28 	.word	0x0800fd28
 8001b60:	0800d9b4 	.word	0x0800d9b4

08001b64 <__aeabi_memset>:
 8001b64:	b470      	push	{r4, r5, r6}
 8001b66:	0784      	lsls	r4, r0, #30
 8001b68:	d046      	beq.n	8001bf8 <__aeabi_memset+0x94>
 8001b6a:	1e4c      	subs	r4, r1, #1
 8001b6c:	2900      	cmp	r1, #0
 8001b6e:	d041      	beq.n	8001bf4 <__aeabi_memset+0x90>
 8001b70:	b2d5      	uxtb	r5, r2
 8001b72:	4603      	mov	r3, r0
 8001b74:	e002      	b.n	8001b7c <__aeabi_memset+0x18>
 8001b76:	1e61      	subs	r1, r4, #1
 8001b78:	b3e4      	cbz	r4, 8001bf4 <__aeabi_memset+0x90>
 8001b7a:	460c      	mov	r4, r1
 8001b7c:	f803 5b01 	strb.w	r5, [r3], #1
 8001b80:	0799      	lsls	r1, r3, #30
 8001b82:	d1f8      	bne.n	8001b76 <__aeabi_memset+0x12>
 8001b84:	2c03      	cmp	r4, #3
 8001b86:	d92e      	bls.n	8001be6 <__aeabi_memset+0x82>
 8001b88:	b2d5      	uxtb	r5, r2
 8001b8a:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 8001b8e:	2c0f      	cmp	r4, #15
 8001b90:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 8001b94:	d919      	bls.n	8001bca <__aeabi_memset+0x66>
 8001b96:	4626      	mov	r6, r4
 8001b98:	f103 0110 	add.w	r1, r3, #16
 8001b9c:	3e10      	subs	r6, #16
 8001b9e:	2e0f      	cmp	r6, #15
 8001ba0:	f841 5c10 	str.w	r5, [r1, #-16]
 8001ba4:	f841 5c0c 	str.w	r5, [r1, #-12]
 8001ba8:	f841 5c08 	str.w	r5, [r1, #-8]
 8001bac:	f841 5c04 	str.w	r5, [r1, #-4]
 8001bb0:	f101 0110 	add.w	r1, r1, #16
 8001bb4:	d8f2      	bhi.n	8001b9c <__aeabi_memset+0x38>
 8001bb6:	f1a4 0110 	sub.w	r1, r4, #16
 8001bba:	f021 010f 	bic.w	r1, r1, #15
 8001bbe:	f004 040f 	and.w	r4, r4, #15
 8001bc2:	3110      	adds	r1, #16
 8001bc4:	2c03      	cmp	r4, #3
 8001bc6:	440b      	add	r3, r1
 8001bc8:	d90d      	bls.n	8001be6 <__aeabi_memset+0x82>
 8001bca:	461e      	mov	r6, r3
 8001bcc:	4621      	mov	r1, r4
 8001bce:	3904      	subs	r1, #4
 8001bd0:	2903      	cmp	r1, #3
 8001bd2:	f846 5b04 	str.w	r5, [r6], #4
 8001bd6:	d8fa      	bhi.n	8001bce <__aeabi_memset+0x6a>
 8001bd8:	1f21      	subs	r1, r4, #4
 8001bda:	f021 0103 	bic.w	r1, r1, #3
 8001bde:	3104      	adds	r1, #4
 8001be0:	440b      	add	r3, r1
 8001be2:	f004 0403 	and.w	r4, r4, #3
 8001be6:	b12c      	cbz	r4, 8001bf4 <__aeabi_memset+0x90>
 8001be8:	b2d2      	uxtb	r2, r2
 8001bea:	441c      	add	r4, r3
 8001bec:	f803 2b01 	strb.w	r2, [r3], #1
 8001bf0:	42a3      	cmp	r3, r4
 8001bf2:	d1fb      	bne.n	8001bec <__aeabi_memset+0x88>
 8001bf4:	bc70      	pop	{r4, r5, r6}
 8001bf6:	4770      	bx	lr
 8001bf8:	460c      	mov	r4, r1
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	e7c2      	b.n	8001b84 <__aeabi_memset+0x20>
	...

08001c00 <memchr>:
 8001c00:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8001c04:	2a10      	cmp	r2, #16
 8001c06:	db2b      	blt.n	8001c60 <memchr+0x60>
 8001c08:	f010 0f07 	tst.w	r0, #7
 8001c0c:	d008      	beq.n	8001c20 <memchr+0x20>
 8001c0e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8001c12:	3a01      	subs	r2, #1
 8001c14:	428b      	cmp	r3, r1
 8001c16:	d02d      	beq.n	8001c74 <memchr+0x74>
 8001c18:	f010 0f07 	tst.w	r0, #7
 8001c1c:	b342      	cbz	r2, 8001c70 <memchr+0x70>
 8001c1e:	d1f6      	bne.n	8001c0e <memchr+0xe>
 8001c20:	b4f0      	push	{r4, r5, r6, r7}
 8001c22:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8001c26:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 8001c2a:	f022 0407 	bic.w	r4, r2, #7
 8001c2e:	f07f 0700 	mvns.w	r7, #0
 8001c32:	2300      	movs	r3, #0
 8001c34:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8001c38:	3c08      	subs	r4, #8
 8001c3a:	ea85 0501 	eor.w	r5, r5, r1
 8001c3e:	ea86 0601 	eor.w	r6, r6, r1
 8001c42:	fa85 f547 	uadd8	r5, r5, r7
 8001c46:	faa3 f587 	sel	r5, r3, r7
 8001c4a:	fa86 f647 	uadd8	r6, r6, r7
 8001c4e:	faa5 f687 	sel	r6, r5, r7
 8001c52:	b98e      	cbnz	r6, 8001c78 <memchr+0x78>
 8001c54:	d1ee      	bne.n	8001c34 <memchr+0x34>
 8001c56:	bcf0      	pop	{r4, r5, r6, r7}
 8001c58:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8001c5c:	f002 0207 	and.w	r2, r2, #7
 8001c60:	b132      	cbz	r2, 8001c70 <memchr+0x70>
 8001c62:	f810 3b01 	ldrb.w	r3, [r0], #1
 8001c66:	3a01      	subs	r2, #1
 8001c68:	ea83 0301 	eor.w	r3, r3, r1
 8001c6c:	b113      	cbz	r3, 8001c74 <memchr+0x74>
 8001c6e:	d1f8      	bne.n	8001c62 <memchr+0x62>
 8001c70:	2000      	movs	r0, #0
 8001c72:	4770      	bx	lr
 8001c74:	3801      	subs	r0, #1
 8001c76:	4770      	bx	lr
 8001c78:	2d00      	cmp	r5, #0
 8001c7a:	bf06      	itte	eq
 8001c7c:	4635      	moveq	r5, r6
 8001c7e:	3803      	subeq	r0, #3
 8001c80:	3807      	subne	r0, #7
 8001c82:	f015 0f01 	tst.w	r5, #1
 8001c86:	d107      	bne.n	8001c98 <memchr+0x98>
 8001c88:	3001      	adds	r0, #1
 8001c8a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 8001c8e:	bf02      	ittt	eq
 8001c90:	3001      	addeq	r0, #1
 8001c92:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8001c96:	3001      	addeq	r0, #1
 8001c98:	bcf0      	pop	{r4, r5, r6, r7}
 8001c9a:	3801      	subs	r0, #1
 8001c9c:	4770      	bx	lr
 8001c9e:	bf00      	nop

08001ca0 <__aeabi_uldivmod>:
 8001ca0:	b953      	cbnz	r3, 8001cb8 <__aeabi_uldivmod+0x18>
 8001ca2:	b94a      	cbnz	r2, 8001cb8 <__aeabi_uldivmod+0x18>
 8001ca4:	2900      	cmp	r1, #0
 8001ca6:	bf08      	it	eq
 8001ca8:	2800      	cmpeq	r0, #0
 8001caa:	bf1c      	itt	ne
 8001cac:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8001cb0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8001cb4:	f000 b96a 	b.w	8001f8c <__aeabi_idiv0>
 8001cb8:	f1ad 0c08 	sub.w	ip, sp, #8
 8001cbc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8001cc0:	f000 f806 	bl	8001cd0 <__udivmoddi4>
 8001cc4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001cc8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001ccc:	b004      	add	sp, #16
 8001cce:	4770      	bx	lr

08001cd0 <__udivmoddi4>:
 8001cd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001cd4:	9d08      	ldr	r5, [sp, #32]
 8001cd6:	460c      	mov	r4, r1
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d14e      	bne.n	8001d7a <__udivmoddi4+0xaa>
 8001cdc:	4694      	mov	ip, r2
 8001cde:	458c      	cmp	ip, r1
 8001ce0:	4686      	mov	lr, r0
 8001ce2:	fab2 f282 	clz	r2, r2
 8001ce6:	d962      	bls.n	8001dae <__udivmoddi4+0xde>
 8001ce8:	b14a      	cbz	r2, 8001cfe <__udivmoddi4+0x2e>
 8001cea:	f1c2 0320 	rsb	r3, r2, #32
 8001cee:	4091      	lsls	r1, r2
 8001cf0:	fa20 f303 	lsr.w	r3, r0, r3
 8001cf4:	fa0c fc02 	lsl.w	ip, ip, r2
 8001cf8:	4319      	orrs	r1, r3
 8001cfa:	fa00 fe02 	lsl.w	lr, r0, r2
 8001cfe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001d02:	fa1f f68c 	uxth.w	r6, ip
 8001d06:	fbb1 f4f7 	udiv	r4, r1, r7
 8001d0a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8001d0e:	fb07 1114 	mls	r1, r7, r4, r1
 8001d12:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001d16:	fb04 f106 	mul.w	r1, r4, r6
 8001d1a:	4299      	cmp	r1, r3
 8001d1c:	d90a      	bls.n	8001d34 <__udivmoddi4+0x64>
 8001d1e:	eb1c 0303 	adds.w	r3, ip, r3
 8001d22:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8001d26:	f080 8112 	bcs.w	8001f4e <__udivmoddi4+0x27e>
 8001d2a:	4299      	cmp	r1, r3
 8001d2c:	f240 810f 	bls.w	8001f4e <__udivmoddi4+0x27e>
 8001d30:	3c02      	subs	r4, #2
 8001d32:	4463      	add	r3, ip
 8001d34:	1a59      	subs	r1, r3, r1
 8001d36:	fa1f f38e 	uxth.w	r3, lr
 8001d3a:	fbb1 f0f7 	udiv	r0, r1, r7
 8001d3e:	fb07 1110 	mls	r1, r7, r0, r1
 8001d42:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001d46:	fb00 f606 	mul.w	r6, r0, r6
 8001d4a:	429e      	cmp	r6, r3
 8001d4c:	d90a      	bls.n	8001d64 <__udivmoddi4+0x94>
 8001d4e:	eb1c 0303 	adds.w	r3, ip, r3
 8001d52:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8001d56:	f080 80fc 	bcs.w	8001f52 <__udivmoddi4+0x282>
 8001d5a:	429e      	cmp	r6, r3
 8001d5c:	f240 80f9 	bls.w	8001f52 <__udivmoddi4+0x282>
 8001d60:	4463      	add	r3, ip
 8001d62:	3802      	subs	r0, #2
 8001d64:	1b9b      	subs	r3, r3, r6
 8001d66:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8001d6a:	2100      	movs	r1, #0
 8001d6c:	b11d      	cbz	r5, 8001d76 <__udivmoddi4+0xa6>
 8001d6e:	40d3      	lsrs	r3, r2
 8001d70:	2200      	movs	r2, #0
 8001d72:	e9c5 3200 	strd	r3, r2, [r5]
 8001d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001d7a:	428b      	cmp	r3, r1
 8001d7c:	d905      	bls.n	8001d8a <__udivmoddi4+0xba>
 8001d7e:	b10d      	cbz	r5, 8001d84 <__udivmoddi4+0xb4>
 8001d80:	e9c5 0100 	strd	r0, r1, [r5]
 8001d84:	2100      	movs	r1, #0
 8001d86:	4608      	mov	r0, r1
 8001d88:	e7f5      	b.n	8001d76 <__udivmoddi4+0xa6>
 8001d8a:	fab3 f183 	clz	r1, r3
 8001d8e:	2900      	cmp	r1, #0
 8001d90:	d146      	bne.n	8001e20 <__udivmoddi4+0x150>
 8001d92:	42a3      	cmp	r3, r4
 8001d94:	d302      	bcc.n	8001d9c <__udivmoddi4+0xcc>
 8001d96:	4290      	cmp	r0, r2
 8001d98:	f0c0 80f0 	bcc.w	8001f7c <__udivmoddi4+0x2ac>
 8001d9c:	1a86      	subs	r6, r0, r2
 8001d9e:	eb64 0303 	sbc.w	r3, r4, r3
 8001da2:	2001      	movs	r0, #1
 8001da4:	2d00      	cmp	r5, #0
 8001da6:	d0e6      	beq.n	8001d76 <__udivmoddi4+0xa6>
 8001da8:	e9c5 6300 	strd	r6, r3, [r5]
 8001dac:	e7e3      	b.n	8001d76 <__udivmoddi4+0xa6>
 8001dae:	2a00      	cmp	r2, #0
 8001db0:	f040 8090 	bne.w	8001ed4 <__udivmoddi4+0x204>
 8001db4:	eba1 040c 	sub.w	r4, r1, ip
 8001db8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8001dbc:	fa1f f78c 	uxth.w	r7, ip
 8001dc0:	2101      	movs	r1, #1
 8001dc2:	fbb4 f6f8 	udiv	r6, r4, r8
 8001dc6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8001dca:	fb08 4416 	mls	r4, r8, r6, r4
 8001dce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8001dd2:	fb07 f006 	mul.w	r0, r7, r6
 8001dd6:	4298      	cmp	r0, r3
 8001dd8:	d908      	bls.n	8001dec <__udivmoddi4+0x11c>
 8001dda:	eb1c 0303 	adds.w	r3, ip, r3
 8001dde:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8001de2:	d202      	bcs.n	8001dea <__udivmoddi4+0x11a>
 8001de4:	4298      	cmp	r0, r3
 8001de6:	f200 80cd 	bhi.w	8001f84 <__udivmoddi4+0x2b4>
 8001dea:	4626      	mov	r6, r4
 8001dec:	1a1c      	subs	r4, r3, r0
 8001dee:	fa1f f38e 	uxth.w	r3, lr
 8001df2:	fbb4 f0f8 	udiv	r0, r4, r8
 8001df6:	fb08 4410 	mls	r4, r8, r0, r4
 8001dfa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8001dfe:	fb00 f707 	mul.w	r7, r0, r7
 8001e02:	429f      	cmp	r7, r3
 8001e04:	d908      	bls.n	8001e18 <__udivmoddi4+0x148>
 8001e06:	eb1c 0303 	adds.w	r3, ip, r3
 8001e0a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8001e0e:	d202      	bcs.n	8001e16 <__udivmoddi4+0x146>
 8001e10:	429f      	cmp	r7, r3
 8001e12:	f200 80b0 	bhi.w	8001f76 <__udivmoddi4+0x2a6>
 8001e16:	4620      	mov	r0, r4
 8001e18:	1bdb      	subs	r3, r3, r7
 8001e1a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8001e1e:	e7a5      	b.n	8001d6c <__udivmoddi4+0x9c>
 8001e20:	f1c1 0620 	rsb	r6, r1, #32
 8001e24:	408b      	lsls	r3, r1
 8001e26:	fa22 f706 	lsr.w	r7, r2, r6
 8001e2a:	431f      	orrs	r7, r3
 8001e2c:	fa20 fc06 	lsr.w	ip, r0, r6
 8001e30:	fa04 f301 	lsl.w	r3, r4, r1
 8001e34:	ea43 030c 	orr.w	r3, r3, ip
 8001e38:	40f4      	lsrs	r4, r6
 8001e3a:	fa00 f801 	lsl.w	r8, r0, r1
 8001e3e:	0c38      	lsrs	r0, r7, #16
 8001e40:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8001e44:	fbb4 fef0 	udiv	lr, r4, r0
 8001e48:	fa1f fc87 	uxth.w	ip, r7
 8001e4c:	fb00 441e 	mls	r4, r0, lr, r4
 8001e50:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8001e54:	fb0e f90c 	mul.w	r9, lr, ip
 8001e58:	45a1      	cmp	r9, r4
 8001e5a:	fa02 f201 	lsl.w	r2, r2, r1
 8001e5e:	d90a      	bls.n	8001e76 <__udivmoddi4+0x1a6>
 8001e60:	193c      	adds	r4, r7, r4
 8001e62:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8001e66:	f080 8084 	bcs.w	8001f72 <__udivmoddi4+0x2a2>
 8001e6a:	45a1      	cmp	r9, r4
 8001e6c:	f240 8081 	bls.w	8001f72 <__udivmoddi4+0x2a2>
 8001e70:	f1ae 0e02 	sub.w	lr, lr, #2
 8001e74:	443c      	add	r4, r7
 8001e76:	eba4 0409 	sub.w	r4, r4, r9
 8001e7a:	fa1f f983 	uxth.w	r9, r3
 8001e7e:	fbb4 f3f0 	udiv	r3, r4, r0
 8001e82:	fb00 4413 	mls	r4, r0, r3, r4
 8001e86:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8001e8a:	fb03 fc0c 	mul.w	ip, r3, ip
 8001e8e:	45a4      	cmp	ip, r4
 8001e90:	d907      	bls.n	8001ea2 <__udivmoddi4+0x1d2>
 8001e92:	193c      	adds	r4, r7, r4
 8001e94:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8001e98:	d267      	bcs.n	8001f6a <__udivmoddi4+0x29a>
 8001e9a:	45a4      	cmp	ip, r4
 8001e9c:	d965      	bls.n	8001f6a <__udivmoddi4+0x29a>
 8001e9e:	3b02      	subs	r3, #2
 8001ea0:	443c      	add	r4, r7
 8001ea2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8001ea6:	fba0 9302 	umull	r9, r3, r0, r2
 8001eaa:	eba4 040c 	sub.w	r4, r4, ip
 8001eae:	429c      	cmp	r4, r3
 8001eb0:	46ce      	mov	lr, r9
 8001eb2:	469c      	mov	ip, r3
 8001eb4:	d351      	bcc.n	8001f5a <__udivmoddi4+0x28a>
 8001eb6:	d04e      	beq.n	8001f56 <__udivmoddi4+0x286>
 8001eb8:	b155      	cbz	r5, 8001ed0 <__udivmoddi4+0x200>
 8001eba:	ebb8 030e 	subs.w	r3, r8, lr
 8001ebe:	eb64 040c 	sbc.w	r4, r4, ip
 8001ec2:	fa04 f606 	lsl.w	r6, r4, r6
 8001ec6:	40cb      	lsrs	r3, r1
 8001ec8:	431e      	orrs	r6, r3
 8001eca:	40cc      	lsrs	r4, r1
 8001ecc:	e9c5 6400 	strd	r6, r4, [r5]
 8001ed0:	2100      	movs	r1, #0
 8001ed2:	e750      	b.n	8001d76 <__udivmoddi4+0xa6>
 8001ed4:	f1c2 0320 	rsb	r3, r2, #32
 8001ed8:	fa20 f103 	lsr.w	r1, r0, r3
 8001edc:	fa0c fc02 	lsl.w	ip, ip, r2
 8001ee0:	fa24 f303 	lsr.w	r3, r4, r3
 8001ee4:	4094      	lsls	r4, r2
 8001ee6:	430c      	orrs	r4, r1
 8001ee8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8001eec:	fa00 fe02 	lsl.w	lr, r0, r2
 8001ef0:	fa1f f78c 	uxth.w	r7, ip
 8001ef4:	fbb3 f0f8 	udiv	r0, r3, r8
 8001ef8:	fb08 3110 	mls	r1, r8, r0, r3
 8001efc:	0c23      	lsrs	r3, r4, #16
 8001efe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001f02:	fb00 f107 	mul.w	r1, r0, r7
 8001f06:	4299      	cmp	r1, r3
 8001f08:	d908      	bls.n	8001f1c <__udivmoddi4+0x24c>
 8001f0a:	eb1c 0303 	adds.w	r3, ip, r3
 8001f0e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8001f12:	d22c      	bcs.n	8001f6e <__udivmoddi4+0x29e>
 8001f14:	4299      	cmp	r1, r3
 8001f16:	d92a      	bls.n	8001f6e <__udivmoddi4+0x29e>
 8001f18:	3802      	subs	r0, #2
 8001f1a:	4463      	add	r3, ip
 8001f1c:	1a5b      	subs	r3, r3, r1
 8001f1e:	b2a4      	uxth	r4, r4
 8001f20:	fbb3 f1f8 	udiv	r1, r3, r8
 8001f24:	fb08 3311 	mls	r3, r8, r1, r3
 8001f28:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8001f2c:	fb01 f307 	mul.w	r3, r1, r7
 8001f30:	42a3      	cmp	r3, r4
 8001f32:	d908      	bls.n	8001f46 <__udivmoddi4+0x276>
 8001f34:	eb1c 0404 	adds.w	r4, ip, r4
 8001f38:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8001f3c:	d213      	bcs.n	8001f66 <__udivmoddi4+0x296>
 8001f3e:	42a3      	cmp	r3, r4
 8001f40:	d911      	bls.n	8001f66 <__udivmoddi4+0x296>
 8001f42:	3902      	subs	r1, #2
 8001f44:	4464      	add	r4, ip
 8001f46:	1ae4      	subs	r4, r4, r3
 8001f48:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8001f4c:	e739      	b.n	8001dc2 <__udivmoddi4+0xf2>
 8001f4e:	4604      	mov	r4, r0
 8001f50:	e6f0      	b.n	8001d34 <__udivmoddi4+0x64>
 8001f52:	4608      	mov	r0, r1
 8001f54:	e706      	b.n	8001d64 <__udivmoddi4+0x94>
 8001f56:	45c8      	cmp	r8, r9
 8001f58:	d2ae      	bcs.n	8001eb8 <__udivmoddi4+0x1e8>
 8001f5a:	ebb9 0e02 	subs.w	lr, r9, r2
 8001f5e:	eb63 0c07 	sbc.w	ip, r3, r7
 8001f62:	3801      	subs	r0, #1
 8001f64:	e7a8      	b.n	8001eb8 <__udivmoddi4+0x1e8>
 8001f66:	4631      	mov	r1, r6
 8001f68:	e7ed      	b.n	8001f46 <__udivmoddi4+0x276>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	e799      	b.n	8001ea2 <__udivmoddi4+0x1d2>
 8001f6e:	4630      	mov	r0, r6
 8001f70:	e7d4      	b.n	8001f1c <__udivmoddi4+0x24c>
 8001f72:	46d6      	mov	lr, sl
 8001f74:	e77f      	b.n	8001e76 <__udivmoddi4+0x1a6>
 8001f76:	4463      	add	r3, ip
 8001f78:	3802      	subs	r0, #2
 8001f7a:	e74d      	b.n	8001e18 <__udivmoddi4+0x148>
 8001f7c:	4606      	mov	r6, r0
 8001f7e:	4623      	mov	r3, r4
 8001f80:	4608      	mov	r0, r1
 8001f82:	e70f      	b.n	8001da4 <__udivmoddi4+0xd4>
 8001f84:	3e02      	subs	r6, #2
 8001f86:	4463      	add	r3, ip
 8001f88:	e730      	b.n	8001dec <__udivmoddi4+0x11c>
 8001f8a:	bf00      	nop

08001f8c <__aeabi_idiv0>:
 8001f8c:	4770      	bx	lr
 8001f8e:	bf00      	nop

08001f90 <I2C_Scan>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void I2C_Scan() {
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b082      	sub	sp, #8
 8001f94:	af00      	add	r7, sp, #0
  printf("Scanning I2C bus...\n");
 8001f96:	4813      	ldr	r0, [pc, #76]	@ (8001fe4 <I2C_Scan+0x54>)
 8001f98:	f00a fb98 	bl	800c6cc <puts>

  for (uint8_t i = 1; i < 128; i++) {  // I2C addresses range from 1 to 127
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	71fb      	strb	r3, [r7, #7]
 8001fa0:	e014      	b.n	8001fcc <I2C_Scan+0x3c>
    if (HAL_I2C_IsDeviceReady(&hi2c1, (i << 1), 1, HAL_MAX_DELAY) == HAL_OK) {
 8001fa2:	79fb      	ldrb	r3, [r7, #7]
 8001fa4:	b29b      	uxth	r3, r3
 8001fa6:	005b      	lsls	r3, r3, #1
 8001fa8:	b299      	uxth	r1, r3
 8001faa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001fae:	2201      	movs	r2, #1
 8001fb0:	480d      	ldr	r0, [pc, #52]	@ (8001fe8 <I2C_Scan+0x58>)
 8001fb2:	f001 fc7b 	bl	80038ac <HAL_I2C_IsDeviceReady>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d104      	bne.n	8001fc6 <I2C_Scan+0x36>
      DEBUG_PRINT("Device found at 0x%02X\n", i);
 8001fbc:	79fb      	ldrb	r3, [r7, #7]
 8001fbe:	4619      	mov	r1, r3
 8001fc0:	480a      	ldr	r0, [pc, #40]	@ (8001fec <I2C_Scan+0x5c>)
 8001fc2:	f00a fb13 	bl	800c5ec <iprintf>
  for (uint8_t i = 1; i < 128; i++) {  // I2C addresses range from 1 to 127
 8001fc6:	79fb      	ldrb	r3, [r7, #7]
 8001fc8:	3301      	adds	r3, #1
 8001fca:	71fb      	strb	r3, [r7, #7]
 8001fcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	dae6      	bge.n	8001fa2 <I2C_Scan+0x12>
    }
  }

  printf("Scan complete.\n");
 8001fd4:	4806      	ldr	r0, [pc, #24]	@ (8001ff0 <I2C_Scan+0x60>)
 8001fd6:	f00a fb79 	bl	800c6cc <puts>
}
 8001fda:	bf00      	nop
 8001fdc:	3708      	adds	r7, #8
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}
 8001fe2:	bf00      	nop
 8001fe4:	0800d458 	.word	0x0800d458
 8001fe8:	20000184 	.word	0x20000184
 8001fec:	0800d46c 	.word	0x0800d46c
 8001ff0:	0800d484 	.word	0x0800d484

08001ff4 <CDC_recieveCALLBACK>:

void CDC_recieveCALLBACK(uint8_t *buf, uint32_t len) {
 8001ff4:	b5b0      	push	{r4, r5, r7, lr}
 8001ff6:	b09e      	sub	sp, #120	@ 0x78
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
 8001ffc:	6039      	str	r1, [r7, #0]
  uint8_t hwinfo[33] = {
 8001ffe:	4b73      	ldr	r3, [pc, #460]	@ (80021cc <CDC_recieveCALLBACK+0x1d8>)
 8002000:	f107 0448 	add.w	r4, r7, #72	@ 0x48
 8002004:	461d      	mov	r5, r3
 8002006:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002008:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800200a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800200c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800200e:	682b      	ldr	r3, [r5, #0]
 8002010:	7023      	strb	r3, [r4, #0]
      0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
  };
  DEBUG_PRINT("Checking usb\n");
 8002012:	486f      	ldr	r0, [pc, #444]	@ (80021d0 <CDC_recieveCALLBACK+0x1dc>)
 8002014:	f00a fb5a 	bl	800c6cc <puts>
  printArray("Input data", buf, sizeof(buf));
 8002018:	2204      	movs	r2, #4
 800201a:	6879      	ldr	r1, [r7, #4]
 800201c:	486d      	ldr	r0, [pc, #436]	@ (80021d4 <CDC_recieveCALLBACK+0x1e0>)
 800201e:	f00a f99f 	bl	800c360 <printArray>
  if (buf[0] == 0) {
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	781b      	ldrb	r3, [r3, #0]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d12b      	bne.n	8002082 <CDC_recieveCALLBACK+0x8e>
    // Command 0: Check device status
    MY_FLASH_ReadN(BrandNew_address, &Brand_new, 1, DATA_TYPE_8);
 800202a:	2300      	movs	r3, #0
 800202c:	2201      	movs	r2, #1
 800202e:	496a      	ldr	r1, [pc, #424]	@ (80021d8 <CDC_recieveCALLBACK+0x1e4>)
 8002030:	2000      	movs	r0, #0
 8002032:	f005 ffcf 	bl	8007fd4 <MY_FLASH_ReadN>
    if (Brand_new == 0) {
 8002036:	4b68      	ldr	r3, [pc, #416]	@ (80021d8 <CDC_recieveCALLBACK+0x1e4>)
 8002038:	781b      	ldrb	r3, [r3, #0]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d109      	bne.n	8002052 <CDC_recieveCALLBACK+0x5e>
      hwinfo[0] = 2; // Brand new device status
 800203e:	2302      	movs	r3, #2
 8002040:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
      CDC_Transmit_FS(hwinfo, 33); // Transmit status information
 8002044:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002048:	2121      	movs	r1, #33	@ 0x21
 800204a:	4618      	mov	r0, r3
 800204c:	f008 fbfe 	bl	800a84c <CDC_Transmit_FS>
      printArray("Generated key ", computed_hash, sizeof(computed_hash));
      // Transmit the computed hash
      CDC_Transmit_FS(computed_hash, 32);
    }
  }
}
 8002050:	e0b8      	b.n	80021c4 <CDC_recieveCALLBACK+0x1d0>
    } else if (DeviceState) {
 8002052:	4b62      	ldr	r3, [pc, #392]	@ (80021dc <CDC_recieveCALLBACK+0x1e8>)
 8002054:	781b      	ldrb	r3, [r3, #0]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d009      	beq.n	800206e <CDC_recieveCALLBACK+0x7a>
      hwinfo[0] = 1; // Device unlocked status
 800205a:	2301      	movs	r3, #1
 800205c:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
      CDC_Transmit_FS(hwinfo, 33); // Transmit status information
 8002060:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002064:	2121      	movs	r1, #33	@ 0x21
 8002066:	4618      	mov	r0, r3
 8002068:	f008 fbf0 	bl	800a84c <CDC_Transmit_FS>
}
 800206c:	e0aa      	b.n	80021c4 <CDC_recieveCALLBACK+0x1d0>
      hwinfo[0] = 0; // Device locked status
 800206e:	2300      	movs	r3, #0
 8002070:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
      CDC_Transmit_FS(hwinfo, 33); // Transmit status information
 8002074:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002078:	2121      	movs	r1, #33	@ 0x21
 800207a:	4618      	mov	r0, r3
 800207c:	f008 fbe6 	bl	800a84c <CDC_Transmit_FS>
}
 8002080:	e0a0      	b.n	80021c4 <CDC_recieveCALLBACK+0x1d0>
  } else if (buf[0] == 1) {
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	781b      	ldrb	r3, [r3, #0]
 8002086:	2b01      	cmp	r3, #1
 8002088:	d11d      	bne.n	80020c6 <CDC_recieveCALLBACK+0xd2>
    if (DeviceState) {
 800208a:	4b54      	ldr	r3, [pc, #336]	@ (80021dc <CDC_recieveCALLBACK+0x1e8>)
 800208c:	781b      	ldrb	r3, [r3, #0]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d00f      	beq.n	80020b2 <CDC_recieveCALLBACK+0xbe>
      hwinfo[0] = 0; // Lock device
 8002092:	2300      	movs	r3, #0
 8002094:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
      CDC_Transmit_FS(hwinfo, 33); // Transmit status information
 8002098:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800209c:	2121      	movs	r1, #33	@ 0x21
 800209e:	4618      	mov	r0, r3
 80020a0:	f008 fbd4 	bl	800a84c <CDC_Transmit_FS>
      DeviceState = 0; // Set device state to locked
 80020a4:	4b4d      	ldr	r3, [pc, #308]	@ (80021dc <CDC_recieveCALLBACK+0x1e8>)
 80020a6:	2200      	movs	r2, #0
 80020a8:	701a      	strb	r2, [r3, #0]
      TimerState = 1; // Start timer
 80020aa:	4b4d      	ldr	r3, [pc, #308]	@ (80021e0 <CDC_recieveCALLBACK+0x1ec>)
 80020ac:	2201      	movs	r2, #1
 80020ae:	701a      	strb	r2, [r3, #0]
}
 80020b0:	e088      	b.n	80021c4 <CDC_recieveCALLBACK+0x1d0>
      hwinfo[0] = 1; // device is a lock
 80020b2:	2301      	movs	r3, #1
 80020b4:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
      CDC_Transmit_FS(hwinfo, 33); // Transmit status information
 80020b8:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80020bc:	2121      	movs	r1, #33	@ 0x21
 80020be:	4618      	mov	r0, r3
 80020c0:	f008 fbc4 	bl	800a84c <CDC_Transmit_FS>
}
 80020c4:	e07e      	b.n	80021c4 <CDC_recieveCALLBACK+0x1d0>
  } else if (buf[0] == 2) {
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	781b      	ldrb	r3, [r3, #0]
 80020ca:	2b02      	cmp	r3, #2
 80020cc:	d17a      	bne.n	80021c4 <CDC_recieveCALLBACK+0x1d0>
    if (DeviceState) {
 80020ce:	4b43      	ldr	r3, [pc, #268]	@ (80021dc <CDC_recieveCALLBACK+0x1e8>)
 80020d0:	781b      	ldrb	r3, [r3, #0]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d076      	beq.n	80021c4 <CDC_recieveCALLBACK+0x1d0>
      uint8_t Key[9] = { buf[1], buf[2], buf[3], buf[4], buf[5], buf[6], buf[7], buf[8], buf[9] };
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	785b      	ldrb	r3, [r3, #1]
 80020da:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	789b      	ldrb	r3, [r3, #2]
 80020e2:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	78db      	ldrb	r3, [r3, #3]
 80020ea:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	791b      	ldrb	r3, [r3, #4]
 80020f2:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	795b      	ldrb	r3, [r3, #5]
 80020fa:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	799b      	ldrb	r3, [r3, #6]
 8002102:	f887 3041 	strb.w	r3, [r7, #65]	@ 0x41
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	79db      	ldrb	r3, [r3, #7]
 800210a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	7a1b      	ldrb	r3, [r3, #8]
 8002112:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	7a5b      	ldrb	r3, [r3, #9]
 800211a:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
      printArray("Input ID", Key, sizeof(Key));
 800211e:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8002122:	2209      	movs	r2, #9
 8002124:	4619      	mov	r1, r3
 8002126:	482f      	ldr	r0, [pc, #188]	@ (80021e4 <CDC_recieveCALLBACK+0x1f0>)
 8002128:	f00a f91a 	bl	800c360 <printArray>
      printArray("Current master key", CurrentMasterKey, sizeof(CurrentMasterKey));
 800212c:	2210      	movs	r2, #16
 800212e:	492e      	ldr	r1, [pc, #184]	@ (80021e8 <CDC_recieveCALLBACK+0x1f4>)
 8002130:	482e      	ldr	r0, [pc, #184]	@ (80021ec <CDC_recieveCALLBACK+0x1f8>)
 8002132:	f00a f915 	bl	800c360 <printArray>
      uint32_t carry = 0;
 8002136:	2300      	movs	r3, #0
 8002138:	677b      	str	r3, [r7, #116]	@ 0x74
      for (int i = 0; i < 16; i++) {
 800213a:	2300      	movs	r3, #0
 800213c:	673b      	str	r3, [r7, #112]	@ 0x70
 800213e:	e022      	b.n	8002186 <CDC_recieveCALLBACK+0x192>
        uint32_t sum = CurrentMasterKey[i] + (i < 9 ? Key[i] : 0) + carry;
 8002140:	4a29      	ldr	r2, [pc, #164]	@ (80021e8 <CDC_recieveCALLBACK+0x1f4>)
 8002142:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002144:	4413      	add	r3, r2
 8002146:	781b      	ldrb	r3, [r3, #0]
 8002148:	4619      	mov	r1, r3
 800214a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800214c:	2b08      	cmp	r3, #8
 800214e:	dc05      	bgt.n	800215c <CDC_recieveCALLBACK+0x168>
 8002150:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8002154:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002156:	4413      	add	r3, r2
 8002158:	781b      	ldrb	r3, [r3, #0]
 800215a:	e000      	b.n	800215e <CDC_recieveCALLBACK+0x16a>
 800215c:	2300      	movs	r3, #0
 800215e:	440b      	add	r3, r1
 8002160:	461a      	mov	r2, r3
 8002162:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002164:	4413      	add	r3, r2
 8002166:	66fb      	str	r3, [r7, #108]	@ 0x6c
        result[i] = sum & 0xFF;
 8002168:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800216a:	b2d9      	uxtb	r1, r3
 800216c:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8002170:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002172:	4413      	add	r3, r2
 8002174:	460a      	mov	r2, r1
 8002176:	701a      	strb	r2, [r3, #0]
        carry = (sum >> 8) & 0xFF;
 8002178:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800217a:	0a1b      	lsrs	r3, r3, #8
 800217c:	b2db      	uxtb	r3, r3
 800217e:	677b      	str	r3, [r7, #116]	@ 0x74
      for (int i = 0; i < 16; i++) {
 8002180:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002182:	3301      	adds	r3, #1
 8002184:	673b      	str	r3, [r7, #112]	@ 0x70
 8002186:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002188:	2b0f      	cmp	r3, #15
 800218a:	ddd9      	ble.n	8002140 <CDC_recieveCALLBACK+0x14c>
      printArray("Addition result of Masterkey + ID ", result, sizeof(result));
 800218c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002190:	2210      	movs	r2, #16
 8002192:	4619      	mov	r1, r3
 8002194:	4816      	ldr	r0, [pc, #88]	@ (80021f0 <CDC_recieveCALLBACK+0x1fc>)
 8002196:	f00a f8e3 	bl	800c360 <printArray>
      sha256(result, computed_hash, sizeof(result));
 800219a:	f107 010c 	add.w	r1, r7, #12
 800219e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80021a2:	2210      	movs	r2, #16
 80021a4:	4618      	mov	r0, r3
 80021a6:	f009 f865 	bl	800b274 <sha256>
      printArray("Generated key ", computed_hash, sizeof(computed_hash));
 80021aa:	f107 030c 	add.w	r3, r7, #12
 80021ae:	2220      	movs	r2, #32
 80021b0:	4619      	mov	r1, r3
 80021b2:	4810      	ldr	r0, [pc, #64]	@ (80021f4 <CDC_recieveCALLBACK+0x200>)
 80021b4:	f00a f8d4 	bl	800c360 <printArray>
      CDC_Transmit_FS(computed_hash, 32);
 80021b8:	f107 030c 	add.w	r3, r7, #12
 80021bc:	2120      	movs	r1, #32
 80021be:	4618      	mov	r0, r3
 80021c0:	f008 fb44 	bl	800a84c <CDC_Transmit_FS>
}
 80021c4:	bf00      	nop
 80021c6:	3778      	adds	r7, #120	@ 0x78
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bdb0      	pop	{r4, r5, r7, pc}
 80021cc:	0800d504 	.word	0x0800d504
 80021d0:	0800d494 	.word	0x0800d494
 80021d4:	0800d4a4 	.word	0x0800d4a4
 80021d8:	20000230 	.word	0x20000230
 80021dc:	200002ac 	.word	0x200002ac
 80021e0:	200002ab 	.word	0x200002ab
 80021e4:	0800d4b0 	.word	0x0800d4b0
 80021e8:	20000280 	.word	0x20000280
 80021ec:	0800d4bc 	.word	0x0800d4bc
 80021f0:	0800d4d0 	.word	0x0800d4d0
 80021f4:	0800d4f4 	.word	0x0800d4f4

080021f8 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80021fc:	f000 fba2 	bl	8002944 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002200:	f000 f844 	bl	800228c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002204:	f000 f94e 	bl	80024a4 <MX_GPIO_Init>
  MX_I2C1_Init();
 8002208:	f000 f8bc 	bl	8002384 <MX_I2C1_Init>
  MX_RNG_Init();
 800220c:	f000 f8e8 	bl	80023e0 <MX_RNG_Init>
  MX_TIM2_Init();
 8002210:	f000 f8fa 	bl	8002408 <MX_TIM2_Init>
  MX_USB_DEVICE_Init();
 8002214:	f008 fa56 	bl	800a6c4 <MX_USB_DEVICE_Init>
  MX_CRC_Init();
 8002218:	f000 f8a0 	bl	800235c <MX_CRC_Init>
  /* USER CODE BEGIN 2 */
  DEBUG_PRINT("Power up...!\n");
 800221c:	4817      	ldr	r0, [pc, #92]	@ (800227c <main+0x84>)
 800221e:	f00a fa55 	bl	800c6cc <puts>
  MY_FLASH_SetSectorAddrs(sector_name, sector_base_address);
 8002222:	4917      	ldr	r1, [pc, #92]	@ (8002280 <main+0x88>)
 8002224:	200b      	movs	r0, #11
 8002226:	f005 fe45 	bl	8007eb4 <MY_FLASH_SetSectorAddrs>
  ssd1306_Init();
 800222a:	f005 ffc1 	bl	80081b0 <ssd1306_Init>
  HAL_TIM_Base_Start_IT(&htim2);
 800222e:	4815      	ldr	r0, [pc, #84]	@ (8002284 <main+0x8c>)
 8002230:	f003 fec2 	bl	8005fb8 <HAL_TIM_Base_Start_IT>
  //write_flash(BrandNew_address, &Brand_new, 1);
  //write_flash(Nusers_address, &user_num, 1);
  //write_flash(WrongPassword_address, &WrongPassword, 1);
  I2C_Scan();
 8002234:	f7ff feac 	bl	8001f90 <I2C_Scan>
  Startup();
 8002238:	f009 f87e 	bl	800b338 <Startup>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    if(state == Lock)LockDevice();
 800223c:	4b12      	ldr	r3, [pc, #72]	@ (8002288 <main+0x90>)
 800223e:	781b      	ldrb	r3, [r3, #0]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d101      	bne.n	8002248 <main+0x50>
 8002244:	f009 fc5e 	bl	800bb04 <LockDevice>
    if(state == Reset)ResetFactory();
 8002248:	4b0f      	ldr	r3, [pc, #60]	@ (8002288 <main+0x90>)
 800224a:	781b      	ldrb	r3, [r3, #0]
 800224c:	2b01      	cmp	r3, #1
 800224e:	d101      	bne.n	8002254 <main+0x5c>
 8002250:	f009 fe60 	bl	800bf14 <ResetFactory>
    if(state == Timeout)TimeoutMenu();
 8002254:	4b0c      	ldr	r3, [pc, #48]	@ (8002288 <main+0x90>)
 8002256:	781b      	ldrb	r3, [r3, #0]
 8002258:	2b02      	cmp	r3, #2
 800225a:	d101      	bne.n	8002260 <main+0x68>
 800225c:	f009 f9f0 	bl	800b640 <TimeoutMenu>
    if(state == Enrollment)Enroll();
 8002260:	4b09      	ldr	r3, [pc, #36]	@ (8002288 <main+0x90>)
 8002262:	781b      	ldrb	r3, [r3, #0]
 8002264:	2b03      	cmp	r3, #3
 8002266:	d101      	bne.n	800226c <main+0x74>
 8002268:	f009 fa28 	bl	800b6bc <Enroll>
    if(state == Menu)MainMenu();
 800226c:	4b06      	ldr	r3, [pc, #24]	@ (8002288 <main+0x90>)
 800226e:	781b      	ldrb	r3, [r3, #0]
 8002270:	2b04      	cmp	r3, #4
 8002272:	d1e3      	bne.n	800223c <main+0x44>
 8002274:	f009 f8de 	bl	800b434 <MainMenu>
    if(state == Lock)LockDevice();
 8002278:	e7e0      	b.n	800223c <main+0x44>
 800227a:	bf00      	nop
 800227c:	0800d528 	.word	0x0800d528
 8002280:	080e0000 	.word	0x080e0000
 8002284:	200001e8 	.word	0x200001e8
 8002288:	200002a9 	.word	0x200002a9

0800228c <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b094      	sub	sp, #80	@ 0x50
 8002290:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002292:	f107 0320 	add.w	r3, r7, #32
 8002296:	2230      	movs	r2, #48	@ 0x30
 8002298:	2100      	movs	r1, #0
 800229a:	4618      	mov	r0, r3
 800229c:	f00a fb06 	bl	800c8ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80022a0:	f107 030c 	add.w	r3, r7, #12
 80022a4:	2200      	movs	r2, #0
 80022a6:	601a      	str	r2, [r3, #0]
 80022a8:	605a      	str	r2, [r3, #4]
 80022aa:	609a      	str	r2, [r3, #8]
 80022ac:	60da      	str	r2, [r3, #12]
 80022ae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
   */
  __HAL_RCC_PWR_CLK_ENABLE();
 80022b0:	2300      	movs	r3, #0
 80022b2:	60bb      	str	r3, [r7, #8]
 80022b4:	4b27      	ldr	r3, [pc, #156]	@ (8002354 <SystemClock_Config+0xc8>)
 80022b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022b8:	4a26      	ldr	r2, [pc, #152]	@ (8002354 <SystemClock_Config+0xc8>)
 80022ba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80022be:	6413      	str	r3, [r2, #64]	@ 0x40
 80022c0:	4b24      	ldr	r3, [pc, #144]	@ (8002354 <SystemClock_Config+0xc8>)
 80022c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022c8:	60bb      	str	r3, [r7, #8]
 80022ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80022cc:	2300      	movs	r3, #0
 80022ce:	607b      	str	r3, [r7, #4]
 80022d0:	4b21      	ldr	r3, [pc, #132]	@ (8002358 <SystemClock_Config+0xcc>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a20      	ldr	r2, [pc, #128]	@ (8002358 <SystemClock_Config+0xcc>)
 80022d6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80022da:	6013      	str	r3, [r2, #0]
 80022dc:	4b1e      	ldr	r3, [pc, #120]	@ (8002358 <SystemClock_Config+0xcc>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80022e4:	607b      	str	r3, [r7, #4]
 80022e6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80022e8:	2301      	movs	r3, #1
 80022ea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80022ec:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80022f0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80022f2:	2302      	movs	r3, #2
 80022f4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80022f6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80022fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80022fc:	2304      	movs	r3, #4
 80022fe:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8002300:	2348      	movs	r3, #72	@ 0x48
 8002302:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002304:	2302      	movs	r3, #2
 8002306:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8002308:	2303      	movs	r3, #3
 800230a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800230c:	f107 0320 	add.w	r3, r7, #32
 8002310:	4618      	mov	r0, r3
 8002312:	f003 f8bb 	bl	800548c <HAL_RCC_OscConfig>
 8002316:	4603      	mov	r3, r0
 8002318:	2b00      	cmp	r3, #0
 800231a:	d001      	beq.n	8002320 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800231c:	f000 f91a 	bl	8002554 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002320:	230f      	movs	r3, #15
 8002322:	60fb      	str	r3, [r7, #12]
      |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002324:	2302      	movs	r3, #2
 8002326:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002328:	2300      	movs	r3, #0
 800232a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800232c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002330:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002332:	2300      	movs	r3, #0
 8002334:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002336:	f107 030c 	add.w	r3, r7, #12
 800233a:	2102      	movs	r1, #2
 800233c:	4618      	mov	r0, r3
 800233e:	f003 fb1d 	bl	800597c <HAL_RCC_ClockConfig>
 8002342:	4603      	mov	r3, r0
 8002344:	2b00      	cmp	r3, #0
 8002346:	d001      	beq.n	800234c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8002348:	f000 f904 	bl	8002554 <Error_Handler>
  }
}
 800234c:	bf00      	nop
 800234e:	3750      	adds	r7, #80	@ 0x50
 8002350:	46bd      	mov	sp, r7
 8002352:	bd80      	pop	{r7, pc}
 8002354:	40023800 	.word	0x40023800
 8002358:	40007000 	.word	0x40007000

0800235c <MX_CRC_Init>:
 * @brief CRC Initialization Function
 * @param None
 * @retval None
 */
static void MX_CRC_Init(void)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8002360:	4b06      	ldr	r3, [pc, #24]	@ (800237c <MX_CRC_Init+0x20>)
 8002362:	4a07      	ldr	r2, [pc, #28]	@ (8002380 <MX_CRC_Init+0x24>)
 8002364:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8002366:	4805      	ldr	r0, [pc, #20]	@ (800237c <MX_CRC_Init+0x20>)
 8002368:	f000 fc93 	bl	8002c92 <HAL_CRC_Init>
 800236c:	4603      	mov	r3, r0
 800236e:	2b00      	cmp	r3, #0
 8002370:	d001      	beq.n	8002376 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8002372:	f000 f8ef 	bl	8002554 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8002376:	bf00      	nop
 8002378:	bd80      	pop	{r7, pc}
 800237a:	bf00      	nop
 800237c:	2000017c 	.word	0x2000017c
 8002380:	40023000 	.word	0x40023000

08002384 <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002388:	4b12      	ldr	r3, [pc, #72]	@ (80023d4 <MX_I2C1_Init+0x50>)
 800238a:	4a13      	ldr	r2, [pc, #76]	@ (80023d8 <MX_I2C1_Init+0x54>)
 800238c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800238e:	4b11      	ldr	r3, [pc, #68]	@ (80023d4 <MX_I2C1_Init+0x50>)
 8002390:	4a12      	ldr	r2, [pc, #72]	@ (80023dc <MX_I2C1_Init+0x58>)
 8002392:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002394:	4b0f      	ldr	r3, [pc, #60]	@ (80023d4 <MX_I2C1_Init+0x50>)
 8002396:	2200      	movs	r2, #0
 8002398:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800239a:	4b0e      	ldr	r3, [pc, #56]	@ (80023d4 <MX_I2C1_Init+0x50>)
 800239c:	2200      	movs	r2, #0
 800239e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80023a0:	4b0c      	ldr	r3, [pc, #48]	@ (80023d4 <MX_I2C1_Init+0x50>)
 80023a2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80023a6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80023a8:	4b0a      	ldr	r3, [pc, #40]	@ (80023d4 <MX_I2C1_Init+0x50>)
 80023aa:	2200      	movs	r2, #0
 80023ac:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80023ae:	4b09      	ldr	r3, [pc, #36]	@ (80023d4 <MX_I2C1_Init+0x50>)
 80023b0:	2200      	movs	r2, #0
 80023b2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80023b4:	4b07      	ldr	r3, [pc, #28]	@ (80023d4 <MX_I2C1_Init+0x50>)
 80023b6:	2200      	movs	r2, #0
 80023b8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80023ba:	4b06      	ldr	r3, [pc, #24]	@ (80023d4 <MX_I2C1_Init+0x50>)
 80023bc:	2200      	movs	r2, #0
 80023be:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80023c0:	4804      	ldr	r0, [pc, #16]	@ (80023d4 <MX_I2C1_Init+0x50>)
 80023c2:	f001 f835 	bl	8003430 <HAL_I2C_Init>
 80023c6:	4603      	mov	r3, r0
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d001      	beq.n	80023d0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80023cc:	f000 f8c2 	bl	8002554 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80023d0:	bf00      	nop
 80023d2:	bd80      	pop	{r7, pc}
 80023d4:	20000184 	.word	0x20000184
 80023d8:	40005400 	.word	0x40005400
 80023dc:	00061a80 	.word	0x00061a80

080023e0 <MX_RNG_Init>:
 * @brief RNG Initialization Function
 * @param None
 * @retval None
 */
static void MX_RNG_Init(void)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 80023e4:	4b06      	ldr	r3, [pc, #24]	@ (8002400 <MX_RNG_Init+0x20>)
 80023e6:	4a07      	ldr	r2, [pc, #28]	@ (8002404 <MX_RNG_Init+0x24>)
 80023e8:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 80023ea:	4805      	ldr	r0, [pc, #20]	@ (8002400 <MX_RNG_Init+0x20>)
 80023ec:	f003 fcd2 	bl	8005d94 <HAL_RNG_Init>
 80023f0:	4603      	mov	r3, r0
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d001      	beq.n	80023fa <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 80023f6:	f000 f8ad 	bl	8002554 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 80023fa:	bf00      	nop
 80023fc:	bd80      	pop	{r7, pc}
 80023fe:	bf00      	nop
 8002400:	200001d8 	.word	0x200001d8
 8002404:	50060800 	.word	0x50060800

08002408 <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b086      	sub	sp, #24
 800240c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800240e:	f107 0308 	add.w	r3, r7, #8
 8002412:	2200      	movs	r2, #0
 8002414:	601a      	str	r2, [r3, #0]
 8002416:	605a      	str	r2, [r3, #4]
 8002418:	609a      	str	r2, [r3, #8]
 800241a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800241c:	463b      	mov	r3, r7
 800241e:	2200      	movs	r2, #0
 8002420:	601a      	str	r2, [r3, #0]
 8002422:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002424:	4b1e      	ldr	r3, [pc, #120]	@ (80024a0 <MX_TIM2_Init+0x98>)
 8002426:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800242a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 42000;
 800242c:	4b1c      	ldr	r3, [pc, #112]	@ (80024a0 <MX_TIM2_Init+0x98>)
 800242e:	f24a 4210 	movw	r2, #42000	@ 0xa410
 8002432:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002434:	4b1a      	ldr	r3, [pc, #104]	@ (80024a0 <MX_TIM2_Init+0x98>)
 8002436:	2200      	movs	r2, #0
 8002438:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 800243a:	4b19      	ldr	r3, [pc, #100]	@ (80024a0 <MX_TIM2_Init+0x98>)
 800243c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002440:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002442:	4b17      	ldr	r3, [pc, #92]	@ (80024a0 <MX_TIM2_Init+0x98>)
 8002444:	2200      	movs	r2, #0
 8002446:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002448:	4b15      	ldr	r3, [pc, #84]	@ (80024a0 <MX_TIM2_Init+0x98>)
 800244a:	2200      	movs	r2, #0
 800244c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800244e:	4814      	ldr	r0, [pc, #80]	@ (80024a0 <MX_TIM2_Init+0x98>)
 8002450:	f003 fd63 	bl	8005f1a <HAL_TIM_Base_Init>
 8002454:	4603      	mov	r3, r0
 8002456:	2b00      	cmp	r3, #0
 8002458:	d001      	beq.n	800245e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800245a:	f000 f87b 	bl	8002554 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800245e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002462:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002464:	f107 0308 	add.w	r3, r7, #8
 8002468:	4619      	mov	r1, r3
 800246a:	480d      	ldr	r0, [pc, #52]	@ (80024a0 <MX_TIM2_Init+0x98>)
 800246c:	f003 ff04 	bl	8006278 <HAL_TIM_ConfigClockSource>
 8002470:	4603      	mov	r3, r0
 8002472:	2b00      	cmp	r3, #0
 8002474:	d001      	beq.n	800247a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8002476:	f000 f86d 	bl	8002554 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800247a:	2300      	movs	r3, #0
 800247c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800247e:	2300      	movs	r3, #0
 8002480:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002482:	463b      	mov	r3, r7
 8002484:	4619      	mov	r1, r3
 8002486:	4806      	ldr	r0, [pc, #24]	@ (80024a0 <MX_TIM2_Init+0x98>)
 8002488:	f004 f92c 	bl	80066e4 <HAL_TIMEx_MasterConfigSynchronization>
 800248c:	4603      	mov	r3, r0
 800248e:	2b00      	cmp	r3, #0
 8002490:	d001      	beq.n	8002496 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8002492:	f000 f85f 	bl	8002554 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002496:	bf00      	nop
 8002498:	3718      	adds	r7, #24
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}
 800249e:	bf00      	nop
 80024a0:	200001e8 	.word	0x200001e8

080024a4 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b08a      	sub	sp, #40	@ 0x28
 80024a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024aa:	f107 0314 	add.w	r3, r7, #20
 80024ae:	2200      	movs	r2, #0
 80024b0:	601a      	str	r2, [r3, #0]
 80024b2:	605a      	str	r2, [r3, #4]
 80024b4:	609a      	str	r2, [r3, #8]
 80024b6:	60da      	str	r2, [r3, #12]
 80024b8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80024ba:	2300      	movs	r3, #0
 80024bc:	613b      	str	r3, [r7, #16]
 80024be:	4b23      	ldr	r3, [pc, #140]	@ (800254c <MX_GPIO_Init+0xa8>)
 80024c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024c2:	4a22      	ldr	r2, [pc, #136]	@ (800254c <MX_GPIO_Init+0xa8>)
 80024c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80024c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80024ca:	4b20      	ldr	r3, [pc, #128]	@ (800254c <MX_GPIO_Init+0xa8>)
 80024cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024d2:	613b      	str	r3, [r7, #16]
 80024d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80024d6:	2300      	movs	r3, #0
 80024d8:	60fb      	str	r3, [r7, #12]
 80024da:	4b1c      	ldr	r3, [pc, #112]	@ (800254c <MX_GPIO_Init+0xa8>)
 80024dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024de:	4a1b      	ldr	r2, [pc, #108]	@ (800254c <MX_GPIO_Init+0xa8>)
 80024e0:	f043 0304 	orr.w	r3, r3, #4
 80024e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80024e6:	4b19      	ldr	r3, [pc, #100]	@ (800254c <MX_GPIO_Init+0xa8>)
 80024e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024ea:	f003 0304 	and.w	r3, r3, #4
 80024ee:	60fb      	str	r3, [r7, #12]
 80024f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80024f2:	2300      	movs	r3, #0
 80024f4:	60bb      	str	r3, [r7, #8]
 80024f6:	4b15      	ldr	r3, [pc, #84]	@ (800254c <MX_GPIO_Init+0xa8>)
 80024f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024fa:	4a14      	ldr	r2, [pc, #80]	@ (800254c <MX_GPIO_Init+0xa8>)
 80024fc:	f043 0301 	orr.w	r3, r3, #1
 8002500:	6313      	str	r3, [r2, #48]	@ 0x30
 8002502:	4b12      	ldr	r3, [pc, #72]	@ (800254c <MX_GPIO_Init+0xa8>)
 8002504:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002506:	f003 0301 	and.w	r3, r3, #1
 800250a:	60bb      	str	r3, [r7, #8]
 800250c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800250e:	2300      	movs	r3, #0
 8002510:	607b      	str	r3, [r7, #4]
 8002512:	4b0e      	ldr	r3, [pc, #56]	@ (800254c <MX_GPIO_Init+0xa8>)
 8002514:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002516:	4a0d      	ldr	r2, [pc, #52]	@ (800254c <MX_GPIO_Init+0xa8>)
 8002518:	f043 0302 	orr.w	r3, r3, #2
 800251c:	6313      	str	r3, [r2, #48]	@ 0x30
 800251e:	4b0b      	ldr	r3, [pc, #44]	@ (800254c <MX_GPIO_Init+0xa8>)
 8002520:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002522:	f003 0302 	and.w	r3, r3, #2
 8002526:	607b      	str	r3, [r7, #4]
 8002528:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : UP_Pin DOWN_Pin */
  GPIO_InitStruct.Pin = UP_Pin|DOWN_Pin;
 800252a:	2330      	movs	r3, #48	@ 0x30
 800252c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800252e:	2300      	movs	r3, #0
 8002530:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002532:	2300      	movs	r3, #0
 8002534:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002536:	f107 0314 	add.w	r3, r7, #20
 800253a:	4619      	mov	r1, r3
 800253c:	4804      	ldr	r0, [pc, #16]	@ (8002550 <MX_GPIO_Init+0xac>)
 800253e:	f000 fdc3 	bl	80030c8 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8002542:	bf00      	nop
 8002544:	3728      	adds	r7, #40	@ 0x28
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}
 800254a:	bf00      	nop
 800254c:	40023800 	.word	0x40023800
 8002550:	40020800 	.word	0x40020800

08002554 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8002554:	b480      	push	{r7}
 8002556:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002558:	b672      	cpsid	i
}
 800255a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800255c:	bf00      	nop
 800255e:	e7fd      	b.n	800255c <Error_Handler+0x8>

08002560 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002560:	b480      	push	{r7}
 8002562:	b083      	sub	sp, #12
 8002564:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002566:	2300      	movs	r3, #0
 8002568:	607b      	str	r3, [r7, #4]
 800256a:	4b10      	ldr	r3, [pc, #64]	@ (80025ac <HAL_MspInit+0x4c>)
 800256c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800256e:	4a0f      	ldr	r2, [pc, #60]	@ (80025ac <HAL_MspInit+0x4c>)
 8002570:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002574:	6453      	str	r3, [r2, #68]	@ 0x44
 8002576:	4b0d      	ldr	r3, [pc, #52]	@ (80025ac <HAL_MspInit+0x4c>)
 8002578:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800257a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800257e:	607b      	str	r3, [r7, #4]
 8002580:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002582:	2300      	movs	r3, #0
 8002584:	603b      	str	r3, [r7, #0]
 8002586:	4b09      	ldr	r3, [pc, #36]	@ (80025ac <HAL_MspInit+0x4c>)
 8002588:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800258a:	4a08      	ldr	r2, [pc, #32]	@ (80025ac <HAL_MspInit+0x4c>)
 800258c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002590:	6413      	str	r3, [r2, #64]	@ 0x40
 8002592:	4b06      	ldr	r3, [pc, #24]	@ (80025ac <HAL_MspInit+0x4c>)
 8002594:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002596:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800259a:	603b      	str	r3, [r7, #0]
 800259c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800259e:	bf00      	nop
 80025a0:	370c      	adds	r7, #12
 80025a2:	46bd      	mov	sp, r7
 80025a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a8:	4770      	bx	lr
 80025aa:	bf00      	nop
 80025ac:	40023800 	.word	0x40023800

080025b0 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80025b0:	b480      	push	{r7}
 80025b2:	b085      	sub	sp, #20
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a0b      	ldr	r2, [pc, #44]	@ (80025ec <HAL_CRC_MspInit+0x3c>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d10d      	bne.n	80025de <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80025c2:	2300      	movs	r3, #0
 80025c4:	60fb      	str	r3, [r7, #12]
 80025c6:	4b0a      	ldr	r3, [pc, #40]	@ (80025f0 <HAL_CRC_MspInit+0x40>)
 80025c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025ca:	4a09      	ldr	r2, [pc, #36]	@ (80025f0 <HAL_CRC_MspInit+0x40>)
 80025cc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80025d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80025d2:	4b07      	ldr	r3, [pc, #28]	@ (80025f0 <HAL_CRC_MspInit+0x40>)
 80025d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025d6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80025da:	60fb      	str	r3, [r7, #12]
 80025dc:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END CRC_MspInit 1 */

  }

}
 80025de:	bf00      	nop
 80025e0:	3714      	adds	r7, #20
 80025e2:	46bd      	mov	sp, r7
 80025e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e8:	4770      	bx	lr
 80025ea:	bf00      	nop
 80025ec:	40023000 	.word	0x40023000
 80025f0:	40023800 	.word	0x40023800

080025f4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b08a      	sub	sp, #40	@ 0x28
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025fc:	f107 0314 	add.w	r3, r7, #20
 8002600:	2200      	movs	r2, #0
 8002602:	601a      	str	r2, [r3, #0]
 8002604:	605a      	str	r2, [r3, #4]
 8002606:	609a      	str	r2, [r3, #8]
 8002608:	60da      	str	r2, [r3, #12]
 800260a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a19      	ldr	r2, [pc, #100]	@ (8002678 <HAL_I2C_MspInit+0x84>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d12b      	bne.n	800266e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002616:	2300      	movs	r3, #0
 8002618:	613b      	str	r3, [r7, #16]
 800261a:	4b18      	ldr	r3, [pc, #96]	@ (800267c <HAL_I2C_MspInit+0x88>)
 800261c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800261e:	4a17      	ldr	r2, [pc, #92]	@ (800267c <HAL_I2C_MspInit+0x88>)
 8002620:	f043 0302 	orr.w	r3, r3, #2
 8002624:	6313      	str	r3, [r2, #48]	@ 0x30
 8002626:	4b15      	ldr	r3, [pc, #84]	@ (800267c <HAL_I2C_MspInit+0x88>)
 8002628:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800262a:	f003 0302 	and.w	r3, r3, #2
 800262e:	613b      	str	r3, [r7, #16]
 8002630:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002632:	23c0      	movs	r3, #192	@ 0xc0
 8002634:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002636:	2312      	movs	r3, #18
 8002638:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800263a:	2300      	movs	r3, #0
 800263c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800263e:	2303      	movs	r3, #3
 8002640:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002642:	2304      	movs	r3, #4
 8002644:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002646:	f107 0314 	add.w	r3, r7, #20
 800264a:	4619      	mov	r1, r3
 800264c:	480c      	ldr	r0, [pc, #48]	@ (8002680 <HAL_I2C_MspInit+0x8c>)
 800264e:	f000 fd3b 	bl	80030c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002652:	2300      	movs	r3, #0
 8002654:	60fb      	str	r3, [r7, #12]
 8002656:	4b09      	ldr	r3, [pc, #36]	@ (800267c <HAL_I2C_MspInit+0x88>)
 8002658:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800265a:	4a08      	ldr	r2, [pc, #32]	@ (800267c <HAL_I2C_MspInit+0x88>)
 800265c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002660:	6413      	str	r3, [r2, #64]	@ 0x40
 8002662:	4b06      	ldr	r3, [pc, #24]	@ (800267c <HAL_I2C_MspInit+0x88>)
 8002664:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002666:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800266a:	60fb      	str	r3, [r7, #12]
 800266c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 800266e:	bf00      	nop
 8002670:	3728      	adds	r7, #40	@ 0x28
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}
 8002676:	bf00      	nop
 8002678:	40005400 	.word	0x40005400
 800267c:	40023800 	.word	0x40023800
 8002680:	40020400 	.word	0x40020400

08002684 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b084      	sub	sp, #16
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a0e      	ldr	r2, [pc, #56]	@ (80026cc <HAL_RNG_MspInit+0x48>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d115      	bne.n	80026c2 <HAL_RNG_MspInit+0x3e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8002696:	2300      	movs	r3, #0
 8002698:	60fb      	str	r3, [r7, #12]
 800269a:	4b0d      	ldr	r3, [pc, #52]	@ (80026d0 <HAL_RNG_MspInit+0x4c>)
 800269c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800269e:	4a0c      	ldr	r2, [pc, #48]	@ (80026d0 <HAL_RNG_MspInit+0x4c>)
 80026a0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80026a4:	6353      	str	r3, [r2, #52]	@ 0x34
 80026a6:	4b0a      	ldr	r3, [pc, #40]	@ (80026d0 <HAL_RNG_MspInit+0x4c>)
 80026a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80026aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026ae:	60fb      	str	r3, [r7, #12]
 80026b0:	68fb      	ldr	r3, [r7, #12]
    /* RNG interrupt Init */
    HAL_NVIC_SetPriority(HASH_RNG_IRQn, 0, 0);
 80026b2:	2200      	movs	r2, #0
 80026b4:	2100      	movs	r1, #0
 80026b6:	2050      	movs	r0, #80	@ 0x50
 80026b8:	f000 fab5 	bl	8002c26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(HASH_RNG_IRQn);
 80026bc:	2050      	movs	r0, #80	@ 0x50
 80026be:	f000 face 	bl	8002c5e <HAL_NVIC_EnableIRQ>

  /* USER CODE END RNG_MspInit 1 */

  }

}
 80026c2:	bf00      	nop
 80026c4:	3710      	adds	r7, #16
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}
 80026ca:	bf00      	nop
 80026cc:	50060800 	.word	0x50060800
 80026d0:	40023800 	.word	0x40023800

080026d4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b084      	sub	sp, #16
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80026e4:	d115      	bne.n	8002712 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80026e6:	2300      	movs	r3, #0
 80026e8:	60fb      	str	r3, [r7, #12]
 80026ea:	4b0c      	ldr	r3, [pc, #48]	@ (800271c <HAL_TIM_Base_MspInit+0x48>)
 80026ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026ee:	4a0b      	ldr	r2, [pc, #44]	@ (800271c <HAL_TIM_Base_MspInit+0x48>)
 80026f0:	f043 0301 	orr.w	r3, r3, #1
 80026f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80026f6:	4b09      	ldr	r3, [pc, #36]	@ (800271c <HAL_TIM_Base_MspInit+0x48>)
 80026f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026fa:	f003 0301 	and.w	r3, r3, #1
 80026fe:	60fb      	str	r3, [r7, #12]
 8002700:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002702:	2200      	movs	r2, #0
 8002704:	2100      	movs	r1, #0
 8002706:	201c      	movs	r0, #28
 8002708:	f000 fa8d 	bl	8002c26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800270c:	201c      	movs	r0, #28
 800270e:	f000 faa6 	bl	8002c5e <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8002712:	bf00      	nop
 8002714:	3710      	adds	r7, #16
 8002716:	46bd      	mov	sp, r7
 8002718:	bd80      	pop	{r7, pc}
 800271a:	bf00      	nop
 800271c:	40023800 	.word	0x40023800

08002720 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002720:	b480      	push	{r7}
 8002722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002724:	bf00      	nop
 8002726:	e7fd      	b.n	8002724 <NMI_Handler+0x4>

08002728 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002728:	b480      	push	{r7}
 800272a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800272c:	bf00      	nop
 800272e:	e7fd      	b.n	800272c <HardFault_Handler+0x4>

08002730 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002730:	b480      	push	{r7}
 8002732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002734:	bf00      	nop
 8002736:	e7fd      	b.n	8002734 <MemManage_Handler+0x4>

08002738 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002738:	b480      	push	{r7}
 800273a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800273c:	bf00      	nop
 800273e:	e7fd      	b.n	800273c <BusFault_Handler+0x4>

08002740 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002740:	b480      	push	{r7}
 8002742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002744:	bf00      	nop
 8002746:	e7fd      	b.n	8002744 <UsageFault_Handler+0x4>

08002748 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002748:	b480      	push	{r7}
 800274a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800274c:	bf00      	nop
 800274e:	46bd      	mov	sp, r7
 8002750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002754:	4770      	bx	lr

08002756 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002756:	b480      	push	{r7}
 8002758:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800275a:	bf00      	nop
 800275c:	46bd      	mov	sp, r7
 800275e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002762:	4770      	bx	lr

08002764 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002764:	b480      	push	{r7}
 8002766:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002768:	bf00      	nop
 800276a:	46bd      	mov	sp, r7
 800276c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002770:	4770      	bx	lr

08002772 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002772:	b580      	push	{r7, lr}
 8002774:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002776:	f000 f937 	bl	80029e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800277a:	bf00      	nop
 800277c:	bd80      	pop	{r7, pc}
	...

08002780 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002784:	4802      	ldr	r0, [pc, #8]	@ (8002790 <TIM2_IRQHandler+0x10>)
 8002786:	f003 fc87 	bl	8006098 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800278a:	bf00      	nop
 800278c:	bd80      	pop	{r7, pc}
 800278e:	bf00      	nop
 8002790:	200001e8 	.word	0x200001e8

08002794 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002798:	4802      	ldr	r0, [pc, #8]	@ (80027a4 <OTG_FS_IRQHandler+0x10>)
 800279a:	f001 fd68 	bl	800426e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800279e:	bf00      	nop
 80027a0:	bd80      	pop	{r7, pc}
 80027a2:	bf00      	nop
 80027a4:	200019c8 	.word	0x200019c8

080027a8 <HASH_RNG_IRQHandler>:

/**
  * @brief This function handles HASH and RNG global interrupts.
  */
void HASH_RNG_IRQHandler(void)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HASH_RNG_IRQn 0 */

  /* USER CODE END HASH_RNG_IRQn 0 */
  HAL_RNG_IRQHandler(&hrng);
 80027ac:	4802      	ldr	r0, [pc, #8]	@ (80027b8 <HASH_RNG_IRQHandler+0x10>)
 80027ae:	f003 fb4a 	bl	8005e46 <HAL_RNG_IRQHandler>
  /* USER CODE BEGIN HASH_RNG_IRQn 1 */

  /* USER CODE END HASH_RNG_IRQn 1 */
}
 80027b2:	bf00      	nop
 80027b4:	bd80      	pop	{r7, pc}
 80027b6:	bf00      	nop
 80027b8:	200001d8 	.word	0x200001d8

080027bc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b086      	sub	sp, #24
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	60f8      	str	r0, [r7, #12]
 80027c4:	60b9      	str	r1, [r7, #8]
 80027c6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027c8:	2300      	movs	r3, #0
 80027ca:	617b      	str	r3, [r7, #20]
 80027cc:	e00a      	b.n	80027e4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80027ce:	f3af 8000 	nop.w
 80027d2:	4601      	mov	r1, r0
 80027d4:	68bb      	ldr	r3, [r7, #8]
 80027d6:	1c5a      	adds	r2, r3, #1
 80027d8:	60ba      	str	r2, [r7, #8]
 80027da:	b2ca      	uxtb	r2, r1
 80027dc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	3301      	adds	r3, #1
 80027e2:	617b      	str	r3, [r7, #20]
 80027e4:	697a      	ldr	r2, [r7, #20]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	429a      	cmp	r2, r3
 80027ea:	dbf0      	blt.n	80027ce <_read+0x12>
  }

  return len;
 80027ec:	687b      	ldr	r3, [r7, #4]
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	3718      	adds	r7, #24
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}

080027f6 <_close>:
  }
  return len;
}

int _close(int file)
{
 80027f6:	b480      	push	{r7}
 80027f8:	b083      	sub	sp, #12
 80027fa:	af00      	add	r7, sp, #0
 80027fc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80027fe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002802:	4618      	mov	r0, r3
 8002804:	370c      	adds	r7, #12
 8002806:	46bd      	mov	sp, r7
 8002808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280c:	4770      	bx	lr

0800280e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800280e:	b480      	push	{r7}
 8002810:	b083      	sub	sp, #12
 8002812:	af00      	add	r7, sp, #0
 8002814:	6078      	str	r0, [r7, #4]
 8002816:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800281e:	605a      	str	r2, [r3, #4]
  return 0;
 8002820:	2300      	movs	r3, #0
}
 8002822:	4618      	mov	r0, r3
 8002824:	370c      	adds	r7, #12
 8002826:	46bd      	mov	sp, r7
 8002828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282c:	4770      	bx	lr

0800282e <_isatty>:

int _isatty(int file)
{
 800282e:	b480      	push	{r7}
 8002830:	b083      	sub	sp, #12
 8002832:	af00      	add	r7, sp, #0
 8002834:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002836:	2301      	movs	r3, #1
}
 8002838:	4618      	mov	r0, r3
 800283a:	370c      	adds	r7, #12
 800283c:	46bd      	mov	sp, r7
 800283e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002842:	4770      	bx	lr

08002844 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002844:	b480      	push	{r7}
 8002846:	b085      	sub	sp, #20
 8002848:	af00      	add	r7, sp, #0
 800284a:	60f8      	str	r0, [r7, #12]
 800284c:	60b9      	str	r1, [r7, #8]
 800284e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002850:	2300      	movs	r3, #0
}
 8002852:	4618      	mov	r0, r3
 8002854:	3714      	adds	r7, #20
 8002856:	46bd      	mov	sp, r7
 8002858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285c:	4770      	bx	lr
	...

08002860 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b086      	sub	sp, #24
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002868:	4a14      	ldr	r2, [pc, #80]	@ (80028bc <_sbrk+0x5c>)
 800286a:	4b15      	ldr	r3, [pc, #84]	@ (80028c0 <_sbrk+0x60>)
 800286c:	1ad3      	subs	r3, r2, r3
 800286e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002874:	4b13      	ldr	r3, [pc, #76]	@ (80028c4 <_sbrk+0x64>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d102      	bne.n	8002882 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800287c:	4b11      	ldr	r3, [pc, #68]	@ (80028c4 <_sbrk+0x64>)
 800287e:	4a12      	ldr	r2, [pc, #72]	@ (80028c8 <_sbrk+0x68>)
 8002880:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002882:	4b10      	ldr	r3, [pc, #64]	@ (80028c4 <_sbrk+0x64>)
 8002884:	681a      	ldr	r2, [r3, #0]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	4413      	add	r3, r2
 800288a:	693a      	ldr	r2, [r7, #16]
 800288c:	429a      	cmp	r2, r3
 800288e:	d207      	bcs.n	80028a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002890:	f00a f85a 	bl	800c948 <__errno>
 8002894:	4603      	mov	r3, r0
 8002896:	220c      	movs	r2, #12
 8002898:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800289a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800289e:	e009      	b.n	80028b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80028a0:	4b08      	ldr	r3, [pc, #32]	@ (80028c4 <_sbrk+0x64>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80028a6:	4b07      	ldr	r3, [pc, #28]	@ (80028c4 <_sbrk+0x64>)
 80028a8:	681a      	ldr	r2, [r3, #0]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	4413      	add	r3, r2
 80028ae:	4a05      	ldr	r2, [pc, #20]	@ (80028c4 <_sbrk+0x64>)
 80028b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80028b2:	68fb      	ldr	r3, [r7, #12]
}
 80028b4:	4618      	mov	r0, r3
 80028b6:	3718      	adds	r7, #24
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bd80      	pop	{r7, pc}
 80028bc:	20020000 	.word	0x20020000
 80028c0:	00000400 	.word	0x00000400
 80028c4:	200002b4 	.word	0x200002b4
 80028c8:	20002220 	.word	0x20002220

080028cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80028cc:	b480      	push	{r7}
 80028ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80028d0:	4b06      	ldr	r3, [pc, #24]	@ (80028ec <SystemInit+0x20>)
 80028d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028d6:	4a05      	ldr	r2, [pc, #20]	@ (80028ec <SystemInit+0x20>)
 80028d8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80028dc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80028e0:	bf00      	nop
 80028e2:	46bd      	mov	sp, r7
 80028e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e8:	4770      	bx	lr
 80028ea:	bf00      	nop
 80028ec:	e000ed00 	.word	0xe000ed00

080028f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80028f0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002928 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80028f4:	f7ff ffea 	bl	80028cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80028f8:	480c      	ldr	r0, [pc, #48]	@ (800292c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80028fa:	490d      	ldr	r1, [pc, #52]	@ (8002930 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80028fc:	4a0d      	ldr	r2, [pc, #52]	@ (8002934 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80028fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002900:	e002      	b.n	8002908 <LoopCopyDataInit>

08002902 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002902:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002904:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002906:	3304      	adds	r3, #4

08002908 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002908:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800290a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800290c:	d3f9      	bcc.n	8002902 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800290e:	4a0a      	ldr	r2, [pc, #40]	@ (8002938 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002910:	4c0a      	ldr	r4, [pc, #40]	@ (800293c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002912:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002914:	e001      	b.n	800291a <LoopFillZerobss>

08002916 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002916:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002918:	3204      	adds	r2, #4

0800291a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800291a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800291c:	d3fb      	bcc.n	8002916 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 800291e:	f00a f819 	bl	800c954 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002922:	f7ff fc69 	bl	80021f8 <main>
  bx  lr    
 8002926:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002928:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800292c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002930:	2000015c 	.word	0x2000015c
  ldr r2, =_sidata
 8002934:	0800ff38 	.word	0x0800ff38
  ldr r2, =_sbss
 8002938:	2000015c 	.word	0x2000015c
  ldr r4, =_ebss
 800293c:	2000221c 	.word	0x2000221c

08002940 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002940:	e7fe      	b.n	8002940 <ADC_IRQHandler>
	...

08002944 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002948:	4b0e      	ldr	r3, [pc, #56]	@ (8002984 <HAL_Init+0x40>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4a0d      	ldr	r2, [pc, #52]	@ (8002984 <HAL_Init+0x40>)
 800294e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002952:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002954:	4b0b      	ldr	r3, [pc, #44]	@ (8002984 <HAL_Init+0x40>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a0a      	ldr	r2, [pc, #40]	@ (8002984 <HAL_Init+0x40>)
 800295a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800295e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002960:	4b08      	ldr	r3, [pc, #32]	@ (8002984 <HAL_Init+0x40>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a07      	ldr	r2, [pc, #28]	@ (8002984 <HAL_Init+0x40>)
 8002966:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800296a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800296c:	2003      	movs	r0, #3
 800296e:	f000 f94f 	bl	8002c10 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002972:	200f      	movs	r0, #15
 8002974:	f000 f808 	bl	8002988 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002978:	f7ff fdf2 	bl	8002560 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800297c:	2300      	movs	r3, #0
}
 800297e:	4618      	mov	r0, r3
 8002980:	bd80      	pop	{r7, pc}
 8002982:	bf00      	nop
 8002984:	40023c00 	.word	0x40023c00

08002988 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b082      	sub	sp, #8
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002990:	4b12      	ldr	r3, [pc, #72]	@ (80029dc <HAL_InitTick+0x54>)
 8002992:	681a      	ldr	r2, [r3, #0]
 8002994:	4b12      	ldr	r3, [pc, #72]	@ (80029e0 <HAL_InitTick+0x58>)
 8002996:	781b      	ldrb	r3, [r3, #0]
 8002998:	4619      	mov	r1, r3
 800299a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800299e:	fbb3 f3f1 	udiv	r3, r3, r1
 80029a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80029a6:	4618      	mov	r0, r3
 80029a8:	f000 f967 	bl	8002c7a <HAL_SYSTICK_Config>
 80029ac:	4603      	mov	r3, r0
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d001      	beq.n	80029b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80029b2:	2301      	movs	r3, #1
 80029b4:	e00e      	b.n	80029d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2b0f      	cmp	r3, #15
 80029ba:	d80a      	bhi.n	80029d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80029bc:	2200      	movs	r2, #0
 80029be:	6879      	ldr	r1, [r7, #4]
 80029c0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80029c4:	f000 f92f 	bl	8002c26 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80029c8:	4a06      	ldr	r2, [pc, #24]	@ (80029e4 <HAL_InitTick+0x5c>)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80029ce:	2300      	movs	r3, #0
 80029d0:	e000      	b.n	80029d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80029d2:	2301      	movs	r3, #1
}
 80029d4:	4618      	mov	r0, r3
 80029d6:	3708      	adds	r7, #8
 80029d8:	46bd      	mov	sp, r7
 80029da:	bd80      	pop	{r7, pc}
 80029dc:	20000000 	.word	0x20000000
 80029e0:	20000008 	.word	0x20000008
 80029e4:	20000004 	.word	0x20000004

080029e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80029e8:	b480      	push	{r7}
 80029ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80029ec:	4b06      	ldr	r3, [pc, #24]	@ (8002a08 <HAL_IncTick+0x20>)
 80029ee:	781b      	ldrb	r3, [r3, #0]
 80029f0:	461a      	mov	r2, r3
 80029f2:	4b06      	ldr	r3, [pc, #24]	@ (8002a0c <HAL_IncTick+0x24>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4413      	add	r3, r2
 80029f8:	4a04      	ldr	r2, [pc, #16]	@ (8002a0c <HAL_IncTick+0x24>)
 80029fa:	6013      	str	r3, [r2, #0]
}
 80029fc:	bf00      	nop
 80029fe:	46bd      	mov	sp, r7
 8002a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a04:	4770      	bx	lr
 8002a06:	bf00      	nop
 8002a08:	20000008 	.word	0x20000008
 8002a0c:	200002b8 	.word	0x200002b8

08002a10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a10:	b480      	push	{r7}
 8002a12:	af00      	add	r7, sp, #0
  return uwTick;
 8002a14:	4b03      	ldr	r3, [pc, #12]	@ (8002a24 <HAL_GetTick+0x14>)
 8002a16:	681b      	ldr	r3, [r3, #0]
}
 8002a18:	4618      	mov	r0, r3
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a20:	4770      	bx	lr
 8002a22:	bf00      	nop
 8002a24:	200002b8 	.word	0x200002b8

08002a28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b084      	sub	sp, #16
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a30:	f7ff ffee 	bl	8002a10 <HAL_GetTick>
 8002a34:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002a40:	d005      	beq.n	8002a4e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a42:	4b0a      	ldr	r3, [pc, #40]	@ (8002a6c <HAL_Delay+0x44>)
 8002a44:	781b      	ldrb	r3, [r3, #0]
 8002a46:	461a      	mov	r2, r3
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	4413      	add	r3, r2
 8002a4c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002a4e:	bf00      	nop
 8002a50:	f7ff ffde 	bl	8002a10 <HAL_GetTick>
 8002a54:	4602      	mov	r2, r0
 8002a56:	68bb      	ldr	r3, [r7, #8]
 8002a58:	1ad3      	subs	r3, r2, r3
 8002a5a:	68fa      	ldr	r2, [r7, #12]
 8002a5c:	429a      	cmp	r2, r3
 8002a5e:	d8f7      	bhi.n	8002a50 <HAL_Delay+0x28>
  {
  }
}
 8002a60:	bf00      	nop
 8002a62:	bf00      	nop
 8002a64:	3710      	adds	r7, #16
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}
 8002a6a:	bf00      	nop
 8002a6c:	20000008 	.word	0x20000008

08002a70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a70:	b480      	push	{r7}
 8002a72:	b085      	sub	sp, #20
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	f003 0307 	and.w	r3, r3, #7
 8002a7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a80:	4b0c      	ldr	r3, [pc, #48]	@ (8002ab4 <__NVIC_SetPriorityGrouping+0x44>)
 8002a82:	68db      	ldr	r3, [r3, #12]
 8002a84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a86:	68ba      	ldr	r2, [r7, #8]
 8002a88:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002a8c:	4013      	ands	r3, r2
 8002a8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a98:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002a9c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002aa0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002aa2:	4a04      	ldr	r2, [pc, #16]	@ (8002ab4 <__NVIC_SetPriorityGrouping+0x44>)
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	60d3      	str	r3, [r2, #12]
}
 8002aa8:	bf00      	nop
 8002aaa:	3714      	adds	r7, #20
 8002aac:	46bd      	mov	sp, r7
 8002aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab2:	4770      	bx	lr
 8002ab4:	e000ed00 	.word	0xe000ed00

08002ab8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002abc:	4b04      	ldr	r3, [pc, #16]	@ (8002ad0 <__NVIC_GetPriorityGrouping+0x18>)
 8002abe:	68db      	ldr	r3, [r3, #12]
 8002ac0:	0a1b      	lsrs	r3, r3, #8
 8002ac2:	f003 0307 	and.w	r3, r3, #7
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ace:	4770      	bx	lr
 8002ad0:	e000ed00 	.word	0xe000ed00

08002ad4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b083      	sub	sp, #12
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	4603      	mov	r3, r0
 8002adc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ade:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	db0b      	blt.n	8002afe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ae6:	79fb      	ldrb	r3, [r7, #7]
 8002ae8:	f003 021f 	and.w	r2, r3, #31
 8002aec:	4907      	ldr	r1, [pc, #28]	@ (8002b0c <__NVIC_EnableIRQ+0x38>)
 8002aee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002af2:	095b      	lsrs	r3, r3, #5
 8002af4:	2001      	movs	r0, #1
 8002af6:	fa00 f202 	lsl.w	r2, r0, r2
 8002afa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002afe:	bf00      	nop
 8002b00:	370c      	adds	r7, #12
 8002b02:	46bd      	mov	sp, r7
 8002b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b08:	4770      	bx	lr
 8002b0a:	bf00      	nop
 8002b0c:	e000e100 	.word	0xe000e100

08002b10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b10:	b480      	push	{r7}
 8002b12:	b083      	sub	sp, #12
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	4603      	mov	r3, r0
 8002b18:	6039      	str	r1, [r7, #0]
 8002b1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	db0a      	blt.n	8002b3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	b2da      	uxtb	r2, r3
 8002b28:	490c      	ldr	r1, [pc, #48]	@ (8002b5c <__NVIC_SetPriority+0x4c>)
 8002b2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b2e:	0112      	lsls	r2, r2, #4
 8002b30:	b2d2      	uxtb	r2, r2
 8002b32:	440b      	add	r3, r1
 8002b34:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b38:	e00a      	b.n	8002b50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	b2da      	uxtb	r2, r3
 8002b3e:	4908      	ldr	r1, [pc, #32]	@ (8002b60 <__NVIC_SetPriority+0x50>)
 8002b40:	79fb      	ldrb	r3, [r7, #7]
 8002b42:	f003 030f 	and.w	r3, r3, #15
 8002b46:	3b04      	subs	r3, #4
 8002b48:	0112      	lsls	r2, r2, #4
 8002b4a:	b2d2      	uxtb	r2, r2
 8002b4c:	440b      	add	r3, r1
 8002b4e:	761a      	strb	r2, [r3, #24]
}
 8002b50:	bf00      	nop
 8002b52:	370c      	adds	r7, #12
 8002b54:	46bd      	mov	sp, r7
 8002b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5a:	4770      	bx	lr
 8002b5c:	e000e100 	.word	0xe000e100
 8002b60:	e000ed00 	.word	0xe000ed00

08002b64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b64:	b480      	push	{r7}
 8002b66:	b089      	sub	sp, #36	@ 0x24
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	60f8      	str	r0, [r7, #12]
 8002b6c:	60b9      	str	r1, [r7, #8]
 8002b6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	f003 0307 	and.w	r3, r3, #7
 8002b76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b78:	69fb      	ldr	r3, [r7, #28]
 8002b7a:	f1c3 0307 	rsb	r3, r3, #7
 8002b7e:	2b04      	cmp	r3, #4
 8002b80:	bf28      	it	cs
 8002b82:	2304      	movcs	r3, #4
 8002b84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b86:	69fb      	ldr	r3, [r7, #28]
 8002b88:	3304      	adds	r3, #4
 8002b8a:	2b06      	cmp	r3, #6
 8002b8c:	d902      	bls.n	8002b94 <NVIC_EncodePriority+0x30>
 8002b8e:	69fb      	ldr	r3, [r7, #28]
 8002b90:	3b03      	subs	r3, #3
 8002b92:	e000      	b.n	8002b96 <NVIC_EncodePriority+0x32>
 8002b94:	2300      	movs	r3, #0
 8002b96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b98:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002b9c:	69bb      	ldr	r3, [r7, #24]
 8002b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba2:	43da      	mvns	r2, r3
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	401a      	ands	r2, r3
 8002ba8:	697b      	ldr	r3, [r7, #20]
 8002baa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002bac:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002bb0:	697b      	ldr	r3, [r7, #20]
 8002bb2:	fa01 f303 	lsl.w	r3, r1, r3
 8002bb6:	43d9      	mvns	r1, r3
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bbc:	4313      	orrs	r3, r2
         );
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	3724      	adds	r7, #36	@ 0x24
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc8:	4770      	bx	lr
	...

08002bcc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b082      	sub	sp, #8
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	3b01      	subs	r3, #1
 8002bd8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002bdc:	d301      	bcc.n	8002be2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002bde:	2301      	movs	r3, #1
 8002be0:	e00f      	b.n	8002c02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002be2:	4a0a      	ldr	r2, [pc, #40]	@ (8002c0c <SysTick_Config+0x40>)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	3b01      	subs	r3, #1
 8002be8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002bea:	210f      	movs	r1, #15
 8002bec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002bf0:	f7ff ff8e 	bl	8002b10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002bf4:	4b05      	ldr	r3, [pc, #20]	@ (8002c0c <SysTick_Config+0x40>)
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002bfa:	4b04      	ldr	r3, [pc, #16]	@ (8002c0c <SysTick_Config+0x40>)
 8002bfc:	2207      	movs	r2, #7
 8002bfe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c00:	2300      	movs	r3, #0
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	3708      	adds	r7, #8
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}
 8002c0a:	bf00      	nop
 8002c0c:	e000e010 	.word	0xe000e010

08002c10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b082      	sub	sp, #8
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c18:	6878      	ldr	r0, [r7, #4]
 8002c1a:	f7ff ff29 	bl	8002a70 <__NVIC_SetPriorityGrouping>
}
 8002c1e:	bf00      	nop
 8002c20:	3708      	adds	r7, #8
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}

08002c26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c26:	b580      	push	{r7, lr}
 8002c28:	b086      	sub	sp, #24
 8002c2a:	af00      	add	r7, sp, #0
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	60b9      	str	r1, [r7, #8]
 8002c30:	607a      	str	r2, [r7, #4]
 8002c32:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002c34:	2300      	movs	r3, #0
 8002c36:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c38:	f7ff ff3e 	bl	8002ab8 <__NVIC_GetPriorityGrouping>
 8002c3c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c3e:	687a      	ldr	r2, [r7, #4]
 8002c40:	68b9      	ldr	r1, [r7, #8]
 8002c42:	6978      	ldr	r0, [r7, #20]
 8002c44:	f7ff ff8e 	bl	8002b64 <NVIC_EncodePriority>
 8002c48:	4602      	mov	r2, r0
 8002c4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c4e:	4611      	mov	r1, r2
 8002c50:	4618      	mov	r0, r3
 8002c52:	f7ff ff5d 	bl	8002b10 <__NVIC_SetPriority>
}
 8002c56:	bf00      	nop
 8002c58:	3718      	adds	r7, #24
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bd80      	pop	{r7, pc}

08002c5e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c5e:	b580      	push	{r7, lr}
 8002c60:	b082      	sub	sp, #8
 8002c62:	af00      	add	r7, sp, #0
 8002c64:	4603      	mov	r3, r0
 8002c66:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	f7ff ff31 	bl	8002ad4 <__NVIC_EnableIRQ>
}
 8002c72:	bf00      	nop
 8002c74:	3708      	adds	r7, #8
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}

08002c7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c7a:	b580      	push	{r7, lr}
 8002c7c:	b082      	sub	sp, #8
 8002c7e:	af00      	add	r7, sp, #0
 8002c80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c82:	6878      	ldr	r0, [r7, #4]
 8002c84:	f7ff ffa2 	bl	8002bcc <SysTick_Config>
 8002c88:	4603      	mov	r3, r0
}
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	3708      	adds	r7, #8
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bd80      	pop	{r7, pc}

08002c92 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002c92:	b580      	push	{r7, lr}
 8002c94:	b082      	sub	sp, #8
 8002c96:	af00      	add	r7, sp, #0
 8002c98:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d101      	bne.n	8002ca4 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	e00e      	b.n	8002cc2 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	795b      	ldrb	r3, [r3, #5]
 8002ca8:	b2db      	uxtb	r3, r3
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d105      	bne.n	8002cba <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002cb4:	6878      	ldr	r0, [r7, #4]
 8002cb6:	f7ff fc7b 	bl	80025b0 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2201      	movs	r2, #1
 8002cbe:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002cc0:	2300      	movs	r3, #0
}
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	3708      	adds	r7, #8
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}
	...

08002ccc <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b086      	sub	sp, #24
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	60f8      	str	r0, [r7, #12]
 8002cd4:	60b9      	str	r1, [r7, #8]
 8002cd6:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	75fb      	strb	r3, [r7, #23]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002cde:	4b23      	ldr	r3, [pc, #140]	@ (8002d6c <HAL_FLASH_Program+0xa0>)
 8002ce0:	7e1b      	ldrb	r3, [r3, #24]
 8002ce2:	2b01      	cmp	r3, #1
 8002ce4:	d101      	bne.n	8002cea <HAL_FLASH_Program+0x1e>
 8002ce6:	2302      	movs	r3, #2
 8002ce8:	e03b      	b.n	8002d62 <HAL_FLASH_Program+0x96>
 8002cea:	4b20      	ldr	r3, [pc, #128]	@ (8002d6c <HAL_FLASH_Program+0xa0>)
 8002cec:	2201      	movs	r2, #1
 8002cee:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002cf0:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002cf4:	f000 f870 	bl	8002dd8 <FLASH_WaitForLastOperation>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 8002cfc:	7dfb      	ldrb	r3, [r7, #23]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d12b      	bne.n	8002d5a <HAL_FLASH_Program+0x8e>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d105      	bne.n	8002d14 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8002d08:	783b      	ldrb	r3, [r7, #0]
 8002d0a:	4619      	mov	r1, r3
 8002d0c:	68b8      	ldr	r0, [r7, #8]
 8002d0e:	f000 f91b 	bl	8002f48 <FLASH_Program_Byte>
 8002d12:	e016      	b.n	8002d42 <HAL_FLASH_Program+0x76>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	2b01      	cmp	r3, #1
 8002d18:	d105      	bne.n	8002d26 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8002d1a:	883b      	ldrh	r3, [r7, #0]
 8002d1c:	4619      	mov	r1, r3
 8002d1e:	68b8      	ldr	r0, [r7, #8]
 8002d20:	f000 f8ee 	bl	8002f00 <FLASH_Program_HalfWord>
 8002d24:	e00d      	b.n	8002d42 <HAL_FLASH_Program+0x76>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	2b02      	cmp	r3, #2
 8002d2a:	d105      	bne.n	8002d38 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	4619      	mov	r1, r3
 8002d30:	68b8      	ldr	r0, [r7, #8]
 8002d32:	f000 f8c3 	bl	8002ebc <FLASH_Program_Word>
 8002d36:	e004      	b.n	8002d42 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8002d38:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002d3c:	68b8      	ldr	r0, [r7, #8]
 8002d3e:	f000 f88b 	bl	8002e58 <FLASH_Program_DoubleWord>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002d42:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002d46:	f000 f847 	bl	8002dd8 <FLASH_WaitForLastOperation>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 8002d4e:	4b08      	ldr	r3, [pc, #32]	@ (8002d70 <HAL_FLASH_Program+0xa4>)
 8002d50:	691b      	ldr	r3, [r3, #16]
 8002d52:	4a07      	ldr	r2, [pc, #28]	@ (8002d70 <HAL_FLASH_Program+0xa4>)
 8002d54:	f023 0301 	bic.w	r3, r3, #1
 8002d58:	6113      	str	r3, [r2, #16]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002d5a:	4b04      	ldr	r3, [pc, #16]	@ (8002d6c <HAL_FLASH_Program+0xa0>)
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	761a      	strb	r2, [r3, #24]

  return status;
 8002d60:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d62:	4618      	mov	r0, r3
 8002d64:	3718      	adds	r7, #24
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}
 8002d6a:	bf00      	nop
 8002d6c:	200002bc 	.word	0x200002bc
 8002d70:	40023c00 	.word	0x40023c00

08002d74 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8002d74:	b480      	push	{r7}
 8002d76:	b083      	sub	sp, #12
 8002d78:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002d7e:	4b0b      	ldr	r3, [pc, #44]	@ (8002dac <HAL_FLASH_Unlock+0x38>)
 8002d80:	691b      	ldr	r3, [r3, #16]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	da0b      	bge.n	8002d9e <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8002d86:	4b09      	ldr	r3, [pc, #36]	@ (8002dac <HAL_FLASH_Unlock+0x38>)
 8002d88:	4a09      	ldr	r2, [pc, #36]	@ (8002db0 <HAL_FLASH_Unlock+0x3c>)
 8002d8a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8002d8c:	4b07      	ldr	r3, [pc, #28]	@ (8002dac <HAL_FLASH_Unlock+0x38>)
 8002d8e:	4a09      	ldr	r2, [pc, #36]	@ (8002db4 <HAL_FLASH_Unlock+0x40>)
 8002d90:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002d92:	4b06      	ldr	r3, [pc, #24]	@ (8002dac <HAL_FLASH_Unlock+0x38>)
 8002d94:	691b      	ldr	r3, [r3, #16]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	da01      	bge.n	8002d9e <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8002d9e:	79fb      	ldrb	r3, [r7, #7]
}
 8002da0:	4618      	mov	r0, r3
 8002da2:	370c      	adds	r7, #12
 8002da4:	46bd      	mov	sp, r7
 8002da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002daa:	4770      	bx	lr
 8002dac:	40023c00 	.word	0x40023c00
 8002db0:	45670123 	.word	0x45670123
 8002db4:	cdef89ab 	.word	0xcdef89ab

08002db8 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8002db8:	b480      	push	{r7}
 8002dba:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8002dbc:	4b05      	ldr	r3, [pc, #20]	@ (8002dd4 <HAL_FLASH_Lock+0x1c>)
 8002dbe:	691b      	ldr	r3, [r3, #16]
 8002dc0:	4a04      	ldr	r2, [pc, #16]	@ (8002dd4 <HAL_FLASH_Lock+0x1c>)
 8002dc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002dc6:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 8002dc8:	2300      	movs	r3, #0
}
 8002dca:	4618      	mov	r0, r3
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd2:	4770      	bx	lr
 8002dd4:	40023c00 	.word	0x40023c00

08002dd8 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b084      	sub	sp, #16
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002de0:	2300      	movs	r3, #0
 8002de2:	60fb      	str	r3, [r7, #12]

  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002de4:	4b1a      	ldr	r3, [pc, #104]	@ (8002e50 <FLASH_WaitForLastOperation+0x78>)
 8002de6:	2200      	movs	r2, #0
 8002de8:	61da      	str	r2, [r3, #28]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8002dea:	f7ff fe11 	bl	8002a10 <HAL_GetTick>
 8002dee:	60f8      	str	r0, [r7, #12]

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 8002df0:	e010      	b.n	8002e14 <FLASH_WaitForLastOperation+0x3c>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002df8:	d00c      	beq.n	8002e14 <FLASH_WaitForLastOperation+0x3c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d007      	beq.n	8002e10 <FLASH_WaitForLastOperation+0x38>
 8002e00:	f7ff fe06 	bl	8002a10 <HAL_GetTick>
 8002e04:	4602      	mov	r2, r0
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	1ad3      	subs	r3, r2, r3
 8002e0a:	687a      	ldr	r2, [r7, #4]
 8002e0c:	429a      	cmp	r2, r3
 8002e0e:	d201      	bcs.n	8002e14 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8002e10:	2303      	movs	r3, #3
 8002e12:	e019      	b.n	8002e48 <FLASH_WaitForLastOperation+0x70>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 8002e14:	4b0f      	ldr	r3, [pc, #60]	@ (8002e54 <FLASH_WaitForLastOperation+0x7c>)
 8002e16:	68db      	ldr	r3, [r3, #12]
 8002e18:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d1e8      	bne.n	8002df2 <FLASH_WaitForLastOperation+0x1a>
      }
    }
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8002e20:	4b0c      	ldr	r3, [pc, #48]	@ (8002e54 <FLASH_WaitForLastOperation+0x7c>)
 8002e22:	68db      	ldr	r3, [r3, #12]
 8002e24:	f003 0301 	and.w	r3, r3, #1
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d002      	beq.n	8002e32 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002e2c:	4b09      	ldr	r3, [pc, #36]	@ (8002e54 <FLASH_WaitForLastOperation+0x7c>)
 8002e2e:	2201      	movs	r2, #1
 8002e30:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                            FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8002e32:	4b08      	ldr	r3, [pc, #32]	@ (8002e54 <FLASH_WaitForLastOperation+0x7c>)
 8002e34:	68db      	ldr	r3, [r3, #12]
 8002e36:	f003 03f2 	and.w	r3, r3, #242	@ 0xf2
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d003      	beq.n	8002e46 <FLASH_WaitForLastOperation+0x6e>
                            FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8002e3e:	f000 f8a5 	bl	8002f8c <FLASH_SetErrorCode>
    return HAL_ERROR;
 8002e42:	2301      	movs	r3, #1
 8002e44:	e000      	b.n	8002e48 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8002e46:	2300      	movs	r3, #0

}
 8002e48:	4618      	mov	r0, r3
 8002e4a:	3710      	adds	r7, #16
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bd80      	pop	{r7, pc}
 8002e50:	200002bc 	.word	0x200002bc
 8002e54:	40023c00 	.word	0x40023c00

08002e58 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b085      	sub	sp, #20
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	60f8      	str	r0, [r7, #12]
 8002e60:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002e64:	4b14      	ldr	r3, [pc, #80]	@ (8002eb8 <FLASH_Program_DoubleWord+0x60>)
 8002e66:	691b      	ldr	r3, [r3, #16]
 8002e68:	4a13      	ldr	r2, [pc, #76]	@ (8002eb8 <FLASH_Program_DoubleWord+0x60>)
 8002e6a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002e6e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8002e70:	4b11      	ldr	r3, [pc, #68]	@ (8002eb8 <FLASH_Program_DoubleWord+0x60>)
 8002e72:	691b      	ldr	r3, [r3, #16]
 8002e74:	4a10      	ldr	r2, [pc, #64]	@ (8002eb8 <FLASH_Program_DoubleWord+0x60>)
 8002e76:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8002e7a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002e7c:	4b0e      	ldr	r3, [pc, #56]	@ (8002eb8 <FLASH_Program_DoubleWord+0x60>)
 8002e7e:	691b      	ldr	r3, [r3, #16]
 8002e80:	4a0d      	ldr	r2, [pc, #52]	@ (8002eb8 <FLASH_Program_DoubleWord+0x60>)
 8002e82:	f043 0301 	orr.w	r3, r3, #1
 8002e86:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t *)Address = (uint32_t)Data;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	683a      	ldr	r2, [r7, #0]
 8002e8c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8002e8e:	f3bf 8f6f 	isb	sy
}
 8002e92:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t *)(Address + 4) = (uint32_t)(Data >> 32);
 8002e94:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002e98:	f04f 0200 	mov.w	r2, #0
 8002e9c:	f04f 0300 	mov.w	r3, #0
 8002ea0:	000a      	movs	r2, r1
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	68f9      	ldr	r1, [r7, #12]
 8002ea6:	3104      	adds	r1, #4
 8002ea8:	4613      	mov	r3, r2
 8002eaa:	600b      	str	r3, [r1, #0]
}
 8002eac:	bf00      	nop
 8002eae:	3714      	adds	r7, #20
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb6:	4770      	bx	lr
 8002eb8:	40023c00 	.word	0x40023c00

08002ebc <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	b083      	sub	sp, #12
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
 8002ec4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002ec6:	4b0d      	ldr	r3, [pc, #52]	@ (8002efc <FLASH_Program_Word+0x40>)
 8002ec8:	691b      	ldr	r3, [r3, #16]
 8002eca:	4a0c      	ldr	r2, [pc, #48]	@ (8002efc <FLASH_Program_Word+0x40>)
 8002ecc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002ed0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8002ed2:	4b0a      	ldr	r3, [pc, #40]	@ (8002efc <FLASH_Program_Word+0x40>)
 8002ed4:	691b      	ldr	r3, [r3, #16]
 8002ed6:	4a09      	ldr	r2, [pc, #36]	@ (8002efc <FLASH_Program_Word+0x40>)
 8002ed8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002edc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002ede:	4b07      	ldr	r3, [pc, #28]	@ (8002efc <FLASH_Program_Word+0x40>)
 8002ee0:	691b      	ldr	r3, [r3, #16]
 8002ee2:	4a06      	ldr	r2, [pc, #24]	@ (8002efc <FLASH_Program_Word+0x40>)
 8002ee4:	f043 0301 	orr.w	r3, r3, #1
 8002ee8:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t *)Address = Data;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	683a      	ldr	r2, [r7, #0]
 8002eee:	601a      	str	r2, [r3, #0]
}
 8002ef0:	bf00      	nop
 8002ef2:	370c      	adds	r7, #12
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efa:	4770      	bx	lr
 8002efc:	40023c00 	.word	0x40023c00

08002f00 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8002f00:	b480      	push	{r7}
 8002f02:	b083      	sub	sp, #12
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
 8002f08:	460b      	mov	r3, r1
 8002f0a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002f0c:	4b0d      	ldr	r3, [pc, #52]	@ (8002f44 <FLASH_Program_HalfWord+0x44>)
 8002f0e:	691b      	ldr	r3, [r3, #16]
 8002f10:	4a0c      	ldr	r2, [pc, #48]	@ (8002f44 <FLASH_Program_HalfWord+0x44>)
 8002f12:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002f16:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8002f18:	4b0a      	ldr	r3, [pc, #40]	@ (8002f44 <FLASH_Program_HalfWord+0x44>)
 8002f1a:	691b      	ldr	r3, [r3, #16]
 8002f1c:	4a09      	ldr	r2, [pc, #36]	@ (8002f44 <FLASH_Program_HalfWord+0x44>)
 8002f1e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f22:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002f24:	4b07      	ldr	r3, [pc, #28]	@ (8002f44 <FLASH_Program_HalfWord+0x44>)
 8002f26:	691b      	ldr	r3, [r3, #16]
 8002f28:	4a06      	ldr	r2, [pc, #24]	@ (8002f44 <FLASH_Program_HalfWord+0x44>)
 8002f2a:	f043 0301 	orr.w	r3, r3, #1
 8002f2e:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t *)Address = Data;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	887a      	ldrh	r2, [r7, #2]
 8002f34:	801a      	strh	r2, [r3, #0]
}
 8002f36:	bf00      	nop
 8002f38:	370c      	adds	r7, #12
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f40:	4770      	bx	lr
 8002f42:	bf00      	nop
 8002f44:	40023c00 	.word	0x40023c00

08002f48 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b083      	sub	sp, #12
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
 8002f50:	460b      	mov	r3, r1
 8002f52:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002f54:	4b0c      	ldr	r3, [pc, #48]	@ (8002f88 <FLASH_Program_Byte+0x40>)
 8002f56:	691b      	ldr	r3, [r3, #16]
 8002f58:	4a0b      	ldr	r2, [pc, #44]	@ (8002f88 <FLASH_Program_Byte+0x40>)
 8002f5a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002f5e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8002f60:	4b09      	ldr	r3, [pc, #36]	@ (8002f88 <FLASH_Program_Byte+0x40>)
 8002f62:	4a09      	ldr	r2, [pc, #36]	@ (8002f88 <FLASH_Program_Byte+0x40>)
 8002f64:	691b      	ldr	r3, [r3, #16]
 8002f66:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002f68:	4b07      	ldr	r3, [pc, #28]	@ (8002f88 <FLASH_Program_Byte+0x40>)
 8002f6a:	691b      	ldr	r3, [r3, #16]
 8002f6c:	4a06      	ldr	r2, [pc, #24]	@ (8002f88 <FLASH_Program_Byte+0x40>)
 8002f6e:	f043 0301 	orr.w	r3, r3, #1
 8002f72:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t *)Address = Data;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	78fa      	ldrb	r2, [r7, #3]
 8002f78:	701a      	strb	r2, [r3, #0]
}
 8002f7a:	bf00      	nop
 8002f7c:	370c      	adds	r7, #12
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f84:	4770      	bx	lr
 8002f86:	bf00      	nop
 8002f88:	40023c00 	.word	0x40023c00

08002f8c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	af00      	add	r7, sp, #0
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8002f90:	4b27      	ldr	r3, [pc, #156]	@ (8003030 <FLASH_SetErrorCode+0xa4>)
 8002f92:	68db      	ldr	r3, [r3, #12]
 8002f94:	f003 0310 	and.w	r3, r3, #16
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d008      	beq.n	8002fae <FLASH_SetErrorCode+0x22>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8002f9c:	4b25      	ldr	r3, [pc, #148]	@ (8003034 <FLASH_SetErrorCode+0xa8>)
 8002f9e:	69db      	ldr	r3, [r3, #28]
 8002fa0:	f043 0310 	orr.w	r3, r3, #16
 8002fa4:	4a23      	ldr	r2, [pc, #140]	@ (8003034 <FLASH_SetErrorCode+0xa8>)
 8002fa6:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH write protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8002fa8:	4b21      	ldr	r3, [pc, #132]	@ (8003030 <FLASH_SetErrorCode+0xa4>)
 8002faa:	2210      	movs	r2, #16
 8002fac:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8002fae:	4b20      	ldr	r3, [pc, #128]	@ (8003030 <FLASH_SetErrorCode+0xa4>)
 8002fb0:	68db      	ldr	r3, [r3, #12]
 8002fb2:	f003 0320 	and.w	r3, r3, #32
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d008      	beq.n	8002fcc <FLASH_SetErrorCode+0x40>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8002fba:	4b1e      	ldr	r3, [pc, #120]	@ (8003034 <FLASH_SetErrorCode+0xa8>)
 8002fbc:	69db      	ldr	r3, [r3, #28]
 8002fbe:	f043 0308 	orr.w	r3, r3, #8
 8002fc2:	4a1c      	ldr	r2, [pc, #112]	@ (8003034 <FLASH_SetErrorCode+0xa8>)
 8002fc4:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming alignment error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8002fc6:	4b1a      	ldr	r3, [pc, #104]	@ (8003030 <FLASH_SetErrorCode+0xa4>)
 8002fc8:	2220      	movs	r2, #32
 8002fca:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8002fcc:	4b18      	ldr	r3, [pc, #96]	@ (8003030 <FLASH_SetErrorCode+0xa4>)
 8002fce:	68db      	ldr	r3, [r3, #12]
 8002fd0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d008      	beq.n	8002fea <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8002fd8:	4b16      	ldr	r3, [pc, #88]	@ (8003034 <FLASH_SetErrorCode+0xa8>)
 8002fda:	69db      	ldr	r3, [r3, #28]
 8002fdc:	f043 0304 	orr.w	r3, r3, #4
 8002fe0:	4a14      	ldr	r2, [pc, #80]	@ (8003034 <FLASH_SetErrorCode+0xa8>)
 8002fe2:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8002fe4:	4b12      	ldr	r3, [pc, #72]	@ (8003030 <FLASH_SetErrorCode+0xa4>)
 8002fe6:	2240      	movs	r2, #64	@ 0x40
 8002fe8:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8002fea:	4b11      	ldr	r3, [pc, #68]	@ (8003030 <FLASH_SetErrorCode+0xa4>)
 8002fec:	68db      	ldr	r3, [r3, #12]
 8002fee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d008      	beq.n	8003008 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8002ff6:	4b0f      	ldr	r3, [pc, #60]	@ (8003034 <FLASH_SetErrorCode+0xa8>)
 8002ff8:	69db      	ldr	r3, [r3, #28]
 8002ffa:	f043 0302 	orr.w	r3, r3, #2
 8002ffe:	4a0d      	ldr	r2, [pc, #52]	@ (8003034 <FLASH_SetErrorCode+0xa8>)
 8003000:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8003002:	4b0b      	ldr	r3, [pc, #44]	@ (8003030 <FLASH_SetErrorCode+0xa4>)
 8003004:	2280      	movs	r2, #128	@ 0x80
 8003006:	60da      	str	r2, [r3, #12]

    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8003008:	4b09      	ldr	r3, [pc, #36]	@ (8003030 <FLASH_SetErrorCode+0xa4>)
 800300a:	68db      	ldr	r3, [r3, #12]
 800300c:	f003 0302 	and.w	r3, r3, #2
 8003010:	2b00      	cmp	r3, #0
 8003012:	d008      	beq.n	8003026 <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8003014:	4b07      	ldr	r3, [pc, #28]	@ (8003034 <FLASH_SetErrorCode+0xa8>)
 8003016:	69db      	ldr	r3, [r3, #28]
 8003018:	f043 0320 	orr.w	r3, r3, #32
 800301c:	4a05      	ldr	r2, [pc, #20]	@ (8003034 <FLASH_SetErrorCode+0xa8>)
 800301e:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8003020:	4b03      	ldr	r3, [pc, #12]	@ (8003030 <FLASH_SetErrorCode+0xa4>)
 8003022:	2202      	movs	r2, #2
 8003024:	60da      	str	r2, [r3, #12]
  }
}
 8003026:	bf00      	nop
 8003028:	46bd      	mov	sp, r7
 800302a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302e:	4770      	bx	lr
 8003030:	40023c00 	.word	0x40023c00
 8003034:	200002bc 	.word	0x200002bc

08003038 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8003038:	b480      	push	{r7}
 800303a:	b085      	sub	sp, #20
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
 8003040:	460b      	mov	r3, r1
 8003042:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8003044:	2300      	movs	r3, #0
 8003046:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8003048:	78fb      	ldrb	r3, [r7, #3]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d102      	bne.n	8003054 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 800304e:	2300      	movs	r3, #0
 8003050:	60fb      	str	r3, [r7, #12]
 8003052:	e010      	b.n	8003076 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8003054:	78fb      	ldrb	r3, [r7, #3]
 8003056:	2b01      	cmp	r3, #1
 8003058:	d103      	bne.n	8003062 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800305a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800305e:	60fb      	str	r3, [r7, #12]
 8003060:	e009      	b.n	8003076 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8003062:	78fb      	ldrb	r3, [r7, #3]
 8003064:	2b02      	cmp	r3, #2
 8003066:	d103      	bne.n	8003070 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8003068:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800306c:	60fb      	str	r3, [r7, #12]
 800306e:	e002      	b.n	8003076 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8003070:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003074:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003076:	4b13      	ldr	r3, [pc, #76]	@ (80030c4 <FLASH_Erase_Sector+0x8c>)
 8003078:	691b      	ldr	r3, [r3, #16]
 800307a:	4a12      	ldr	r2, [pc, #72]	@ (80030c4 <FLASH_Erase_Sector+0x8c>)
 800307c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003080:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8003082:	4b10      	ldr	r3, [pc, #64]	@ (80030c4 <FLASH_Erase_Sector+0x8c>)
 8003084:	691a      	ldr	r2, [r3, #16]
 8003086:	490f      	ldr	r1, [pc, #60]	@ (80030c4 <FLASH_Erase_Sector+0x8c>)
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	4313      	orrs	r3, r2
 800308c:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800308e:	4b0d      	ldr	r3, [pc, #52]	@ (80030c4 <FLASH_Erase_Sector+0x8c>)
 8003090:	691b      	ldr	r3, [r3, #16]
 8003092:	4a0c      	ldr	r2, [pc, #48]	@ (80030c4 <FLASH_Erase_Sector+0x8c>)
 8003094:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8003098:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800309a:	4b0a      	ldr	r3, [pc, #40]	@ (80030c4 <FLASH_Erase_Sector+0x8c>)
 800309c:	691a      	ldr	r2, [r3, #16]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	00db      	lsls	r3, r3, #3
 80030a2:	4313      	orrs	r3, r2
 80030a4:	4a07      	ldr	r2, [pc, #28]	@ (80030c4 <FLASH_Erase_Sector+0x8c>)
 80030a6:	f043 0302 	orr.w	r3, r3, #2
 80030aa:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 80030ac:	4b05      	ldr	r3, [pc, #20]	@ (80030c4 <FLASH_Erase_Sector+0x8c>)
 80030ae:	691b      	ldr	r3, [r3, #16]
 80030b0:	4a04      	ldr	r2, [pc, #16]	@ (80030c4 <FLASH_Erase_Sector+0x8c>)
 80030b2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030b6:	6113      	str	r3, [r2, #16]
}
 80030b8:	bf00      	nop
 80030ba:	3714      	adds	r7, #20
 80030bc:	46bd      	mov	sp, r7
 80030be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c2:	4770      	bx	lr
 80030c4:	40023c00 	.word	0x40023c00

080030c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b089      	sub	sp, #36	@ 0x24
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
 80030d0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80030d2:	2300      	movs	r3, #0
 80030d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80030d6:	2300      	movs	r3, #0
 80030d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80030da:	2300      	movs	r3, #0
 80030dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80030de:	2300      	movs	r3, #0
 80030e0:	61fb      	str	r3, [r7, #28]
 80030e2:	e16b      	b.n	80033bc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80030e4:	2201      	movs	r2, #1
 80030e6:	69fb      	ldr	r3, [r7, #28]
 80030e8:	fa02 f303 	lsl.w	r3, r2, r3
 80030ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	697a      	ldr	r2, [r7, #20]
 80030f4:	4013      	ands	r3, r2
 80030f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80030f8:	693a      	ldr	r2, [r7, #16]
 80030fa:	697b      	ldr	r3, [r7, #20]
 80030fc:	429a      	cmp	r2, r3
 80030fe:	f040 815a 	bne.w	80033b6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	f003 0303 	and.w	r3, r3, #3
 800310a:	2b01      	cmp	r3, #1
 800310c:	d005      	beq.n	800311a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003116:	2b02      	cmp	r3, #2
 8003118:	d130      	bne.n	800317c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	689b      	ldr	r3, [r3, #8]
 800311e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003120:	69fb      	ldr	r3, [r7, #28]
 8003122:	005b      	lsls	r3, r3, #1
 8003124:	2203      	movs	r2, #3
 8003126:	fa02 f303 	lsl.w	r3, r2, r3
 800312a:	43db      	mvns	r3, r3
 800312c:	69ba      	ldr	r2, [r7, #24]
 800312e:	4013      	ands	r3, r2
 8003130:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	68da      	ldr	r2, [r3, #12]
 8003136:	69fb      	ldr	r3, [r7, #28]
 8003138:	005b      	lsls	r3, r3, #1
 800313a:	fa02 f303 	lsl.w	r3, r2, r3
 800313e:	69ba      	ldr	r2, [r7, #24]
 8003140:	4313      	orrs	r3, r2
 8003142:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	69ba      	ldr	r2, [r7, #24]
 8003148:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003150:	2201      	movs	r2, #1
 8003152:	69fb      	ldr	r3, [r7, #28]
 8003154:	fa02 f303 	lsl.w	r3, r2, r3
 8003158:	43db      	mvns	r3, r3
 800315a:	69ba      	ldr	r2, [r7, #24]
 800315c:	4013      	ands	r3, r2
 800315e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	091b      	lsrs	r3, r3, #4
 8003166:	f003 0201 	and.w	r2, r3, #1
 800316a:	69fb      	ldr	r3, [r7, #28]
 800316c:	fa02 f303 	lsl.w	r3, r2, r3
 8003170:	69ba      	ldr	r2, [r7, #24]
 8003172:	4313      	orrs	r3, r2
 8003174:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	69ba      	ldr	r2, [r7, #24]
 800317a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	f003 0303 	and.w	r3, r3, #3
 8003184:	2b03      	cmp	r3, #3
 8003186:	d017      	beq.n	80031b8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	68db      	ldr	r3, [r3, #12]
 800318c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800318e:	69fb      	ldr	r3, [r7, #28]
 8003190:	005b      	lsls	r3, r3, #1
 8003192:	2203      	movs	r2, #3
 8003194:	fa02 f303 	lsl.w	r3, r2, r3
 8003198:	43db      	mvns	r3, r3
 800319a:	69ba      	ldr	r2, [r7, #24]
 800319c:	4013      	ands	r3, r2
 800319e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	689a      	ldr	r2, [r3, #8]
 80031a4:	69fb      	ldr	r3, [r7, #28]
 80031a6:	005b      	lsls	r3, r3, #1
 80031a8:	fa02 f303 	lsl.w	r3, r2, r3
 80031ac:	69ba      	ldr	r2, [r7, #24]
 80031ae:	4313      	orrs	r3, r2
 80031b0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	69ba      	ldr	r2, [r7, #24]
 80031b6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	f003 0303 	and.w	r3, r3, #3
 80031c0:	2b02      	cmp	r3, #2
 80031c2:	d123      	bne.n	800320c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80031c4:	69fb      	ldr	r3, [r7, #28]
 80031c6:	08da      	lsrs	r2, r3, #3
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	3208      	adds	r2, #8
 80031cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80031d2:	69fb      	ldr	r3, [r7, #28]
 80031d4:	f003 0307 	and.w	r3, r3, #7
 80031d8:	009b      	lsls	r3, r3, #2
 80031da:	220f      	movs	r2, #15
 80031dc:	fa02 f303 	lsl.w	r3, r2, r3
 80031e0:	43db      	mvns	r3, r3
 80031e2:	69ba      	ldr	r2, [r7, #24]
 80031e4:	4013      	ands	r3, r2
 80031e6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	691a      	ldr	r2, [r3, #16]
 80031ec:	69fb      	ldr	r3, [r7, #28]
 80031ee:	f003 0307 	and.w	r3, r3, #7
 80031f2:	009b      	lsls	r3, r3, #2
 80031f4:	fa02 f303 	lsl.w	r3, r2, r3
 80031f8:	69ba      	ldr	r2, [r7, #24]
 80031fa:	4313      	orrs	r3, r2
 80031fc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80031fe:	69fb      	ldr	r3, [r7, #28]
 8003200:	08da      	lsrs	r2, r3, #3
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	3208      	adds	r2, #8
 8003206:	69b9      	ldr	r1, [r7, #24]
 8003208:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003212:	69fb      	ldr	r3, [r7, #28]
 8003214:	005b      	lsls	r3, r3, #1
 8003216:	2203      	movs	r2, #3
 8003218:	fa02 f303 	lsl.w	r3, r2, r3
 800321c:	43db      	mvns	r3, r3
 800321e:	69ba      	ldr	r2, [r7, #24]
 8003220:	4013      	ands	r3, r2
 8003222:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	f003 0203 	and.w	r2, r3, #3
 800322c:	69fb      	ldr	r3, [r7, #28]
 800322e:	005b      	lsls	r3, r3, #1
 8003230:	fa02 f303 	lsl.w	r3, r2, r3
 8003234:	69ba      	ldr	r2, [r7, #24]
 8003236:	4313      	orrs	r3, r2
 8003238:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	69ba      	ldr	r2, [r7, #24]
 800323e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003248:	2b00      	cmp	r3, #0
 800324a:	f000 80b4 	beq.w	80033b6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800324e:	2300      	movs	r3, #0
 8003250:	60fb      	str	r3, [r7, #12]
 8003252:	4b60      	ldr	r3, [pc, #384]	@ (80033d4 <HAL_GPIO_Init+0x30c>)
 8003254:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003256:	4a5f      	ldr	r2, [pc, #380]	@ (80033d4 <HAL_GPIO_Init+0x30c>)
 8003258:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800325c:	6453      	str	r3, [r2, #68]	@ 0x44
 800325e:	4b5d      	ldr	r3, [pc, #372]	@ (80033d4 <HAL_GPIO_Init+0x30c>)
 8003260:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003262:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003266:	60fb      	str	r3, [r7, #12]
 8003268:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800326a:	4a5b      	ldr	r2, [pc, #364]	@ (80033d8 <HAL_GPIO_Init+0x310>)
 800326c:	69fb      	ldr	r3, [r7, #28]
 800326e:	089b      	lsrs	r3, r3, #2
 8003270:	3302      	adds	r3, #2
 8003272:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003276:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003278:	69fb      	ldr	r3, [r7, #28]
 800327a:	f003 0303 	and.w	r3, r3, #3
 800327e:	009b      	lsls	r3, r3, #2
 8003280:	220f      	movs	r2, #15
 8003282:	fa02 f303 	lsl.w	r3, r2, r3
 8003286:	43db      	mvns	r3, r3
 8003288:	69ba      	ldr	r2, [r7, #24]
 800328a:	4013      	ands	r3, r2
 800328c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	4a52      	ldr	r2, [pc, #328]	@ (80033dc <HAL_GPIO_Init+0x314>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d02b      	beq.n	80032ee <HAL_GPIO_Init+0x226>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	4a51      	ldr	r2, [pc, #324]	@ (80033e0 <HAL_GPIO_Init+0x318>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d025      	beq.n	80032ea <HAL_GPIO_Init+0x222>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	4a50      	ldr	r2, [pc, #320]	@ (80033e4 <HAL_GPIO_Init+0x31c>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d01f      	beq.n	80032e6 <HAL_GPIO_Init+0x21e>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	4a4f      	ldr	r2, [pc, #316]	@ (80033e8 <HAL_GPIO_Init+0x320>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d019      	beq.n	80032e2 <HAL_GPIO_Init+0x21a>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	4a4e      	ldr	r2, [pc, #312]	@ (80033ec <HAL_GPIO_Init+0x324>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d013      	beq.n	80032de <HAL_GPIO_Init+0x216>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	4a4d      	ldr	r2, [pc, #308]	@ (80033f0 <HAL_GPIO_Init+0x328>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d00d      	beq.n	80032da <HAL_GPIO_Init+0x212>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	4a4c      	ldr	r2, [pc, #304]	@ (80033f4 <HAL_GPIO_Init+0x32c>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d007      	beq.n	80032d6 <HAL_GPIO_Init+0x20e>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	4a4b      	ldr	r2, [pc, #300]	@ (80033f8 <HAL_GPIO_Init+0x330>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d101      	bne.n	80032d2 <HAL_GPIO_Init+0x20a>
 80032ce:	2307      	movs	r3, #7
 80032d0:	e00e      	b.n	80032f0 <HAL_GPIO_Init+0x228>
 80032d2:	2308      	movs	r3, #8
 80032d4:	e00c      	b.n	80032f0 <HAL_GPIO_Init+0x228>
 80032d6:	2306      	movs	r3, #6
 80032d8:	e00a      	b.n	80032f0 <HAL_GPIO_Init+0x228>
 80032da:	2305      	movs	r3, #5
 80032dc:	e008      	b.n	80032f0 <HAL_GPIO_Init+0x228>
 80032de:	2304      	movs	r3, #4
 80032e0:	e006      	b.n	80032f0 <HAL_GPIO_Init+0x228>
 80032e2:	2303      	movs	r3, #3
 80032e4:	e004      	b.n	80032f0 <HAL_GPIO_Init+0x228>
 80032e6:	2302      	movs	r3, #2
 80032e8:	e002      	b.n	80032f0 <HAL_GPIO_Init+0x228>
 80032ea:	2301      	movs	r3, #1
 80032ec:	e000      	b.n	80032f0 <HAL_GPIO_Init+0x228>
 80032ee:	2300      	movs	r3, #0
 80032f0:	69fa      	ldr	r2, [r7, #28]
 80032f2:	f002 0203 	and.w	r2, r2, #3
 80032f6:	0092      	lsls	r2, r2, #2
 80032f8:	4093      	lsls	r3, r2
 80032fa:	69ba      	ldr	r2, [r7, #24]
 80032fc:	4313      	orrs	r3, r2
 80032fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003300:	4935      	ldr	r1, [pc, #212]	@ (80033d8 <HAL_GPIO_Init+0x310>)
 8003302:	69fb      	ldr	r3, [r7, #28]
 8003304:	089b      	lsrs	r3, r3, #2
 8003306:	3302      	adds	r3, #2
 8003308:	69ba      	ldr	r2, [r7, #24]
 800330a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800330e:	4b3b      	ldr	r3, [pc, #236]	@ (80033fc <HAL_GPIO_Init+0x334>)
 8003310:	689b      	ldr	r3, [r3, #8]
 8003312:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003314:	693b      	ldr	r3, [r7, #16]
 8003316:	43db      	mvns	r3, r3
 8003318:	69ba      	ldr	r2, [r7, #24]
 800331a:	4013      	ands	r3, r2
 800331c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003326:	2b00      	cmp	r3, #0
 8003328:	d003      	beq.n	8003332 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800332a:	69ba      	ldr	r2, [r7, #24]
 800332c:	693b      	ldr	r3, [r7, #16]
 800332e:	4313      	orrs	r3, r2
 8003330:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003332:	4a32      	ldr	r2, [pc, #200]	@ (80033fc <HAL_GPIO_Init+0x334>)
 8003334:	69bb      	ldr	r3, [r7, #24]
 8003336:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003338:	4b30      	ldr	r3, [pc, #192]	@ (80033fc <HAL_GPIO_Init+0x334>)
 800333a:	68db      	ldr	r3, [r3, #12]
 800333c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800333e:	693b      	ldr	r3, [r7, #16]
 8003340:	43db      	mvns	r3, r3
 8003342:	69ba      	ldr	r2, [r7, #24]
 8003344:	4013      	ands	r3, r2
 8003346:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003350:	2b00      	cmp	r3, #0
 8003352:	d003      	beq.n	800335c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003354:	69ba      	ldr	r2, [r7, #24]
 8003356:	693b      	ldr	r3, [r7, #16]
 8003358:	4313      	orrs	r3, r2
 800335a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800335c:	4a27      	ldr	r2, [pc, #156]	@ (80033fc <HAL_GPIO_Init+0x334>)
 800335e:	69bb      	ldr	r3, [r7, #24]
 8003360:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003362:	4b26      	ldr	r3, [pc, #152]	@ (80033fc <HAL_GPIO_Init+0x334>)
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003368:	693b      	ldr	r3, [r7, #16]
 800336a:	43db      	mvns	r3, r3
 800336c:	69ba      	ldr	r2, [r7, #24]
 800336e:	4013      	ands	r3, r2
 8003370:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800337a:	2b00      	cmp	r3, #0
 800337c:	d003      	beq.n	8003386 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800337e:	69ba      	ldr	r2, [r7, #24]
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	4313      	orrs	r3, r2
 8003384:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003386:	4a1d      	ldr	r2, [pc, #116]	@ (80033fc <HAL_GPIO_Init+0x334>)
 8003388:	69bb      	ldr	r3, [r7, #24]
 800338a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800338c:	4b1b      	ldr	r3, [pc, #108]	@ (80033fc <HAL_GPIO_Init+0x334>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003392:	693b      	ldr	r3, [r7, #16]
 8003394:	43db      	mvns	r3, r3
 8003396:	69ba      	ldr	r2, [r7, #24]
 8003398:	4013      	ands	r3, r2
 800339a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d003      	beq.n	80033b0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80033a8:	69ba      	ldr	r2, [r7, #24]
 80033aa:	693b      	ldr	r3, [r7, #16]
 80033ac:	4313      	orrs	r3, r2
 80033ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80033b0:	4a12      	ldr	r2, [pc, #72]	@ (80033fc <HAL_GPIO_Init+0x334>)
 80033b2:	69bb      	ldr	r3, [r7, #24]
 80033b4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80033b6:	69fb      	ldr	r3, [r7, #28]
 80033b8:	3301      	adds	r3, #1
 80033ba:	61fb      	str	r3, [r7, #28]
 80033bc:	69fb      	ldr	r3, [r7, #28]
 80033be:	2b0f      	cmp	r3, #15
 80033c0:	f67f ae90 	bls.w	80030e4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80033c4:	bf00      	nop
 80033c6:	bf00      	nop
 80033c8:	3724      	adds	r7, #36	@ 0x24
 80033ca:	46bd      	mov	sp, r7
 80033cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d0:	4770      	bx	lr
 80033d2:	bf00      	nop
 80033d4:	40023800 	.word	0x40023800
 80033d8:	40013800 	.word	0x40013800
 80033dc:	40020000 	.word	0x40020000
 80033e0:	40020400 	.word	0x40020400
 80033e4:	40020800 	.word	0x40020800
 80033e8:	40020c00 	.word	0x40020c00
 80033ec:	40021000 	.word	0x40021000
 80033f0:	40021400 	.word	0x40021400
 80033f4:	40021800 	.word	0x40021800
 80033f8:	40021c00 	.word	0x40021c00
 80033fc:	40013c00 	.word	0x40013c00

08003400 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003400:	b480      	push	{r7}
 8003402:	b085      	sub	sp, #20
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
 8003408:	460b      	mov	r3, r1
 800340a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	691a      	ldr	r2, [r3, #16]
 8003410:	887b      	ldrh	r3, [r7, #2]
 8003412:	4013      	ands	r3, r2
 8003414:	2b00      	cmp	r3, #0
 8003416:	d002      	beq.n	800341e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003418:	2301      	movs	r3, #1
 800341a:	73fb      	strb	r3, [r7, #15]
 800341c:	e001      	b.n	8003422 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800341e:	2300      	movs	r3, #0
 8003420:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003422:	7bfb      	ldrb	r3, [r7, #15]
}
 8003424:	4618      	mov	r0, r3
 8003426:	3714      	adds	r7, #20
 8003428:	46bd      	mov	sp, r7
 800342a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342e:	4770      	bx	lr

08003430 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b084      	sub	sp, #16
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d101      	bne.n	8003442 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800343e:	2301      	movs	r3, #1
 8003440:	e12b      	b.n	800369a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003448:	b2db      	uxtb	r3, r3
 800344a:	2b00      	cmp	r3, #0
 800344c:	d106      	bne.n	800345c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2200      	movs	r2, #0
 8003452:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003456:	6878      	ldr	r0, [r7, #4]
 8003458:	f7ff f8cc 	bl	80025f4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2224      	movs	r2, #36	@ 0x24
 8003460:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	681a      	ldr	r2, [r3, #0]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f022 0201 	bic.w	r2, r2, #1
 8003472:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	681a      	ldr	r2, [r3, #0]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003482:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	681a      	ldr	r2, [r3, #0]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003492:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003494:	f002 fc6a 	bl	8005d6c <HAL_RCC_GetPCLK1Freq>
 8003498:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	4a81      	ldr	r2, [pc, #516]	@ (80036a4 <HAL_I2C_Init+0x274>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d807      	bhi.n	80034b4 <HAL_I2C_Init+0x84>
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	4a80      	ldr	r2, [pc, #512]	@ (80036a8 <HAL_I2C_Init+0x278>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	bf94      	ite	ls
 80034ac:	2301      	movls	r3, #1
 80034ae:	2300      	movhi	r3, #0
 80034b0:	b2db      	uxtb	r3, r3
 80034b2:	e006      	b.n	80034c2 <HAL_I2C_Init+0x92>
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	4a7d      	ldr	r2, [pc, #500]	@ (80036ac <HAL_I2C_Init+0x27c>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	bf94      	ite	ls
 80034bc:	2301      	movls	r3, #1
 80034be:	2300      	movhi	r3, #0
 80034c0:	b2db      	uxtb	r3, r3
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d001      	beq.n	80034ca <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80034c6:	2301      	movs	r3, #1
 80034c8:	e0e7      	b.n	800369a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	4a78      	ldr	r2, [pc, #480]	@ (80036b0 <HAL_I2C_Init+0x280>)
 80034ce:	fba2 2303 	umull	r2, r3, r2, r3
 80034d2:	0c9b      	lsrs	r3, r3, #18
 80034d4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	68ba      	ldr	r2, [r7, #8]
 80034e6:	430a      	orrs	r2, r1
 80034e8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	6a1b      	ldr	r3, [r3, #32]
 80034f0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	4a6a      	ldr	r2, [pc, #424]	@ (80036a4 <HAL_I2C_Init+0x274>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d802      	bhi.n	8003504 <HAL_I2C_Init+0xd4>
 80034fe:	68bb      	ldr	r3, [r7, #8]
 8003500:	3301      	adds	r3, #1
 8003502:	e009      	b.n	8003518 <HAL_I2C_Init+0xe8>
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800350a:	fb02 f303 	mul.w	r3, r2, r3
 800350e:	4a69      	ldr	r2, [pc, #420]	@ (80036b4 <HAL_I2C_Init+0x284>)
 8003510:	fba2 2303 	umull	r2, r3, r2, r3
 8003514:	099b      	lsrs	r3, r3, #6
 8003516:	3301      	adds	r3, #1
 8003518:	687a      	ldr	r2, [r7, #4]
 800351a:	6812      	ldr	r2, [r2, #0]
 800351c:	430b      	orrs	r3, r1
 800351e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	69db      	ldr	r3, [r3, #28]
 8003526:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800352a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	495c      	ldr	r1, [pc, #368]	@ (80036a4 <HAL_I2C_Init+0x274>)
 8003534:	428b      	cmp	r3, r1
 8003536:	d819      	bhi.n	800356c <HAL_I2C_Init+0x13c>
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	1e59      	subs	r1, r3, #1
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	005b      	lsls	r3, r3, #1
 8003542:	fbb1 f3f3 	udiv	r3, r1, r3
 8003546:	1c59      	adds	r1, r3, #1
 8003548:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800354c:	400b      	ands	r3, r1
 800354e:	2b00      	cmp	r3, #0
 8003550:	d00a      	beq.n	8003568 <HAL_I2C_Init+0x138>
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	1e59      	subs	r1, r3, #1
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	005b      	lsls	r3, r3, #1
 800355c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003560:	3301      	adds	r3, #1
 8003562:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003566:	e051      	b.n	800360c <HAL_I2C_Init+0x1dc>
 8003568:	2304      	movs	r3, #4
 800356a:	e04f      	b.n	800360c <HAL_I2C_Init+0x1dc>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	689b      	ldr	r3, [r3, #8]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d111      	bne.n	8003598 <HAL_I2C_Init+0x168>
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	1e58      	subs	r0, r3, #1
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6859      	ldr	r1, [r3, #4]
 800357c:	460b      	mov	r3, r1
 800357e:	005b      	lsls	r3, r3, #1
 8003580:	440b      	add	r3, r1
 8003582:	fbb0 f3f3 	udiv	r3, r0, r3
 8003586:	3301      	adds	r3, #1
 8003588:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800358c:	2b00      	cmp	r3, #0
 800358e:	bf0c      	ite	eq
 8003590:	2301      	moveq	r3, #1
 8003592:	2300      	movne	r3, #0
 8003594:	b2db      	uxtb	r3, r3
 8003596:	e012      	b.n	80035be <HAL_I2C_Init+0x18e>
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	1e58      	subs	r0, r3, #1
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6859      	ldr	r1, [r3, #4]
 80035a0:	460b      	mov	r3, r1
 80035a2:	009b      	lsls	r3, r3, #2
 80035a4:	440b      	add	r3, r1
 80035a6:	0099      	lsls	r1, r3, #2
 80035a8:	440b      	add	r3, r1
 80035aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80035ae:	3301      	adds	r3, #1
 80035b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	bf0c      	ite	eq
 80035b8:	2301      	moveq	r3, #1
 80035ba:	2300      	movne	r3, #0
 80035bc:	b2db      	uxtb	r3, r3
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d001      	beq.n	80035c6 <HAL_I2C_Init+0x196>
 80035c2:	2301      	movs	r3, #1
 80035c4:	e022      	b.n	800360c <HAL_I2C_Init+0x1dc>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	689b      	ldr	r3, [r3, #8]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d10e      	bne.n	80035ec <HAL_I2C_Init+0x1bc>
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	1e58      	subs	r0, r3, #1
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6859      	ldr	r1, [r3, #4]
 80035d6:	460b      	mov	r3, r1
 80035d8:	005b      	lsls	r3, r3, #1
 80035da:	440b      	add	r3, r1
 80035dc:	fbb0 f3f3 	udiv	r3, r0, r3
 80035e0:	3301      	adds	r3, #1
 80035e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035e6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80035ea:	e00f      	b.n	800360c <HAL_I2C_Init+0x1dc>
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	1e58      	subs	r0, r3, #1
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6859      	ldr	r1, [r3, #4]
 80035f4:	460b      	mov	r3, r1
 80035f6:	009b      	lsls	r3, r3, #2
 80035f8:	440b      	add	r3, r1
 80035fa:	0099      	lsls	r1, r3, #2
 80035fc:	440b      	add	r3, r1
 80035fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8003602:	3301      	adds	r3, #1
 8003604:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003608:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800360c:	6879      	ldr	r1, [r7, #4]
 800360e:	6809      	ldr	r1, [r1, #0]
 8003610:	4313      	orrs	r3, r2
 8003612:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	69da      	ldr	r2, [r3, #28]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6a1b      	ldr	r3, [r3, #32]
 8003626:	431a      	orrs	r2, r3
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	430a      	orrs	r2, r1
 800362e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	689b      	ldr	r3, [r3, #8]
 8003636:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800363a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800363e:	687a      	ldr	r2, [r7, #4]
 8003640:	6911      	ldr	r1, [r2, #16]
 8003642:	687a      	ldr	r2, [r7, #4]
 8003644:	68d2      	ldr	r2, [r2, #12]
 8003646:	4311      	orrs	r1, r2
 8003648:	687a      	ldr	r2, [r7, #4]
 800364a:	6812      	ldr	r2, [r2, #0]
 800364c:	430b      	orrs	r3, r1
 800364e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	68db      	ldr	r3, [r3, #12]
 8003656:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	695a      	ldr	r2, [r3, #20]
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	699b      	ldr	r3, [r3, #24]
 8003662:	431a      	orrs	r2, r3
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	430a      	orrs	r2, r1
 800366a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	681a      	ldr	r2, [r3, #0]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f042 0201 	orr.w	r2, r2, #1
 800367a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2200      	movs	r2, #0
 8003680:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2220      	movs	r2, #32
 8003686:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2200      	movs	r2, #0
 800368e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2200      	movs	r2, #0
 8003694:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003698:	2300      	movs	r3, #0
}
 800369a:	4618      	mov	r0, r3
 800369c:	3710      	adds	r7, #16
 800369e:	46bd      	mov	sp, r7
 80036a0:	bd80      	pop	{r7, pc}
 80036a2:	bf00      	nop
 80036a4:	000186a0 	.word	0x000186a0
 80036a8:	001e847f 	.word	0x001e847f
 80036ac:	003d08ff 	.word	0x003d08ff
 80036b0:	431bde83 	.word	0x431bde83
 80036b4:	10624dd3 	.word	0x10624dd3

080036b8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b088      	sub	sp, #32
 80036bc:	af02      	add	r7, sp, #8
 80036be:	60f8      	str	r0, [r7, #12]
 80036c0:	4608      	mov	r0, r1
 80036c2:	4611      	mov	r1, r2
 80036c4:	461a      	mov	r2, r3
 80036c6:	4603      	mov	r3, r0
 80036c8:	817b      	strh	r3, [r7, #10]
 80036ca:	460b      	mov	r3, r1
 80036cc:	813b      	strh	r3, [r7, #8]
 80036ce:	4613      	mov	r3, r2
 80036d0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80036d2:	f7ff f99d 	bl	8002a10 <HAL_GetTick>
 80036d6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80036de:	b2db      	uxtb	r3, r3
 80036e0:	2b20      	cmp	r3, #32
 80036e2:	f040 80d9 	bne.w	8003898 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80036e6:	697b      	ldr	r3, [r7, #20]
 80036e8:	9300      	str	r3, [sp, #0]
 80036ea:	2319      	movs	r3, #25
 80036ec:	2201      	movs	r2, #1
 80036ee:	496d      	ldr	r1, [pc, #436]	@ (80038a4 <HAL_I2C_Mem_Write+0x1ec>)
 80036f0:	68f8      	ldr	r0, [r7, #12]
 80036f2:	f000 fa9f 	bl	8003c34 <I2C_WaitOnFlagUntilTimeout>
 80036f6:	4603      	mov	r3, r0
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d001      	beq.n	8003700 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80036fc:	2302      	movs	r3, #2
 80036fe:	e0cc      	b.n	800389a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003706:	2b01      	cmp	r3, #1
 8003708:	d101      	bne.n	800370e <HAL_I2C_Mem_Write+0x56>
 800370a:	2302      	movs	r3, #2
 800370c:	e0c5      	b.n	800389a <HAL_I2C_Mem_Write+0x1e2>
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	2201      	movs	r2, #1
 8003712:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f003 0301 	and.w	r3, r3, #1
 8003720:	2b01      	cmp	r3, #1
 8003722:	d007      	beq.n	8003734 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	681a      	ldr	r2, [r3, #0]
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f042 0201 	orr.w	r2, r2, #1
 8003732:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	681a      	ldr	r2, [r3, #0]
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003742:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	2221      	movs	r2, #33	@ 0x21
 8003748:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	2240      	movs	r2, #64	@ 0x40
 8003750:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	2200      	movs	r2, #0
 8003758:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	6a3a      	ldr	r2, [r7, #32]
 800375e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003764:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800376a:	b29a      	uxth	r2, r3
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	4a4d      	ldr	r2, [pc, #308]	@ (80038a8 <HAL_I2C_Mem_Write+0x1f0>)
 8003774:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003776:	88f8      	ldrh	r0, [r7, #6]
 8003778:	893a      	ldrh	r2, [r7, #8]
 800377a:	8979      	ldrh	r1, [r7, #10]
 800377c:	697b      	ldr	r3, [r7, #20]
 800377e:	9301      	str	r3, [sp, #4]
 8003780:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003782:	9300      	str	r3, [sp, #0]
 8003784:	4603      	mov	r3, r0
 8003786:	68f8      	ldr	r0, [r7, #12]
 8003788:	f000 f9be 	bl	8003b08 <I2C_RequestMemoryWrite>
 800378c:	4603      	mov	r3, r0
 800378e:	2b00      	cmp	r3, #0
 8003790:	d052      	beq.n	8003838 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003792:	2301      	movs	r3, #1
 8003794:	e081      	b.n	800389a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003796:	697a      	ldr	r2, [r7, #20]
 8003798:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800379a:	68f8      	ldr	r0, [r7, #12]
 800379c:	f000 fb64 	bl	8003e68 <I2C_WaitOnTXEFlagUntilTimeout>
 80037a0:	4603      	mov	r3, r0
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d00d      	beq.n	80037c2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037aa:	2b04      	cmp	r3, #4
 80037ac:	d107      	bne.n	80037be <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	681a      	ldr	r2, [r3, #0]
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80037bc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80037be:	2301      	movs	r3, #1
 80037c0:	e06b      	b.n	800389a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037c6:	781a      	ldrb	r2, [r3, #0]
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037d2:	1c5a      	adds	r2, r3, #1
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037dc:	3b01      	subs	r3, #1
 80037de:	b29a      	uxth	r2, r3
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037e8:	b29b      	uxth	r3, r3
 80037ea:	3b01      	subs	r3, #1
 80037ec:	b29a      	uxth	r2, r3
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	695b      	ldr	r3, [r3, #20]
 80037f8:	f003 0304 	and.w	r3, r3, #4
 80037fc:	2b04      	cmp	r3, #4
 80037fe:	d11b      	bne.n	8003838 <HAL_I2C_Mem_Write+0x180>
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003804:	2b00      	cmp	r3, #0
 8003806:	d017      	beq.n	8003838 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800380c:	781a      	ldrb	r2, [r3, #0]
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003818:	1c5a      	adds	r2, r3, #1
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003822:	3b01      	subs	r3, #1
 8003824:	b29a      	uxth	r2, r3
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800382e:	b29b      	uxth	r3, r3
 8003830:	3b01      	subs	r3, #1
 8003832:	b29a      	uxth	r2, r3
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800383c:	2b00      	cmp	r3, #0
 800383e:	d1aa      	bne.n	8003796 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003840:	697a      	ldr	r2, [r7, #20]
 8003842:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003844:	68f8      	ldr	r0, [r7, #12]
 8003846:	f000 fb57 	bl	8003ef8 <I2C_WaitOnBTFFlagUntilTimeout>
 800384a:	4603      	mov	r3, r0
 800384c:	2b00      	cmp	r3, #0
 800384e:	d00d      	beq.n	800386c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003854:	2b04      	cmp	r3, #4
 8003856:	d107      	bne.n	8003868 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	681a      	ldr	r2, [r3, #0]
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003866:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003868:	2301      	movs	r3, #1
 800386a:	e016      	b.n	800389a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	681a      	ldr	r2, [r3, #0]
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800387a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	2220      	movs	r2, #32
 8003880:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	2200      	movs	r2, #0
 8003888:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	2200      	movs	r2, #0
 8003890:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003894:	2300      	movs	r3, #0
 8003896:	e000      	b.n	800389a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003898:	2302      	movs	r3, #2
  }
}
 800389a:	4618      	mov	r0, r3
 800389c:	3718      	adds	r7, #24
 800389e:	46bd      	mov	sp, r7
 80038a0:	bd80      	pop	{r7, pc}
 80038a2:	bf00      	nop
 80038a4:	00100002 	.word	0x00100002
 80038a8:	ffff0000 	.word	0xffff0000

080038ac <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b08a      	sub	sp, #40	@ 0x28
 80038b0:	af02      	add	r7, sp, #8
 80038b2:	60f8      	str	r0, [r7, #12]
 80038b4:	607a      	str	r2, [r7, #4]
 80038b6:	603b      	str	r3, [r7, #0]
 80038b8:	460b      	mov	r3, r1
 80038ba:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80038bc:	f7ff f8a8 	bl	8002a10 <HAL_GetTick>
 80038c0:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80038c2:	2300      	movs	r3, #0
 80038c4:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80038cc:	b2db      	uxtb	r3, r3
 80038ce:	2b20      	cmp	r3, #32
 80038d0:	f040 8111 	bne.w	8003af6 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80038d4:	69fb      	ldr	r3, [r7, #28]
 80038d6:	9300      	str	r3, [sp, #0]
 80038d8:	2319      	movs	r3, #25
 80038da:	2201      	movs	r2, #1
 80038dc:	4988      	ldr	r1, [pc, #544]	@ (8003b00 <HAL_I2C_IsDeviceReady+0x254>)
 80038de:	68f8      	ldr	r0, [r7, #12]
 80038e0:	f000 f9a8 	bl	8003c34 <I2C_WaitOnFlagUntilTimeout>
 80038e4:	4603      	mov	r3, r0
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d001      	beq.n	80038ee <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80038ea:	2302      	movs	r3, #2
 80038ec:	e104      	b.n	8003af8 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80038f4:	2b01      	cmp	r3, #1
 80038f6:	d101      	bne.n	80038fc <HAL_I2C_IsDeviceReady+0x50>
 80038f8:	2302      	movs	r3, #2
 80038fa:	e0fd      	b.n	8003af8 <HAL_I2C_IsDeviceReady+0x24c>
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	2201      	movs	r2, #1
 8003900:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f003 0301 	and.w	r3, r3, #1
 800390e:	2b01      	cmp	r3, #1
 8003910:	d007      	beq.n	8003922 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	681a      	ldr	r2, [r3, #0]
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f042 0201 	orr.w	r2, r2, #1
 8003920:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	681a      	ldr	r2, [r3, #0]
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003930:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	2224      	movs	r2, #36	@ 0x24
 8003936:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	2200      	movs	r2, #0
 800393e:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	4a70      	ldr	r2, [pc, #448]	@ (8003b04 <HAL_I2C_IsDeviceReady+0x258>)
 8003944:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	681a      	ldr	r2, [r3, #0]
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003954:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003956:	69fb      	ldr	r3, [r7, #28]
 8003958:	9300      	str	r3, [sp, #0]
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	2200      	movs	r2, #0
 800395e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003962:	68f8      	ldr	r0, [r7, #12]
 8003964:	f000 f966 	bl	8003c34 <I2C_WaitOnFlagUntilTimeout>
 8003968:	4603      	mov	r3, r0
 800396a:	2b00      	cmp	r3, #0
 800396c:	d00d      	beq.n	800398a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003978:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800397c:	d103      	bne.n	8003986 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003984:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8003986:	2303      	movs	r3, #3
 8003988:	e0b6      	b.n	8003af8 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800398a:	897b      	ldrh	r3, [r7, #10]
 800398c:	b2db      	uxtb	r3, r3
 800398e:	461a      	mov	r2, r3
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003998:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800399a:	f7ff f839 	bl	8002a10 <HAL_GetTick>
 800399e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	695b      	ldr	r3, [r3, #20]
 80039a6:	f003 0302 	and.w	r3, r3, #2
 80039aa:	2b02      	cmp	r3, #2
 80039ac:	bf0c      	ite	eq
 80039ae:	2301      	moveq	r3, #1
 80039b0:	2300      	movne	r3, #0
 80039b2:	b2db      	uxtb	r3, r3
 80039b4:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	695b      	ldr	r3, [r3, #20]
 80039bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80039c0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80039c4:	bf0c      	ite	eq
 80039c6:	2301      	moveq	r3, #1
 80039c8:	2300      	movne	r3, #0
 80039ca:	b2db      	uxtb	r3, r3
 80039cc:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80039ce:	e025      	b.n	8003a1c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80039d0:	f7ff f81e 	bl	8002a10 <HAL_GetTick>
 80039d4:	4602      	mov	r2, r0
 80039d6:	69fb      	ldr	r3, [r7, #28]
 80039d8:	1ad3      	subs	r3, r2, r3
 80039da:	683a      	ldr	r2, [r7, #0]
 80039dc:	429a      	cmp	r2, r3
 80039de:	d302      	bcc.n	80039e6 <HAL_I2C_IsDeviceReady+0x13a>
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d103      	bne.n	80039ee <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	22a0      	movs	r2, #160	@ 0xa0
 80039ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	695b      	ldr	r3, [r3, #20]
 80039f4:	f003 0302 	and.w	r3, r3, #2
 80039f8:	2b02      	cmp	r3, #2
 80039fa:	bf0c      	ite	eq
 80039fc:	2301      	moveq	r3, #1
 80039fe:	2300      	movne	r3, #0
 8003a00:	b2db      	uxtb	r3, r3
 8003a02:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	695b      	ldr	r3, [r3, #20]
 8003a0a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a0e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a12:	bf0c      	ite	eq
 8003a14:	2301      	moveq	r3, #1
 8003a16:	2300      	movne	r3, #0
 8003a18:	b2db      	uxtb	r3, r3
 8003a1a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a22:	b2db      	uxtb	r3, r3
 8003a24:	2ba0      	cmp	r3, #160	@ 0xa0
 8003a26:	d005      	beq.n	8003a34 <HAL_I2C_IsDeviceReady+0x188>
 8003a28:	7dfb      	ldrb	r3, [r7, #23]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d102      	bne.n	8003a34 <HAL_I2C_IsDeviceReady+0x188>
 8003a2e:	7dbb      	ldrb	r3, [r7, #22]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d0cd      	beq.n	80039d0 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	2220      	movs	r2, #32
 8003a38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	695b      	ldr	r3, [r3, #20]
 8003a42:	f003 0302 	and.w	r3, r3, #2
 8003a46:	2b02      	cmp	r3, #2
 8003a48:	d129      	bne.n	8003a9e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	681a      	ldr	r2, [r3, #0]
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a58:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	613b      	str	r3, [r7, #16]
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	695b      	ldr	r3, [r3, #20]
 8003a64:	613b      	str	r3, [r7, #16]
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	699b      	ldr	r3, [r3, #24]
 8003a6c:	613b      	str	r3, [r7, #16]
 8003a6e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003a70:	69fb      	ldr	r3, [r7, #28]
 8003a72:	9300      	str	r3, [sp, #0]
 8003a74:	2319      	movs	r3, #25
 8003a76:	2201      	movs	r2, #1
 8003a78:	4921      	ldr	r1, [pc, #132]	@ (8003b00 <HAL_I2C_IsDeviceReady+0x254>)
 8003a7a:	68f8      	ldr	r0, [r7, #12]
 8003a7c:	f000 f8da 	bl	8003c34 <I2C_WaitOnFlagUntilTimeout>
 8003a80:	4603      	mov	r3, r0
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d001      	beq.n	8003a8a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8003a86:	2301      	movs	r3, #1
 8003a88:	e036      	b.n	8003af8 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	2220      	movs	r2, #32
 8003a8e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	2200      	movs	r2, #0
 8003a96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	e02c      	b.n	8003af8 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	681a      	ldr	r2, [r3, #0]
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003aac:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003ab6:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003ab8:	69fb      	ldr	r3, [r7, #28]
 8003aba:	9300      	str	r3, [sp, #0]
 8003abc:	2319      	movs	r3, #25
 8003abe:	2201      	movs	r2, #1
 8003ac0:	490f      	ldr	r1, [pc, #60]	@ (8003b00 <HAL_I2C_IsDeviceReady+0x254>)
 8003ac2:	68f8      	ldr	r0, [r7, #12]
 8003ac4:	f000 f8b6 	bl	8003c34 <I2C_WaitOnFlagUntilTimeout>
 8003ac8:	4603      	mov	r3, r0
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d001      	beq.n	8003ad2 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8003ace:	2301      	movs	r3, #1
 8003ad0:	e012      	b.n	8003af8 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003ad2:	69bb      	ldr	r3, [r7, #24]
 8003ad4:	3301      	adds	r3, #1
 8003ad6:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003ad8:	69ba      	ldr	r2, [r7, #24]
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	429a      	cmp	r2, r3
 8003ade:	f4ff af32 	bcc.w	8003946 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	2220      	movs	r2, #32
 8003ae6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	2200      	movs	r2, #0
 8003aee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003af2:	2301      	movs	r3, #1
 8003af4:	e000      	b.n	8003af8 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8003af6:	2302      	movs	r3, #2
  }
}
 8003af8:	4618      	mov	r0, r3
 8003afa:	3720      	adds	r7, #32
 8003afc:	46bd      	mov	sp, r7
 8003afe:	bd80      	pop	{r7, pc}
 8003b00:	00100002 	.word	0x00100002
 8003b04:	ffff0000 	.word	0xffff0000

08003b08 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b088      	sub	sp, #32
 8003b0c:	af02      	add	r7, sp, #8
 8003b0e:	60f8      	str	r0, [r7, #12]
 8003b10:	4608      	mov	r0, r1
 8003b12:	4611      	mov	r1, r2
 8003b14:	461a      	mov	r2, r3
 8003b16:	4603      	mov	r3, r0
 8003b18:	817b      	strh	r3, [r7, #10]
 8003b1a:	460b      	mov	r3, r1
 8003b1c:	813b      	strh	r3, [r7, #8]
 8003b1e:	4613      	mov	r3, r2
 8003b20:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	681a      	ldr	r2, [r3, #0]
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003b30:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003b32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b34:	9300      	str	r3, [sp, #0]
 8003b36:	6a3b      	ldr	r3, [r7, #32]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003b3e:	68f8      	ldr	r0, [r7, #12]
 8003b40:	f000 f878 	bl	8003c34 <I2C_WaitOnFlagUntilTimeout>
 8003b44:	4603      	mov	r3, r0
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d00d      	beq.n	8003b66 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b54:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003b58:	d103      	bne.n	8003b62 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003b60:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003b62:	2303      	movs	r3, #3
 8003b64:	e05f      	b.n	8003c26 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003b66:	897b      	ldrh	r3, [r7, #10]
 8003b68:	b2db      	uxtb	r3, r3
 8003b6a:	461a      	mov	r2, r3
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003b74:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003b76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b78:	6a3a      	ldr	r2, [r7, #32]
 8003b7a:	492d      	ldr	r1, [pc, #180]	@ (8003c30 <I2C_RequestMemoryWrite+0x128>)
 8003b7c:	68f8      	ldr	r0, [r7, #12]
 8003b7e:	f000 f8d3 	bl	8003d28 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b82:	4603      	mov	r3, r0
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d001      	beq.n	8003b8c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003b88:	2301      	movs	r3, #1
 8003b8a:	e04c      	b.n	8003c26 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	617b      	str	r3, [r7, #20]
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	695b      	ldr	r3, [r3, #20]
 8003b96:	617b      	str	r3, [r7, #20]
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	699b      	ldr	r3, [r3, #24]
 8003b9e:	617b      	str	r3, [r7, #20]
 8003ba0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ba2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ba4:	6a39      	ldr	r1, [r7, #32]
 8003ba6:	68f8      	ldr	r0, [r7, #12]
 8003ba8:	f000 f95e 	bl	8003e68 <I2C_WaitOnTXEFlagUntilTimeout>
 8003bac:	4603      	mov	r3, r0
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d00d      	beq.n	8003bce <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bb6:	2b04      	cmp	r3, #4
 8003bb8:	d107      	bne.n	8003bca <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	681a      	ldr	r2, [r3, #0]
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003bc8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003bca:	2301      	movs	r3, #1
 8003bcc:	e02b      	b.n	8003c26 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003bce:	88fb      	ldrh	r3, [r7, #6]
 8003bd0:	2b01      	cmp	r3, #1
 8003bd2:	d105      	bne.n	8003be0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003bd4:	893b      	ldrh	r3, [r7, #8]
 8003bd6:	b2da      	uxtb	r2, r3
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	611a      	str	r2, [r3, #16]
 8003bde:	e021      	b.n	8003c24 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003be0:	893b      	ldrh	r3, [r7, #8]
 8003be2:	0a1b      	lsrs	r3, r3, #8
 8003be4:	b29b      	uxth	r3, r3
 8003be6:	b2da      	uxtb	r2, r3
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003bee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003bf0:	6a39      	ldr	r1, [r7, #32]
 8003bf2:	68f8      	ldr	r0, [r7, #12]
 8003bf4:	f000 f938 	bl	8003e68 <I2C_WaitOnTXEFlagUntilTimeout>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d00d      	beq.n	8003c1a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c02:	2b04      	cmp	r3, #4
 8003c04:	d107      	bne.n	8003c16 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	681a      	ldr	r2, [r3, #0]
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c14:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003c16:	2301      	movs	r3, #1
 8003c18:	e005      	b.n	8003c26 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003c1a:	893b      	ldrh	r3, [r7, #8]
 8003c1c:	b2da      	uxtb	r2, r3
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003c24:	2300      	movs	r3, #0
}
 8003c26:	4618      	mov	r0, r3
 8003c28:	3718      	adds	r7, #24
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bd80      	pop	{r7, pc}
 8003c2e:	bf00      	nop
 8003c30:	00010002 	.word	0x00010002

08003c34 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b084      	sub	sp, #16
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	60f8      	str	r0, [r7, #12]
 8003c3c:	60b9      	str	r1, [r7, #8]
 8003c3e:	603b      	str	r3, [r7, #0]
 8003c40:	4613      	mov	r3, r2
 8003c42:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003c44:	e048      	b.n	8003cd8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003c4c:	d044      	beq.n	8003cd8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c4e:	f7fe fedf 	bl	8002a10 <HAL_GetTick>
 8003c52:	4602      	mov	r2, r0
 8003c54:	69bb      	ldr	r3, [r7, #24]
 8003c56:	1ad3      	subs	r3, r2, r3
 8003c58:	683a      	ldr	r2, [r7, #0]
 8003c5a:	429a      	cmp	r2, r3
 8003c5c:	d302      	bcc.n	8003c64 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d139      	bne.n	8003cd8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	0c1b      	lsrs	r3, r3, #16
 8003c68:	b2db      	uxtb	r3, r3
 8003c6a:	2b01      	cmp	r3, #1
 8003c6c:	d10d      	bne.n	8003c8a <I2C_WaitOnFlagUntilTimeout+0x56>
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	695b      	ldr	r3, [r3, #20]
 8003c74:	43da      	mvns	r2, r3
 8003c76:	68bb      	ldr	r3, [r7, #8]
 8003c78:	4013      	ands	r3, r2
 8003c7a:	b29b      	uxth	r3, r3
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	bf0c      	ite	eq
 8003c80:	2301      	moveq	r3, #1
 8003c82:	2300      	movne	r3, #0
 8003c84:	b2db      	uxtb	r3, r3
 8003c86:	461a      	mov	r2, r3
 8003c88:	e00c      	b.n	8003ca4 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	699b      	ldr	r3, [r3, #24]
 8003c90:	43da      	mvns	r2, r3
 8003c92:	68bb      	ldr	r3, [r7, #8]
 8003c94:	4013      	ands	r3, r2
 8003c96:	b29b      	uxth	r3, r3
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	bf0c      	ite	eq
 8003c9c:	2301      	moveq	r3, #1
 8003c9e:	2300      	movne	r3, #0
 8003ca0:	b2db      	uxtb	r3, r3
 8003ca2:	461a      	mov	r2, r3
 8003ca4:	79fb      	ldrb	r3, [r7, #7]
 8003ca6:	429a      	cmp	r2, r3
 8003ca8:	d116      	bne.n	8003cd8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	2200      	movs	r2, #0
 8003cae:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	2220      	movs	r2, #32
 8003cb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cc4:	f043 0220 	orr.w	r2, r3, #32
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	e023      	b.n	8003d20 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	0c1b      	lsrs	r3, r3, #16
 8003cdc:	b2db      	uxtb	r3, r3
 8003cde:	2b01      	cmp	r3, #1
 8003ce0:	d10d      	bne.n	8003cfe <I2C_WaitOnFlagUntilTimeout+0xca>
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	695b      	ldr	r3, [r3, #20]
 8003ce8:	43da      	mvns	r2, r3
 8003cea:	68bb      	ldr	r3, [r7, #8]
 8003cec:	4013      	ands	r3, r2
 8003cee:	b29b      	uxth	r3, r3
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	bf0c      	ite	eq
 8003cf4:	2301      	moveq	r3, #1
 8003cf6:	2300      	movne	r3, #0
 8003cf8:	b2db      	uxtb	r3, r3
 8003cfa:	461a      	mov	r2, r3
 8003cfc:	e00c      	b.n	8003d18 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	699b      	ldr	r3, [r3, #24]
 8003d04:	43da      	mvns	r2, r3
 8003d06:	68bb      	ldr	r3, [r7, #8]
 8003d08:	4013      	ands	r3, r2
 8003d0a:	b29b      	uxth	r3, r3
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	bf0c      	ite	eq
 8003d10:	2301      	moveq	r3, #1
 8003d12:	2300      	movne	r3, #0
 8003d14:	b2db      	uxtb	r3, r3
 8003d16:	461a      	mov	r2, r3
 8003d18:	79fb      	ldrb	r3, [r7, #7]
 8003d1a:	429a      	cmp	r2, r3
 8003d1c:	d093      	beq.n	8003c46 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003d1e:	2300      	movs	r3, #0
}
 8003d20:	4618      	mov	r0, r3
 8003d22:	3710      	adds	r7, #16
 8003d24:	46bd      	mov	sp, r7
 8003d26:	bd80      	pop	{r7, pc}

08003d28 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b084      	sub	sp, #16
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	60f8      	str	r0, [r7, #12]
 8003d30:	60b9      	str	r1, [r7, #8]
 8003d32:	607a      	str	r2, [r7, #4]
 8003d34:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003d36:	e071      	b.n	8003e1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	695b      	ldr	r3, [r3, #20]
 8003d3e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d42:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d46:	d123      	bne.n	8003d90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	681a      	ldr	r2, [r3, #0]
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d56:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003d60:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	2200      	movs	r2, #0
 8003d66:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	2220      	movs	r2, #32
 8003d6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	2200      	movs	r2, #0
 8003d74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d7c:	f043 0204 	orr.w	r2, r3, #4
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	2200      	movs	r2, #0
 8003d88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	e067      	b.n	8003e60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003d96:	d041      	beq.n	8003e1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d98:	f7fe fe3a 	bl	8002a10 <HAL_GetTick>
 8003d9c:	4602      	mov	r2, r0
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	1ad3      	subs	r3, r2, r3
 8003da2:	687a      	ldr	r2, [r7, #4]
 8003da4:	429a      	cmp	r2, r3
 8003da6:	d302      	bcc.n	8003dae <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d136      	bne.n	8003e1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003dae:	68bb      	ldr	r3, [r7, #8]
 8003db0:	0c1b      	lsrs	r3, r3, #16
 8003db2:	b2db      	uxtb	r3, r3
 8003db4:	2b01      	cmp	r3, #1
 8003db6:	d10c      	bne.n	8003dd2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	695b      	ldr	r3, [r3, #20]
 8003dbe:	43da      	mvns	r2, r3
 8003dc0:	68bb      	ldr	r3, [r7, #8]
 8003dc2:	4013      	ands	r3, r2
 8003dc4:	b29b      	uxth	r3, r3
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	bf14      	ite	ne
 8003dca:	2301      	movne	r3, #1
 8003dcc:	2300      	moveq	r3, #0
 8003dce:	b2db      	uxtb	r3, r3
 8003dd0:	e00b      	b.n	8003dea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	699b      	ldr	r3, [r3, #24]
 8003dd8:	43da      	mvns	r2, r3
 8003dda:	68bb      	ldr	r3, [r7, #8]
 8003ddc:	4013      	ands	r3, r2
 8003dde:	b29b      	uxth	r3, r3
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	bf14      	ite	ne
 8003de4:	2301      	movne	r3, #1
 8003de6:	2300      	moveq	r3, #0
 8003de8:	b2db      	uxtb	r3, r3
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d016      	beq.n	8003e1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	2200      	movs	r2, #0
 8003df2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	2220      	movs	r2, #32
 8003df8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	2200      	movs	r2, #0
 8003e00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e08:	f043 0220 	orr.w	r2, r3, #32
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	2200      	movs	r2, #0
 8003e14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003e18:	2301      	movs	r3, #1
 8003e1a:	e021      	b.n	8003e60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	0c1b      	lsrs	r3, r3, #16
 8003e20:	b2db      	uxtb	r3, r3
 8003e22:	2b01      	cmp	r3, #1
 8003e24:	d10c      	bne.n	8003e40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	695b      	ldr	r3, [r3, #20]
 8003e2c:	43da      	mvns	r2, r3
 8003e2e:	68bb      	ldr	r3, [r7, #8]
 8003e30:	4013      	ands	r3, r2
 8003e32:	b29b      	uxth	r3, r3
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	bf14      	ite	ne
 8003e38:	2301      	movne	r3, #1
 8003e3a:	2300      	moveq	r3, #0
 8003e3c:	b2db      	uxtb	r3, r3
 8003e3e:	e00b      	b.n	8003e58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	699b      	ldr	r3, [r3, #24]
 8003e46:	43da      	mvns	r2, r3
 8003e48:	68bb      	ldr	r3, [r7, #8]
 8003e4a:	4013      	ands	r3, r2
 8003e4c:	b29b      	uxth	r3, r3
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	bf14      	ite	ne
 8003e52:	2301      	movne	r3, #1
 8003e54:	2300      	moveq	r3, #0
 8003e56:	b2db      	uxtb	r3, r3
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	f47f af6d 	bne.w	8003d38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003e5e:	2300      	movs	r3, #0
}
 8003e60:	4618      	mov	r0, r3
 8003e62:	3710      	adds	r7, #16
 8003e64:	46bd      	mov	sp, r7
 8003e66:	bd80      	pop	{r7, pc}

08003e68 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b084      	sub	sp, #16
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	60f8      	str	r0, [r7, #12]
 8003e70:	60b9      	str	r1, [r7, #8]
 8003e72:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003e74:	e034      	b.n	8003ee0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003e76:	68f8      	ldr	r0, [r7, #12]
 8003e78:	f000 f886 	bl	8003f88 <I2C_IsAcknowledgeFailed>
 8003e7c:	4603      	mov	r3, r0
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d001      	beq.n	8003e86 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003e82:	2301      	movs	r3, #1
 8003e84:	e034      	b.n	8003ef0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e86:	68bb      	ldr	r3, [r7, #8]
 8003e88:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003e8c:	d028      	beq.n	8003ee0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e8e:	f7fe fdbf 	bl	8002a10 <HAL_GetTick>
 8003e92:	4602      	mov	r2, r0
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	1ad3      	subs	r3, r2, r3
 8003e98:	68ba      	ldr	r2, [r7, #8]
 8003e9a:	429a      	cmp	r2, r3
 8003e9c:	d302      	bcc.n	8003ea4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003e9e:	68bb      	ldr	r3, [r7, #8]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d11d      	bne.n	8003ee0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	695b      	ldr	r3, [r3, #20]
 8003eaa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003eae:	2b80      	cmp	r3, #128	@ 0x80
 8003eb0:	d016      	beq.n	8003ee0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	2220      	movs	r2, #32
 8003ebc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ecc:	f043 0220 	orr.w	r2, r3, #32
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003edc:	2301      	movs	r3, #1
 8003ede:	e007      	b.n	8003ef0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	695b      	ldr	r3, [r3, #20]
 8003ee6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003eea:	2b80      	cmp	r3, #128	@ 0x80
 8003eec:	d1c3      	bne.n	8003e76 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003eee:	2300      	movs	r3, #0
}
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	3710      	adds	r7, #16
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	bd80      	pop	{r7, pc}

08003ef8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b084      	sub	sp, #16
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	60f8      	str	r0, [r7, #12]
 8003f00:	60b9      	str	r1, [r7, #8]
 8003f02:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003f04:	e034      	b.n	8003f70 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003f06:	68f8      	ldr	r0, [r7, #12]
 8003f08:	f000 f83e 	bl	8003f88 <I2C_IsAcknowledgeFailed>
 8003f0c:	4603      	mov	r3, r0
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d001      	beq.n	8003f16 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003f12:	2301      	movs	r3, #1
 8003f14:	e034      	b.n	8003f80 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f16:	68bb      	ldr	r3, [r7, #8]
 8003f18:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003f1c:	d028      	beq.n	8003f70 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f1e:	f7fe fd77 	bl	8002a10 <HAL_GetTick>
 8003f22:	4602      	mov	r2, r0
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	1ad3      	subs	r3, r2, r3
 8003f28:	68ba      	ldr	r2, [r7, #8]
 8003f2a:	429a      	cmp	r2, r3
 8003f2c:	d302      	bcc.n	8003f34 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003f2e:	68bb      	ldr	r3, [r7, #8]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d11d      	bne.n	8003f70 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	695b      	ldr	r3, [r3, #20]
 8003f3a:	f003 0304 	and.w	r3, r3, #4
 8003f3e:	2b04      	cmp	r3, #4
 8003f40:	d016      	beq.n	8003f70 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	2200      	movs	r2, #0
 8003f46:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	2220      	movs	r2, #32
 8003f4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	2200      	movs	r2, #0
 8003f54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f5c:	f043 0220 	orr.w	r2, r3, #32
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	2200      	movs	r2, #0
 8003f68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	e007      	b.n	8003f80 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	695b      	ldr	r3, [r3, #20]
 8003f76:	f003 0304 	and.w	r3, r3, #4
 8003f7a:	2b04      	cmp	r3, #4
 8003f7c:	d1c3      	bne.n	8003f06 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003f7e:	2300      	movs	r3, #0
}
 8003f80:	4618      	mov	r0, r3
 8003f82:	3710      	adds	r7, #16
 8003f84:	46bd      	mov	sp, r7
 8003f86:	bd80      	pop	{r7, pc}

08003f88 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	b083      	sub	sp, #12
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	695b      	ldr	r3, [r3, #20]
 8003f96:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f9a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f9e:	d11b      	bne.n	8003fd8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003fa8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2200      	movs	r2, #0
 8003fae:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2220      	movs	r2, #32
 8003fb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fc4:	f043 0204 	orr.w	r2, r3, #4
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2200      	movs	r2, #0
 8003fd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	e000      	b.n	8003fda <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003fd8:	2300      	movs	r3, #0
}
 8003fda:	4618      	mov	r0, r3
 8003fdc:	370c      	adds	r7, #12
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe4:	4770      	bx	lr

08003fe6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003fe6:	b580      	push	{r7, lr}
 8003fe8:	b086      	sub	sp, #24
 8003fea:	af02      	add	r7, sp, #8
 8003fec:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d101      	bne.n	8003ff8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	e101      	b.n	80041fc <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8004004:	b2db      	uxtb	r3, r3
 8004006:	2b00      	cmp	r3, #0
 8004008:	d106      	bne.n	8004018 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2200      	movs	r2, #0
 800400e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004012:	6878      	ldr	r0, [r7, #4]
 8004014:	f006 fd62 	bl	800aadc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2203      	movs	r2, #3
 800401c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004026:	d102      	bne.n	800402e <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2200      	movs	r2, #0
 800402c:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4618      	mov	r0, r3
 8004034:	f002 fcfd 	bl	8006a32 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6818      	ldr	r0, [r3, #0]
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	7c1a      	ldrb	r2, [r3, #16]
 8004040:	f88d 2000 	strb.w	r2, [sp]
 8004044:	3304      	adds	r3, #4
 8004046:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004048:	f002 fbdc 	bl	8006804 <USB_CoreInit>
 800404c:	4603      	mov	r3, r0
 800404e:	2b00      	cmp	r3, #0
 8004050:	d005      	beq.n	800405e <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2202      	movs	r2, #2
 8004056:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800405a:	2301      	movs	r3, #1
 800405c:	e0ce      	b.n	80041fc <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	2100      	movs	r1, #0
 8004064:	4618      	mov	r0, r3
 8004066:	f002 fcf5 	bl	8006a54 <USB_SetCurrentMode>
 800406a:	4603      	mov	r3, r0
 800406c:	2b00      	cmp	r3, #0
 800406e:	d005      	beq.n	800407c <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2202      	movs	r2, #2
 8004074:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004078:	2301      	movs	r3, #1
 800407a:	e0bf      	b.n	80041fc <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800407c:	2300      	movs	r3, #0
 800407e:	73fb      	strb	r3, [r7, #15]
 8004080:	e04a      	b.n	8004118 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004082:	7bfa      	ldrb	r2, [r7, #15]
 8004084:	6879      	ldr	r1, [r7, #4]
 8004086:	4613      	mov	r3, r2
 8004088:	00db      	lsls	r3, r3, #3
 800408a:	4413      	add	r3, r2
 800408c:	009b      	lsls	r3, r3, #2
 800408e:	440b      	add	r3, r1
 8004090:	3315      	adds	r3, #21
 8004092:	2201      	movs	r2, #1
 8004094:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004096:	7bfa      	ldrb	r2, [r7, #15]
 8004098:	6879      	ldr	r1, [r7, #4]
 800409a:	4613      	mov	r3, r2
 800409c:	00db      	lsls	r3, r3, #3
 800409e:	4413      	add	r3, r2
 80040a0:	009b      	lsls	r3, r3, #2
 80040a2:	440b      	add	r3, r1
 80040a4:	3314      	adds	r3, #20
 80040a6:	7bfa      	ldrb	r2, [r7, #15]
 80040a8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80040aa:	7bfa      	ldrb	r2, [r7, #15]
 80040ac:	7bfb      	ldrb	r3, [r7, #15]
 80040ae:	b298      	uxth	r0, r3
 80040b0:	6879      	ldr	r1, [r7, #4]
 80040b2:	4613      	mov	r3, r2
 80040b4:	00db      	lsls	r3, r3, #3
 80040b6:	4413      	add	r3, r2
 80040b8:	009b      	lsls	r3, r3, #2
 80040ba:	440b      	add	r3, r1
 80040bc:	332e      	adds	r3, #46	@ 0x2e
 80040be:	4602      	mov	r2, r0
 80040c0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80040c2:	7bfa      	ldrb	r2, [r7, #15]
 80040c4:	6879      	ldr	r1, [r7, #4]
 80040c6:	4613      	mov	r3, r2
 80040c8:	00db      	lsls	r3, r3, #3
 80040ca:	4413      	add	r3, r2
 80040cc:	009b      	lsls	r3, r3, #2
 80040ce:	440b      	add	r3, r1
 80040d0:	3318      	adds	r3, #24
 80040d2:	2200      	movs	r2, #0
 80040d4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80040d6:	7bfa      	ldrb	r2, [r7, #15]
 80040d8:	6879      	ldr	r1, [r7, #4]
 80040da:	4613      	mov	r3, r2
 80040dc:	00db      	lsls	r3, r3, #3
 80040de:	4413      	add	r3, r2
 80040e0:	009b      	lsls	r3, r3, #2
 80040e2:	440b      	add	r3, r1
 80040e4:	331c      	adds	r3, #28
 80040e6:	2200      	movs	r2, #0
 80040e8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80040ea:	7bfa      	ldrb	r2, [r7, #15]
 80040ec:	6879      	ldr	r1, [r7, #4]
 80040ee:	4613      	mov	r3, r2
 80040f0:	00db      	lsls	r3, r3, #3
 80040f2:	4413      	add	r3, r2
 80040f4:	009b      	lsls	r3, r3, #2
 80040f6:	440b      	add	r3, r1
 80040f8:	3320      	adds	r3, #32
 80040fa:	2200      	movs	r2, #0
 80040fc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80040fe:	7bfa      	ldrb	r2, [r7, #15]
 8004100:	6879      	ldr	r1, [r7, #4]
 8004102:	4613      	mov	r3, r2
 8004104:	00db      	lsls	r3, r3, #3
 8004106:	4413      	add	r3, r2
 8004108:	009b      	lsls	r3, r3, #2
 800410a:	440b      	add	r3, r1
 800410c:	3324      	adds	r3, #36	@ 0x24
 800410e:	2200      	movs	r2, #0
 8004110:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004112:	7bfb      	ldrb	r3, [r7, #15]
 8004114:	3301      	adds	r3, #1
 8004116:	73fb      	strb	r3, [r7, #15]
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	791b      	ldrb	r3, [r3, #4]
 800411c:	7bfa      	ldrb	r2, [r7, #15]
 800411e:	429a      	cmp	r2, r3
 8004120:	d3af      	bcc.n	8004082 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004122:	2300      	movs	r3, #0
 8004124:	73fb      	strb	r3, [r7, #15]
 8004126:	e044      	b.n	80041b2 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004128:	7bfa      	ldrb	r2, [r7, #15]
 800412a:	6879      	ldr	r1, [r7, #4]
 800412c:	4613      	mov	r3, r2
 800412e:	00db      	lsls	r3, r3, #3
 8004130:	4413      	add	r3, r2
 8004132:	009b      	lsls	r3, r3, #2
 8004134:	440b      	add	r3, r1
 8004136:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800413a:	2200      	movs	r2, #0
 800413c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800413e:	7bfa      	ldrb	r2, [r7, #15]
 8004140:	6879      	ldr	r1, [r7, #4]
 8004142:	4613      	mov	r3, r2
 8004144:	00db      	lsls	r3, r3, #3
 8004146:	4413      	add	r3, r2
 8004148:	009b      	lsls	r3, r3, #2
 800414a:	440b      	add	r3, r1
 800414c:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8004150:	7bfa      	ldrb	r2, [r7, #15]
 8004152:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004154:	7bfa      	ldrb	r2, [r7, #15]
 8004156:	6879      	ldr	r1, [r7, #4]
 8004158:	4613      	mov	r3, r2
 800415a:	00db      	lsls	r3, r3, #3
 800415c:	4413      	add	r3, r2
 800415e:	009b      	lsls	r3, r3, #2
 8004160:	440b      	add	r3, r1
 8004162:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8004166:	2200      	movs	r2, #0
 8004168:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800416a:	7bfa      	ldrb	r2, [r7, #15]
 800416c:	6879      	ldr	r1, [r7, #4]
 800416e:	4613      	mov	r3, r2
 8004170:	00db      	lsls	r3, r3, #3
 8004172:	4413      	add	r3, r2
 8004174:	009b      	lsls	r3, r3, #2
 8004176:	440b      	add	r3, r1
 8004178:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800417c:	2200      	movs	r2, #0
 800417e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004180:	7bfa      	ldrb	r2, [r7, #15]
 8004182:	6879      	ldr	r1, [r7, #4]
 8004184:	4613      	mov	r3, r2
 8004186:	00db      	lsls	r3, r3, #3
 8004188:	4413      	add	r3, r2
 800418a:	009b      	lsls	r3, r3, #2
 800418c:	440b      	add	r3, r1
 800418e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8004192:	2200      	movs	r2, #0
 8004194:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004196:	7bfa      	ldrb	r2, [r7, #15]
 8004198:	6879      	ldr	r1, [r7, #4]
 800419a:	4613      	mov	r3, r2
 800419c:	00db      	lsls	r3, r3, #3
 800419e:	4413      	add	r3, r2
 80041a0:	009b      	lsls	r3, r3, #2
 80041a2:	440b      	add	r3, r1
 80041a4:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80041a8:	2200      	movs	r2, #0
 80041aa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80041ac:	7bfb      	ldrb	r3, [r7, #15]
 80041ae:	3301      	adds	r3, #1
 80041b0:	73fb      	strb	r3, [r7, #15]
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	791b      	ldrb	r3, [r3, #4]
 80041b6:	7bfa      	ldrb	r2, [r7, #15]
 80041b8:	429a      	cmp	r2, r3
 80041ba:	d3b5      	bcc.n	8004128 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6818      	ldr	r0, [r3, #0]
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	7c1a      	ldrb	r2, [r3, #16]
 80041c4:	f88d 2000 	strb.w	r2, [sp]
 80041c8:	3304      	adds	r3, #4
 80041ca:	cb0e      	ldmia	r3, {r1, r2, r3}
 80041cc:	f002 fc8e 	bl	8006aec <USB_DevInit>
 80041d0:	4603      	mov	r3, r0
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d005      	beq.n	80041e2 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2202      	movs	r2, #2
 80041da:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80041de:	2301      	movs	r3, #1
 80041e0:	e00c      	b.n	80041fc <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2200      	movs	r2, #0
 80041e6:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2201      	movs	r2, #1
 80041ec:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4618      	mov	r0, r3
 80041f6:	f003 fcd8 	bl	8007baa <USB_DevDisconnect>

  return HAL_OK;
 80041fa:	2300      	movs	r3, #0
}
 80041fc:	4618      	mov	r0, r3
 80041fe:	3710      	adds	r7, #16
 8004200:	46bd      	mov	sp, r7
 8004202:	bd80      	pop	{r7, pc}

08004204 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b084      	sub	sp, #16
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004218:	2b01      	cmp	r3, #1
 800421a:	d101      	bne.n	8004220 <HAL_PCD_Start+0x1c>
 800421c:	2302      	movs	r3, #2
 800421e:	e022      	b.n	8004266 <HAL_PCD_Start+0x62>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2201      	movs	r2, #1
 8004224:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	68db      	ldr	r3, [r3, #12]
 800422c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004230:	2b00      	cmp	r3, #0
 8004232:	d009      	beq.n	8004248 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8004238:	2b01      	cmp	r3, #1
 800423a:	d105      	bne.n	8004248 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004240:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	4618      	mov	r0, r3
 800424e:	f002 fbdf 	bl	8006a10 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4618      	mov	r0, r3
 8004258:	f003 fc86 	bl	8007b68 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2200      	movs	r2, #0
 8004260:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004264:	2300      	movs	r3, #0
}
 8004266:	4618      	mov	r0, r3
 8004268:	3710      	adds	r7, #16
 800426a:	46bd      	mov	sp, r7
 800426c:	bd80      	pop	{r7, pc}

0800426e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800426e:	b590      	push	{r4, r7, lr}
 8004270:	b08d      	sub	sp, #52	@ 0x34
 8004272:	af00      	add	r7, sp, #0
 8004274:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800427c:	6a3b      	ldr	r3, [r7, #32]
 800427e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4618      	mov	r0, r3
 8004286:	f003 fd44 	bl	8007d12 <USB_GetMode>
 800428a:	4603      	mov	r3, r0
 800428c:	2b00      	cmp	r3, #0
 800428e:	f040 848c 	bne.w	8004baa <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4618      	mov	r0, r3
 8004298:	f003 fca8 	bl	8007bec <USB_ReadInterrupts>
 800429c:	4603      	mov	r3, r0
 800429e:	2b00      	cmp	r3, #0
 80042a0:	f000 8482 	beq.w	8004ba8 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80042a4:	69fb      	ldr	r3, [r7, #28]
 80042a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80042aa:	689b      	ldr	r3, [r3, #8]
 80042ac:	0a1b      	lsrs	r3, r3, #8
 80042ae:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4618      	mov	r0, r3
 80042be:	f003 fc95 	bl	8007bec <USB_ReadInterrupts>
 80042c2:	4603      	mov	r3, r0
 80042c4:	f003 0302 	and.w	r3, r3, #2
 80042c8:	2b02      	cmp	r3, #2
 80042ca:	d107      	bne.n	80042dc <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	695a      	ldr	r2, [r3, #20]
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f002 0202 	and.w	r2, r2, #2
 80042da:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4618      	mov	r0, r3
 80042e2:	f003 fc83 	bl	8007bec <USB_ReadInterrupts>
 80042e6:	4603      	mov	r3, r0
 80042e8:	f003 0310 	and.w	r3, r3, #16
 80042ec:	2b10      	cmp	r3, #16
 80042ee:	d161      	bne.n	80043b4 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	699a      	ldr	r2, [r3, #24]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f022 0210 	bic.w	r2, r2, #16
 80042fe:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8004300:	6a3b      	ldr	r3, [r7, #32]
 8004302:	6a1b      	ldr	r3, [r3, #32]
 8004304:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8004306:	69bb      	ldr	r3, [r7, #24]
 8004308:	f003 020f 	and.w	r2, r3, #15
 800430c:	4613      	mov	r3, r2
 800430e:	00db      	lsls	r3, r3, #3
 8004310:	4413      	add	r3, r2
 8004312:	009b      	lsls	r3, r3, #2
 8004314:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004318:	687a      	ldr	r2, [r7, #4]
 800431a:	4413      	add	r3, r2
 800431c:	3304      	adds	r3, #4
 800431e:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004320:	69bb      	ldr	r3, [r7, #24]
 8004322:	0c5b      	lsrs	r3, r3, #17
 8004324:	f003 030f 	and.w	r3, r3, #15
 8004328:	2b02      	cmp	r3, #2
 800432a:	d124      	bne.n	8004376 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800432c:	69ba      	ldr	r2, [r7, #24]
 800432e:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8004332:	4013      	ands	r3, r2
 8004334:	2b00      	cmp	r3, #0
 8004336:	d035      	beq.n	80043a4 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004338:	697b      	ldr	r3, [r7, #20]
 800433a:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800433c:	69bb      	ldr	r3, [r7, #24]
 800433e:	091b      	lsrs	r3, r3, #4
 8004340:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004342:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004346:	b29b      	uxth	r3, r3
 8004348:	461a      	mov	r2, r3
 800434a:	6a38      	ldr	r0, [r7, #32]
 800434c:	f003 faba 	bl	80078c4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004350:	697b      	ldr	r3, [r7, #20]
 8004352:	68da      	ldr	r2, [r3, #12]
 8004354:	69bb      	ldr	r3, [r7, #24]
 8004356:	091b      	lsrs	r3, r3, #4
 8004358:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800435c:	441a      	add	r2, r3
 800435e:	697b      	ldr	r3, [r7, #20]
 8004360:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004362:	697b      	ldr	r3, [r7, #20]
 8004364:	695a      	ldr	r2, [r3, #20]
 8004366:	69bb      	ldr	r3, [r7, #24]
 8004368:	091b      	lsrs	r3, r3, #4
 800436a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800436e:	441a      	add	r2, r3
 8004370:	697b      	ldr	r3, [r7, #20]
 8004372:	615a      	str	r2, [r3, #20]
 8004374:	e016      	b.n	80043a4 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8004376:	69bb      	ldr	r3, [r7, #24]
 8004378:	0c5b      	lsrs	r3, r3, #17
 800437a:	f003 030f 	and.w	r3, r3, #15
 800437e:	2b06      	cmp	r3, #6
 8004380:	d110      	bne.n	80043a4 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004388:	2208      	movs	r2, #8
 800438a:	4619      	mov	r1, r3
 800438c:	6a38      	ldr	r0, [r7, #32]
 800438e:	f003 fa99 	bl	80078c4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004392:	697b      	ldr	r3, [r7, #20]
 8004394:	695a      	ldr	r2, [r3, #20]
 8004396:	69bb      	ldr	r3, [r7, #24]
 8004398:	091b      	lsrs	r3, r3, #4
 800439a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800439e:	441a      	add	r2, r3
 80043a0:	697b      	ldr	r3, [r7, #20]
 80043a2:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	699a      	ldr	r2, [r3, #24]
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f042 0210 	orr.w	r2, r2, #16
 80043b2:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4618      	mov	r0, r3
 80043ba:	f003 fc17 	bl	8007bec <USB_ReadInterrupts>
 80043be:	4603      	mov	r3, r0
 80043c0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80043c4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80043c8:	f040 80a7 	bne.w	800451a <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80043cc:	2300      	movs	r3, #0
 80043ce:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4618      	mov	r0, r3
 80043d6:	f003 fc1c 	bl	8007c12 <USB_ReadDevAllOutEpInterrupt>
 80043da:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80043dc:	e099      	b.n	8004512 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80043de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043e0:	f003 0301 	and.w	r3, r3, #1
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	f000 808e 	beq.w	8004506 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80043f0:	b2d2      	uxtb	r2, r2
 80043f2:	4611      	mov	r1, r2
 80043f4:	4618      	mov	r0, r3
 80043f6:	f003 fc40 	bl	8007c7a <USB_ReadDevOutEPInterrupt>
 80043fa:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80043fc:	693b      	ldr	r3, [r7, #16]
 80043fe:	f003 0301 	and.w	r3, r3, #1
 8004402:	2b00      	cmp	r3, #0
 8004404:	d00c      	beq.n	8004420 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8004406:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004408:	015a      	lsls	r2, r3, #5
 800440a:	69fb      	ldr	r3, [r7, #28]
 800440c:	4413      	add	r3, r2
 800440e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004412:	461a      	mov	r2, r3
 8004414:	2301      	movs	r3, #1
 8004416:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004418:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800441a:	6878      	ldr	r0, [r7, #4]
 800441c:	f000 fea4 	bl	8005168 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004420:	693b      	ldr	r3, [r7, #16]
 8004422:	f003 0308 	and.w	r3, r3, #8
 8004426:	2b00      	cmp	r3, #0
 8004428:	d00c      	beq.n	8004444 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800442a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800442c:	015a      	lsls	r2, r3, #5
 800442e:	69fb      	ldr	r3, [r7, #28]
 8004430:	4413      	add	r3, r2
 8004432:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004436:	461a      	mov	r2, r3
 8004438:	2308      	movs	r3, #8
 800443a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800443c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800443e:	6878      	ldr	r0, [r7, #4]
 8004440:	f000 ff7a 	bl	8005338 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004444:	693b      	ldr	r3, [r7, #16]
 8004446:	f003 0310 	and.w	r3, r3, #16
 800444a:	2b00      	cmp	r3, #0
 800444c:	d008      	beq.n	8004460 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800444e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004450:	015a      	lsls	r2, r3, #5
 8004452:	69fb      	ldr	r3, [r7, #28]
 8004454:	4413      	add	r3, r2
 8004456:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800445a:	461a      	mov	r2, r3
 800445c:	2310      	movs	r3, #16
 800445e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8004460:	693b      	ldr	r3, [r7, #16]
 8004462:	f003 0302 	and.w	r3, r3, #2
 8004466:	2b00      	cmp	r3, #0
 8004468:	d030      	beq.n	80044cc <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800446a:	6a3b      	ldr	r3, [r7, #32]
 800446c:	695b      	ldr	r3, [r3, #20]
 800446e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004472:	2b80      	cmp	r3, #128	@ 0x80
 8004474:	d109      	bne.n	800448a <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8004476:	69fb      	ldr	r3, [r7, #28]
 8004478:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800447c:	685b      	ldr	r3, [r3, #4]
 800447e:	69fa      	ldr	r2, [r7, #28]
 8004480:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004484:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004488:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800448a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800448c:	4613      	mov	r3, r2
 800448e:	00db      	lsls	r3, r3, #3
 8004490:	4413      	add	r3, r2
 8004492:	009b      	lsls	r3, r3, #2
 8004494:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004498:	687a      	ldr	r2, [r7, #4]
 800449a:	4413      	add	r3, r2
 800449c:	3304      	adds	r3, #4
 800449e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80044a0:	697b      	ldr	r3, [r7, #20]
 80044a2:	78db      	ldrb	r3, [r3, #3]
 80044a4:	2b01      	cmp	r3, #1
 80044a6:	d108      	bne.n	80044ba <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80044a8:	697b      	ldr	r3, [r7, #20]
 80044aa:	2200      	movs	r2, #0
 80044ac:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80044ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044b0:	b2db      	uxtb	r3, r3
 80044b2:	4619      	mov	r1, r3
 80044b4:	6878      	ldr	r0, [r7, #4]
 80044b6:	f006 fc17 	bl	800ace8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80044ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044bc:	015a      	lsls	r2, r3, #5
 80044be:	69fb      	ldr	r3, [r7, #28]
 80044c0:	4413      	add	r3, r2
 80044c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80044c6:	461a      	mov	r2, r3
 80044c8:	2302      	movs	r3, #2
 80044ca:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80044cc:	693b      	ldr	r3, [r7, #16]
 80044ce:	f003 0320 	and.w	r3, r3, #32
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d008      	beq.n	80044e8 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80044d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044d8:	015a      	lsls	r2, r3, #5
 80044da:	69fb      	ldr	r3, [r7, #28]
 80044dc:	4413      	add	r3, r2
 80044de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80044e2:	461a      	mov	r2, r3
 80044e4:	2320      	movs	r3, #32
 80044e6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80044e8:	693b      	ldr	r3, [r7, #16]
 80044ea:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d009      	beq.n	8004506 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80044f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044f4:	015a      	lsls	r2, r3, #5
 80044f6:	69fb      	ldr	r3, [r7, #28]
 80044f8:	4413      	add	r3, r2
 80044fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80044fe:	461a      	mov	r2, r3
 8004500:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004504:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8004506:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004508:	3301      	adds	r3, #1
 800450a:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800450c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800450e:	085b      	lsrs	r3, r3, #1
 8004510:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8004512:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004514:	2b00      	cmp	r3, #0
 8004516:	f47f af62 	bne.w	80043de <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4618      	mov	r0, r3
 8004520:	f003 fb64 	bl	8007bec <USB_ReadInterrupts>
 8004524:	4603      	mov	r3, r0
 8004526:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800452a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800452e:	f040 80db 	bne.w	80046e8 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4618      	mov	r0, r3
 8004538:	f003 fb85 	bl	8007c46 <USB_ReadDevAllInEpInterrupt>
 800453c:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 800453e:	2300      	movs	r3, #0
 8004540:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8004542:	e0cd      	b.n	80046e0 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8004544:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004546:	f003 0301 	and.w	r3, r3, #1
 800454a:	2b00      	cmp	r3, #0
 800454c:	f000 80c2 	beq.w	80046d4 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004556:	b2d2      	uxtb	r2, r2
 8004558:	4611      	mov	r1, r2
 800455a:	4618      	mov	r0, r3
 800455c:	f003 fbab 	bl	8007cb6 <USB_ReadDevInEPInterrupt>
 8004560:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004562:	693b      	ldr	r3, [r7, #16]
 8004564:	f003 0301 	and.w	r3, r3, #1
 8004568:	2b00      	cmp	r3, #0
 800456a:	d057      	beq.n	800461c <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800456c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800456e:	f003 030f 	and.w	r3, r3, #15
 8004572:	2201      	movs	r2, #1
 8004574:	fa02 f303 	lsl.w	r3, r2, r3
 8004578:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800457a:	69fb      	ldr	r3, [r7, #28]
 800457c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004580:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	43db      	mvns	r3, r3
 8004586:	69f9      	ldr	r1, [r7, #28]
 8004588:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800458c:	4013      	ands	r3, r2
 800458e:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004590:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004592:	015a      	lsls	r2, r3, #5
 8004594:	69fb      	ldr	r3, [r7, #28]
 8004596:	4413      	add	r3, r2
 8004598:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800459c:	461a      	mov	r2, r3
 800459e:	2301      	movs	r3, #1
 80045a0:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	799b      	ldrb	r3, [r3, #6]
 80045a6:	2b01      	cmp	r3, #1
 80045a8:	d132      	bne.n	8004610 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80045aa:	6879      	ldr	r1, [r7, #4]
 80045ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80045ae:	4613      	mov	r3, r2
 80045b0:	00db      	lsls	r3, r3, #3
 80045b2:	4413      	add	r3, r2
 80045b4:	009b      	lsls	r3, r3, #2
 80045b6:	440b      	add	r3, r1
 80045b8:	3320      	adds	r3, #32
 80045ba:	6819      	ldr	r1, [r3, #0]
 80045bc:	6878      	ldr	r0, [r7, #4]
 80045be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80045c0:	4613      	mov	r3, r2
 80045c2:	00db      	lsls	r3, r3, #3
 80045c4:	4413      	add	r3, r2
 80045c6:	009b      	lsls	r3, r3, #2
 80045c8:	4403      	add	r3, r0
 80045ca:	331c      	adds	r3, #28
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4419      	add	r1, r3
 80045d0:	6878      	ldr	r0, [r7, #4]
 80045d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80045d4:	4613      	mov	r3, r2
 80045d6:	00db      	lsls	r3, r3, #3
 80045d8:	4413      	add	r3, r2
 80045da:	009b      	lsls	r3, r3, #2
 80045dc:	4403      	add	r3, r0
 80045de:	3320      	adds	r3, #32
 80045e0:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80045e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d113      	bne.n	8004610 <HAL_PCD_IRQHandler+0x3a2>
 80045e8:	6879      	ldr	r1, [r7, #4]
 80045ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80045ec:	4613      	mov	r3, r2
 80045ee:	00db      	lsls	r3, r3, #3
 80045f0:	4413      	add	r3, r2
 80045f2:	009b      	lsls	r3, r3, #2
 80045f4:	440b      	add	r3, r1
 80045f6:	3324      	adds	r3, #36	@ 0x24
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d108      	bne.n	8004610 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6818      	ldr	r0, [r3, #0]
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004608:	461a      	mov	r2, r3
 800460a:	2101      	movs	r1, #1
 800460c:	f003 fbb2 	bl	8007d74 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004610:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004612:	b2db      	uxtb	r3, r3
 8004614:	4619      	mov	r1, r3
 8004616:	6878      	ldr	r0, [r7, #4]
 8004618:	f006 fae1 	bl	800abde <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800461c:	693b      	ldr	r3, [r7, #16]
 800461e:	f003 0308 	and.w	r3, r3, #8
 8004622:	2b00      	cmp	r3, #0
 8004624:	d008      	beq.n	8004638 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8004626:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004628:	015a      	lsls	r2, r3, #5
 800462a:	69fb      	ldr	r3, [r7, #28]
 800462c:	4413      	add	r3, r2
 800462e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004632:	461a      	mov	r2, r3
 8004634:	2308      	movs	r3, #8
 8004636:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004638:	693b      	ldr	r3, [r7, #16]
 800463a:	f003 0310 	and.w	r3, r3, #16
 800463e:	2b00      	cmp	r3, #0
 8004640:	d008      	beq.n	8004654 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004644:	015a      	lsls	r2, r3, #5
 8004646:	69fb      	ldr	r3, [r7, #28]
 8004648:	4413      	add	r3, r2
 800464a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800464e:	461a      	mov	r2, r3
 8004650:	2310      	movs	r3, #16
 8004652:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004654:	693b      	ldr	r3, [r7, #16]
 8004656:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800465a:	2b00      	cmp	r3, #0
 800465c:	d008      	beq.n	8004670 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800465e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004660:	015a      	lsls	r2, r3, #5
 8004662:	69fb      	ldr	r3, [r7, #28]
 8004664:	4413      	add	r3, r2
 8004666:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800466a:	461a      	mov	r2, r3
 800466c:	2340      	movs	r3, #64	@ 0x40
 800466e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004670:	693b      	ldr	r3, [r7, #16]
 8004672:	f003 0302 	and.w	r3, r3, #2
 8004676:	2b00      	cmp	r3, #0
 8004678:	d023      	beq.n	80046c2 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800467a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800467c:	6a38      	ldr	r0, [r7, #32]
 800467e:	f002 fb99 	bl	8006db4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8004682:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004684:	4613      	mov	r3, r2
 8004686:	00db      	lsls	r3, r3, #3
 8004688:	4413      	add	r3, r2
 800468a:	009b      	lsls	r3, r3, #2
 800468c:	3310      	adds	r3, #16
 800468e:	687a      	ldr	r2, [r7, #4]
 8004690:	4413      	add	r3, r2
 8004692:	3304      	adds	r3, #4
 8004694:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004696:	697b      	ldr	r3, [r7, #20]
 8004698:	78db      	ldrb	r3, [r3, #3]
 800469a:	2b01      	cmp	r3, #1
 800469c:	d108      	bne.n	80046b0 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800469e:	697b      	ldr	r3, [r7, #20]
 80046a0:	2200      	movs	r2, #0
 80046a2:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80046a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046a6:	b2db      	uxtb	r3, r3
 80046a8:	4619      	mov	r1, r3
 80046aa:	6878      	ldr	r0, [r7, #4]
 80046ac:	f006 fb2e 	bl	800ad0c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80046b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046b2:	015a      	lsls	r2, r3, #5
 80046b4:	69fb      	ldr	r3, [r7, #28]
 80046b6:	4413      	add	r3, r2
 80046b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80046bc:	461a      	mov	r2, r3
 80046be:	2302      	movs	r3, #2
 80046c0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80046c2:	693b      	ldr	r3, [r7, #16]
 80046c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d003      	beq.n	80046d4 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80046cc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80046ce:	6878      	ldr	r0, [r7, #4]
 80046d0:	f000 fcbd 	bl	800504e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80046d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046d6:	3301      	adds	r3, #1
 80046d8:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80046da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046dc:	085b      	lsrs	r3, r3, #1
 80046de:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80046e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	f47f af2e 	bne.w	8004544 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4618      	mov	r0, r3
 80046ee:	f003 fa7d 	bl	8007bec <USB_ReadInterrupts>
 80046f2:	4603      	mov	r3, r0
 80046f4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80046f8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80046fc:	d122      	bne.n	8004744 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80046fe:	69fb      	ldr	r3, [r7, #28]
 8004700:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004704:	685b      	ldr	r3, [r3, #4]
 8004706:	69fa      	ldr	r2, [r7, #28]
 8004708:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800470c:	f023 0301 	bic.w	r3, r3, #1
 8004710:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8004718:	2b01      	cmp	r3, #1
 800471a:	d108      	bne.n	800472e <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2200      	movs	r2, #0
 8004720:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004724:	2100      	movs	r1, #0
 8004726:	6878      	ldr	r0, [r7, #4]
 8004728:	f000 fea4 	bl	8005474 <HAL_PCDEx_LPM_Callback>
 800472c:	e002      	b.n	8004734 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800472e:	6878      	ldr	r0, [r7, #4]
 8004730:	f006 facc 	bl	800accc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	695a      	ldr	r2, [r3, #20]
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8004742:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4618      	mov	r0, r3
 800474a:	f003 fa4f 	bl	8007bec <USB_ReadInterrupts>
 800474e:	4603      	mov	r3, r0
 8004750:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004754:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004758:	d112      	bne.n	8004780 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800475a:	69fb      	ldr	r3, [r7, #28]
 800475c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004760:	689b      	ldr	r3, [r3, #8]
 8004762:	f003 0301 	and.w	r3, r3, #1
 8004766:	2b01      	cmp	r3, #1
 8004768:	d102      	bne.n	8004770 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800476a:	6878      	ldr	r0, [r7, #4]
 800476c:	f006 fa88 	bl	800ac80 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	695a      	ldr	r2, [r3, #20]
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 800477e:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4618      	mov	r0, r3
 8004786:	f003 fa31 	bl	8007bec <USB_ReadInterrupts>
 800478a:	4603      	mov	r3, r0
 800478c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004790:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004794:	f040 80b7 	bne.w	8004906 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004798:	69fb      	ldr	r3, [r7, #28]
 800479a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	69fa      	ldr	r2, [r7, #28]
 80047a2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80047a6:	f023 0301 	bic.w	r3, r3, #1
 80047aa:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	2110      	movs	r1, #16
 80047b2:	4618      	mov	r0, r3
 80047b4:	f002 fafe 	bl	8006db4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80047b8:	2300      	movs	r3, #0
 80047ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80047bc:	e046      	b.n	800484c <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80047be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047c0:	015a      	lsls	r2, r3, #5
 80047c2:	69fb      	ldr	r3, [r7, #28]
 80047c4:	4413      	add	r3, r2
 80047c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80047ca:	461a      	mov	r2, r3
 80047cc:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80047d0:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80047d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047d4:	015a      	lsls	r2, r3, #5
 80047d6:	69fb      	ldr	r3, [r7, #28]
 80047d8:	4413      	add	r3, r2
 80047da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80047e2:	0151      	lsls	r1, r2, #5
 80047e4:	69fa      	ldr	r2, [r7, #28]
 80047e6:	440a      	add	r2, r1
 80047e8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80047ec:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80047f0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80047f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047f4:	015a      	lsls	r2, r3, #5
 80047f6:	69fb      	ldr	r3, [r7, #28]
 80047f8:	4413      	add	r3, r2
 80047fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80047fe:	461a      	mov	r2, r3
 8004800:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004804:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004806:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004808:	015a      	lsls	r2, r3, #5
 800480a:	69fb      	ldr	r3, [r7, #28]
 800480c:	4413      	add	r3, r2
 800480e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004816:	0151      	lsls	r1, r2, #5
 8004818:	69fa      	ldr	r2, [r7, #28]
 800481a:	440a      	add	r2, r1
 800481c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004820:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004824:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004826:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004828:	015a      	lsls	r2, r3, #5
 800482a:	69fb      	ldr	r3, [r7, #28]
 800482c:	4413      	add	r3, r2
 800482e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004836:	0151      	lsls	r1, r2, #5
 8004838:	69fa      	ldr	r2, [r7, #28]
 800483a:	440a      	add	r2, r1
 800483c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004840:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004844:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004846:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004848:	3301      	adds	r3, #1
 800484a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	791b      	ldrb	r3, [r3, #4]
 8004850:	461a      	mov	r2, r3
 8004852:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004854:	4293      	cmp	r3, r2
 8004856:	d3b2      	bcc.n	80047be <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004858:	69fb      	ldr	r3, [r7, #28]
 800485a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800485e:	69db      	ldr	r3, [r3, #28]
 8004860:	69fa      	ldr	r2, [r7, #28]
 8004862:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004866:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 800486a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	7bdb      	ldrb	r3, [r3, #15]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d016      	beq.n	80048a2 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004874:	69fb      	ldr	r3, [r7, #28]
 8004876:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800487a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800487e:	69fa      	ldr	r2, [r7, #28]
 8004880:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004884:	f043 030b 	orr.w	r3, r3, #11
 8004888:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800488c:	69fb      	ldr	r3, [r7, #28]
 800488e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004892:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004894:	69fa      	ldr	r2, [r7, #28]
 8004896:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800489a:	f043 030b 	orr.w	r3, r3, #11
 800489e:	6453      	str	r3, [r2, #68]	@ 0x44
 80048a0:	e015      	b.n	80048ce <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80048a2:	69fb      	ldr	r3, [r7, #28]
 80048a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80048a8:	695b      	ldr	r3, [r3, #20]
 80048aa:	69fa      	ldr	r2, [r7, #28]
 80048ac:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80048b0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80048b4:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 80048b8:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80048ba:	69fb      	ldr	r3, [r7, #28]
 80048bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80048c0:	691b      	ldr	r3, [r3, #16]
 80048c2:	69fa      	ldr	r2, [r7, #28]
 80048c4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80048c8:	f043 030b 	orr.w	r3, r3, #11
 80048cc:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80048ce:	69fb      	ldr	r3, [r7, #28]
 80048d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	69fa      	ldr	r2, [r7, #28]
 80048d8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80048dc:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80048e0:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6818      	ldr	r0, [r3, #0]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80048f0:	461a      	mov	r2, r3
 80048f2:	f003 fa3f 	bl	8007d74 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	695a      	ldr	r2, [r3, #20]
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8004904:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4618      	mov	r0, r3
 800490c:	f003 f96e 	bl	8007bec <USB_ReadInterrupts>
 8004910:	4603      	mov	r3, r0
 8004912:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004916:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800491a:	d123      	bne.n	8004964 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4618      	mov	r0, r3
 8004922:	f003 fa04 	bl	8007d2e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	4618      	mov	r0, r3
 800492c:	f002 fabb 	bl	8006ea6 <USB_GetDevSpeed>
 8004930:	4603      	mov	r3, r0
 8004932:	461a      	mov	r2, r3
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681c      	ldr	r4, [r3, #0]
 800493c:	f001 fa0a 	bl	8005d54 <HAL_RCC_GetHCLKFreq>
 8004940:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004946:	461a      	mov	r2, r3
 8004948:	4620      	mov	r0, r4
 800494a:	f001 ffbf 	bl	80068cc <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800494e:	6878      	ldr	r0, [r7, #4]
 8004950:	f006 f96d 	bl	800ac2e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	695a      	ldr	r2, [r3, #20]
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8004962:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4618      	mov	r0, r3
 800496a:	f003 f93f 	bl	8007bec <USB_ReadInterrupts>
 800496e:	4603      	mov	r3, r0
 8004970:	f003 0308 	and.w	r3, r3, #8
 8004974:	2b08      	cmp	r3, #8
 8004976:	d10a      	bne.n	800498e <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004978:	6878      	ldr	r0, [r7, #4]
 800497a:	f006 f94a 	bl	800ac12 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	695a      	ldr	r2, [r3, #20]
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f002 0208 	and.w	r2, r2, #8
 800498c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4618      	mov	r0, r3
 8004994:	f003 f92a 	bl	8007bec <USB_ReadInterrupts>
 8004998:	4603      	mov	r3, r0
 800499a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800499e:	2b80      	cmp	r3, #128	@ 0x80
 80049a0:	d123      	bne.n	80049ea <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80049a2:	6a3b      	ldr	r3, [r7, #32]
 80049a4:	699b      	ldr	r3, [r3, #24]
 80049a6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80049aa:	6a3b      	ldr	r3, [r7, #32]
 80049ac:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80049ae:	2301      	movs	r3, #1
 80049b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80049b2:	e014      	b.n	80049de <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80049b4:	6879      	ldr	r1, [r7, #4]
 80049b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80049b8:	4613      	mov	r3, r2
 80049ba:	00db      	lsls	r3, r3, #3
 80049bc:	4413      	add	r3, r2
 80049be:	009b      	lsls	r3, r3, #2
 80049c0:	440b      	add	r3, r1
 80049c2:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80049c6:	781b      	ldrb	r3, [r3, #0]
 80049c8:	2b01      	cmp	r3, #1
 80049ca:	d105      	bne.n	80049d8 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80049cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049ce:	b2db      	uxtb	r3, r3
 80049d0:	4619      	mov	r1, r3
 80049d2:	6878      	ldr	r0, [r7, #4]
 80049d4:	f000 fb0a 	bl	8004fec <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80049d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049da:	3301      	adds	r3, #1
 80049dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	791b      	ldrb	r3, [r3, #4]
 80049e2:	461a      	mov	r2, r3
 80049e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d3e4      	bcc.n	80049b4 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4618      	mov	r0, r3
 80049f0:	f003 f8fc 	bl	8007bec <USB_ReadInterrupts>
 80049f4:	4603      	mov	r3, r0
 80049f6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80049fa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80049fe:	d13c      	bne.n	8004a7a <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004a00:	2301      	movs	r3, #1
 8004a02:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a04:	e02b      	b.n	8004a5e <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8004a06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a08:	015a      	lsls	r2, r3, #5
 8004a0a:	69fb      	ldr	r3, [r7, #28]
 8004a0c:	4413      	add	r3, r2
 8004a0e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004a16:	6879      	ldr	r1, [r7, #4]
 8004a18:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a1a:	4613      	mov	r3, r2
 8004a1c:	00db      	lsls	r3, r3, #3
 8004a1e:	4413      	add	r3, r2
 8004a20:	009b      	lsls	r3, r3, #2
 8004a22:	440b      	add	r3, r1
 8004a24:	3318      	adds	r3, #24
 8004a26:	781b      	ldrb	r3, [r3, #0]
 8004a28:	2b01      	cmp	r3, #1
 8004a2a:	d115      	bne.n	8004a58 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8004a2c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	da12      	bge.n	8004a58 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8004a32:	6879      	ldr	r1, [r7, #4]
 8004a34:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a36:	4613      	mov	r3, r2
 8004a38:	00db      	lsls	r3, r3, #3
 8004a3a:	4413      	add	r3, r2
 8004a3c:	009b      	lsls	r3, r3, #2
 8004a3e:	440b      	add	r3, r1
 8004a40:	3317      	adds	r3, #23
 8004a42:	2201      	movs	r2, #1
 8004a44:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8004a46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a48:	b2db      	uxtb	r3, r3
 8004a4a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004a4e:	b2db      	uxtb	r3, r3
 8004a50:	4619      	mov	r1, r3
 8004a52:	6878      	ldr	r0, [r7, #4]
 8004a54:	f000 faca 	bl	8004fec <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004a58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a5a:	3301      	adds	r3, #1
 8004a5c:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	791b      	ldrb	r3, [r3, #4]
 8004a62:	461a      	mov	r2, r3
 8004a64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d3cd      	bcc.n	8004a06 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	695a      	ldr	r2, [r3, #20]
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8004a78:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	4618      	mov	r0, r3
 8004a80:	f003 f8b4 	bl	8007bec <USB_ReadInterrupts>
 8004a84:	4603      	mov	r3, r0
 8004a86:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004a8a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004a8e:	d156      	bne.n	8004b3e <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004a90:	2301      	movs	r3, #1
 8004a92:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a94:	e045      	b.n	8004b22 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8004a96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a98:	015a      	lsls	r2, r3, #5
 8004a9a:	69fb      	ldr	r3, [r7, #28]
 8004a9c:	4413      	add	r3, r2
 8004a9e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004aa6:	6879      	ldr	r1, [r7, #4]
 8004aa8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004aaa:	4613      	mov	r3, r2
 8004aac:	00db      	lsls	r3, r3, #3
 8004aae:	4413      	add	r3, r2
 8004ab0:	009b      	lsls	r3, r3, #2
 8004ab2:	440b      	add	r3, r1
 8004ab4:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8004ab8:	781b      	ldrb	r3, [r3, #0]
 8004aba:	2b01      	cmp	r3, #1
 8004abc:	d12e      	bne.n	8004b1c <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004abe:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	da2b      	bge.n	8004b1c <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8004ac4:	69bb      	ldr	r3, [r7, #24]
 8004ac6:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8004ad0:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004ad4:	429a      	cmp	r2, r3
 8004ad6:	d121      	bne.n	8004b1c <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8004ad8:	6879      	ldr	r1, [r7, #4]
 8004ada:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004adc:	4613      	mov	r3, r2
 8004ade:	00db      	lsls	r3, r3, #3
 8004ae0:	4413      	add	r3, r2
 8004ae2:	009b      	lsls	r3, r3, #2
 8004ae4:	440b      	add	r3, r1
 8004ae6:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8004aea:	2201      	movs	r2, #1
 8004aec:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8004aee:	6a3b      	ldr	r3, [r7, #32]
 8004af0:	699b      	ldr	r3, [r3, #24]
 8004af2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004af6:	6a3b      	ldr	r3, [r7, #32]
 8004af8:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8004afa:	6a3b      	ldr	r3, [r7, #32]
 8004afc:	695b      	ldr	r3, [r3, #20]
 8004afe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d10a      	bne.n	8004b1c <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8004b06:	69fb      	ldr	r3, [r7, #28]
 8004b08:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004b0c:	685b      	ldr	r3, [r3, #4]
 8004b0e:	69fa      	ldr	r2, [r7, #28]
 8004b10:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004b14:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004b18:	6053      	str	r3, [r2, #4]
            break;
 8004b1a:	e008      	b.n	8004b2e <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004b1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b1e:	3301      	adds	r3, #1
 8004b20:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	791b      	ldrb	r3, [r3, #4]
 8004b26:	461a      	mov	r2, r3
 8004b28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d3b3      	bcc.n	8004a96 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	695a      	ldr	r2, [r3, #20]
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8004b3c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	4618      	mov	r0, r3
 8004b44:	f003 f852 	bl	8007bec <USB_ReadInterrupts>
 8004b48:	4603      	mov	r3, r0
 8004b4a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004b4e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b52:	d10a      	bne.n	8004b6a <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004b54:	6878      	ldr	r0, [r7, #4]
 8004b56:	f006 f8eb 	bl	800ad30 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	695a      	ldr	r2, [r3, #20]
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8004b68:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	4618      	mov	r0, r3
 8004b70:	f003 f83c 	bl	8007bec <USB_ReadInterrupts>
 8004b74:	4603      	mov	r3, r0
 8004b76:	f003 0304 	and.w	r3, r3, #4
 8004b7a:	2b04      	cmp	r3, #4
 8004b7c:	d115      	bne.n	8004baa <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	685b      	ldr	r3, [r3, #4]
 8004b84:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004b86:	69bb      	ldr	r3, [r7, #24]
 8004b88:	f003 0304 	and.w	r3, r3, #4
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d002      	beq.n	8004b96 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004b90:	6878      	ldr	r0, [r7, #4]
 8004b92:	f006 f8db 	bl	800ad4c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	6859      	ldr	r1, [r3, #4]
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	69ba      	ldr	r2, [r7, #24]
 8004ba2:	430a      	orrs	r2, r1
 8004ba4:	605a      	str	r2, [r3, #4]
 8004ba6:	e000      	b.n	8004baa <HAL_PCD_IRQHandler+0x93c>
      return;
 8004ba8:	bf00      	nop
    }
  }
}
 8004baa:	3734      	adds	r7, #52	@ 0x34
 8004bac:	46bd      	mov	sp, r7
 8004bae:	bd90      	pop	{r4, r7, pc}

08004bb0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b082      	sub	sp, #8
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
 8004bb8:	460b      	mov	r3, r1
 8004bba:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004bc2:	2b01      	cmp	r3, #1
 8004bc4:	d101      	bne.n	8004bca <HAL_PCD_SetAddress+0x1a>
 8004bc6:	2302      	movs	r3, #2
 8004bc8:	e012      	b.n	8004bf0 <HAL_PCD_SetAddress+0x40>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2201      	movs	r2, #1
 8004bce:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	78fa      	ldrb	r2, [r7, #3]
 8004bd6:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	78fa      	ldrb	r2, [r7, #3]
 8004bde:	4611      	mov	r1, r2
 8004be0:	4618      	mov	r0, r3
 8004be2:	f002 ff9b 	bl	8007b1c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2200      	movs	r2, #0
 8004bea:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004bee:	2300      	movs	r3, #0
}
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	3708      	adds	r7, #8
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	bd80      	pop	{r7, pc}

08004bf8 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b084      	sub	sp, #16
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
 8004c00:	4608      	mov	r0, r1
 8004c02:	4611      	mov	r1, r2
 8004c04:	461a      	mov	r2, r3
 8004c06:	4603      	mov	r3, r0
 8004c08:	70fb      	strb	r3, [r7, #3]
 8004c0a:	460b      	mov	r3, r1
 8004c0c:	803b      	strh	r3, [r7, #0]
 8004c0e:	4613      	mov	r3, r2
 8004c10:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8004c12:	2300      	movs	r3, #0
 8004c14:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004c16:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	da0f      	bge.n	8004c3e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004c1e:	78fb      	ldrb	r3, [r7, #3]
 8004c20:	f003 020f 	and.w	r2, r3, #15
 8004c24:	4613      	mov	r3, r2
 8004c26:	00db      	lsls	r3, r3, #3
 8004c28:	4413      	add	r3, r2
 8004c2a:	009b      	lsls	r3, r3, #2
 8004c2c:	3310      	adds	r3, #16
 8004c2e:	687a      	ldr	r2, [r7, #4]
 8004c30:	4413      	add	r3, r2
 8004c32:	3304      	adds	r3, #4
 8004c34:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	2201      	movs	r2, #1
 8004c3a:	705a      	strb	r2, [r3, #1]
 8004c3c:	e00f      	b.n	8004c5e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004c3e:	78fb      	ldrb	r3, [r7, #3]
 8004c40:	f003 020f 	and.w	r2, r3, #15
 8004c44:	4613      	mov	r3, r2
 8004c46:	00db      	lsls	r3, r3, #3
 8004c48:	4413      	add	r3, r2
 8004c4a:	009b      	lsls	r3, r3, #2
 8004c4c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004c50:	687a      	ldr	r2, [r7, #4]
 8004c52:	4413      	add	r3, r2
 8004c54:	3304      	adds	r3, #4
 8004c56:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004c5e:	78fb      	ldrb	r3, [r7, #3]
 8004c60:	f003 030f 	and.w	r3, r3, #15
 8004c64:	b2da      	uxtb	r2, r3
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8004c6a:	883b      	ldrh	r3, [r7, #0]
 8004c6c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	78ba      	ldrb	r2, [r7, #2]
 8004c78:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	785b      	ldrb	r3, [r3, #1]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d004      	beq.n	8004c8c <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	781b      	ldrb	r3, [r3, #0]
 8004c86:	461a      	mov	r2, r3
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004c8c:	78bb      	ldrb	r3, [r7, #2]
 8004c8e:	2b02      	cmp	r3, #2
 8004c90:	d102      	bne.n	8004c98 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	2200      	movs	r2, #0
 8004c96:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004c9e:	2b01      	cmp	r3, #1
 8004ca0:	d101      	bne.n	8004ca6 <HAL_PCD_EP_Open+0xae>
 8004ca2:	2302      	movs	r3, #2
 8004ca4:	e00e      	b.n	8004cc4 <HAL_PCD_EP_Open+0xcc>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2201      	movs	r2, #1
 8004caa:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	68f9      	ldr	r1, [r7, #12]
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	f002 f91b 	bl	8006ef0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8004cc2:	7afb      	ldrb	r3, [r7, #11]
}
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	3710      	adds	r7, #16
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	bd80      	pop	{r7, pc}

08004ccc <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b084      	sub	sp, #16
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
 8004cd4:	460b      	mov	r3, r1
 8004cd6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004cd8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	da0f      	bge.n	8004d00 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004ce0:	78fb      	ldrb	r3, [r7, #3]
 8004ce2:	f003 020f 	and.w	r2, r3, #15
 8004ce6:	4613      	mov	r3, r2
 8004ce8:	00db      	lsls	r3, r3, #3
 8004cea:	4413      	add	r3, r2
 8004cec:	009b      	lsls	r3, r3, #2
 8004cee:	3310      	adds	r3, #16
 8004cf0:	687a      	ldr	r2, [r7, #4]
 8004cf2:	4413      	add	r3, r2
 8004cf4:	3304      	adds	r3, #4
 8004cf6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	2201      	movs	r2, #1
 8004cfc:	705a      	strb	r2, [r3, #1]
 8004cfe:	e00f      	b.n	8004d20 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004d00:	78fb      	ldrb	r3, [r7, #3]
 8004d02:	f003 020f 	and.w	r2, r3, #15
 8004d06:	4613      	mov	r3, r2
 8004d08:	00db      	lsls	r3, r3, #3
 8004d0a:	4413      	add	r3, r2
 8004d0c:	009b      	lsls	r3, r3, #2
 8004d0e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004d12:	687a      	ldr	r2, [r7, #4]
 8004d14:	4413      	add	r3, r2
 8004d16:	3304      	adds	r3, #4
 8004d18:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8004d20:	78fb      	ldrb	r3, [r7, #3]
 8004d22:	f003 030f 	and.w	r3, r3, #15
 8004d26:	b2da      	uxtb	r2, r3
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004d32:	2b01      	cmp	r3, #1
 8004d34:	d101      	bne.n	8004d3a <HAL_PCD_EP_Close+0x6e>
 8004d36:	2302      	movs	r3, #2
 8004d38:	e00e      	b.n	8004d58 <HAL_PCD_EP_Close+0x8c>
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2201      	movs	r2, #1
 8004d3e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	68f9      	ldr	r1, [r7, #12]
 8004d48:	4618      	mov	r0, r3
 8004d4a:	f002 f959 	bl	8007000 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2200      	movs	r2, #0
 8004d52:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8004d56:	2300      	movs	r3, #0
}
 8004d58:	4618      	mov	r0, r3
 8004d5a:	3710      	adds	r7, #16
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	bd80      	pop	{r7, pc}

08004d60 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b086      	sub	sp, #24
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	60f8      	str	r0, [r7, #12]
 8004d68:	607a      	str	r2, [r7, #4]
 8004d6a:	603b      	str	r3, [r7, #0]
 8004d6c:	460b      	mov	r3, r1
 8004d6e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004d70:	7afb      	ldrb	r3, [r7, #11]
 8004d72:	f003 020f 	and.w	r2, r3, #15
 8004d76:	4613      	mov	r3, r2
 8004d78:	00db      	lsls	r3, r3, #3
 8004d7a:	4413      	add	r3, r2
 8004d7c:	009b      	lsls	r3, r3, #2
 8004d7e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004d82:	68fa      	ldr	r2, [r7, #12]
 8004d84:	4413      	add	r3, r2
 8004d86:	3304      	adds	r3, #4
 8004d88:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004d8a:	697b      	ldr	r3, [r7, #20]
 8004d8c:	687a      	ldr	r2, [r7, #4]
 8004d8e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004d90:	697b      	ldr	r3, [r7, #20]
 8004d92:	683a      	ldr	r2, [r7, #0]
 8004d94:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004d96:	697b      	ldr	r3, [r7, #20]
 8004d98:	2200      	movs	r2, #0
 8004d9a:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8004d9c:	697b      	ldr	r3, [r7, #20]
 8004d9e:	2200      	movs	r2, #0
 8004da0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004da2:	7afb      	ldrb	r3, [r7, #11]
 8004da4:	f003 030f 	and.w	r3, r3, #15
 8004da8:	b2da      	uxtb	r2, r3
 8004daa:	697b      	ldr	r3, [r7, #20]
 8004dac:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	799b      	ldrb	r3, [r3, #6]
 8004db2:	2b01      	cmp	r3, #1
 8004db4:	d102      	bne.n	8004dbc <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004db6:	687a      	ldr	r2, [r7, #4]
 8004db8:	697b      	ldr	r3, [r7, #20]
 8004dba:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	6818      	ldr	r0, [r3, #0]
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	799b      	ldrb	r3, [r3, #6]
 8004dc4:	461a      	mov	r2, r3
 8004dc6:	6979      	ldr	r1, [r7, #20]
 8004dc8:	f002 f9f6 	bl	80071b8 <USB_EPStartXfer>

  return HAL_OK;
 8004dcc:	2300      	movs	r3, #0
}
 8004dce:	4618      	mov	r0, r3
 8004dd0:	3718      	adds	r7, #24
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	bd80      	pop	{r7, pc}

08004dd6 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8004dd6:	b480      	push	{r7}
 8004dd8:	b083      	sub	sp, #12
 8004dda:	af00      	add	r7, sp, #0
 8004ddc:	6078      	str	r0, [r7, #4]
 8004dde:	460b      	mov	r3, r1
 8004de0:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004de2:	78fb      	ldrb	r3, [r7, #3]
 8004de4:	f003 020f 	and.w	r2, r3, #15
 8004de8:	6879      	ldr	r1, [r7, #4]
 8004dea:	4613      	mov	r3, r2
 8004dec:	00db      	lsls	r3, r3, #3
 8004dee:	4413      	add	r3, r2
 8004df0:	009b      	lsls	r3, r3, #2
 8004df2:	440b      	add	r3, r1
 8004df4:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8004df8:	681b      	ldr	r3, [r3, #0]
}
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	370c      	adds	r7, #12
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e04:	4770      	bx	lr

08004e06 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004e06:	b580      	push	{r7, lr}
 8004e08:	b086      	sub	sp, #24
 8004e0a:	af00      	add	r7, sp, #0
 8004e0c:	60f8      	str	r0, [r7, #12]
 8004e0e:	607a      	str	r2, [r7, #4]
 8004e10:	603b      	str	r3, [r7, #0]
 8004e12:	460b      	mov	r3, r1
 8004e14:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004e16:	7afb      	ldrb	r3, [r7, #11]
 8004e18:	f003 020f 	and.w	r2, r3, #15
 8004e1c:	4613      	mov	r3, r2
 8004e1e:	00db      	lsls	r3, r3, #3
 8004e20:	4413      	add	r3, r2
 8004e22:	009b      	lsls	r3, r3, #2
 8004e24:	3310      	adds	r3, #16
 8004e26:	68fa      	ldr	r2, [r7, #12]
 8004e28:	4413      	add	r3, r2
 8004e2a:	3304      	adds	r3, #4
 8004e2c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004e2e:	697b      	ldr	r3, [r7, #20]
 8004e30:	687a      	ldr	r2, [r7, #4]
 8004e32:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004e34:	697b      	ldr	r3, [r7, #20]
 8004e36:	683a      	ldr	r2, [r7, #0]
 8004e38:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004e3a:	697b      	ldr	r3, [r7, #20]
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8004e40:	697b      	ldr	r3, [r7, #20]
 8004e42:	2201      	movs	r2, #1
 8004e44:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004e46:	7afb      	ldrb	r3, [r7, #11]
 8004e48:	f003 030f 	and.w	r3, r3, #15
 8004e4c:	b2da      	uxtb	r2, r3
 8004e4e:	697b      	ldr	r3, [r7, #20]
 8004e50:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	799b      	ldrb	r3, [r3, #6]
 8004e56:	2b01      	cmp	r3, #1
 8004e58:	d102      	bne.n	8004e60 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004e5a:	687a      	ldr	r2, [r7, #4]
 8004e5c:	697b      	ldr	r3, [r7, #20]
 8004e5e:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	6818      	ldr	r0, [r3, #0]
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	799b      	ldrb	r3, [r3, #6]
 8004e68:	461a      	mov	r2, r3
 8004e6a:	6979      	ldr	r1, [r7, #20]
 8004e6c:	f002 f9a4 	bl	80071b8 <USB_EPStartXfer>

  return HAL_OK;
 8004e70:	2300      	movs	r3, #0
}
 8004e72:	4618      	mov	r0, r3
 8004e74:	3718      	adds	r7, #24
 8004e76:	46bd      	mov	sp, r7
 8004e78:	bd80      	pop	{r7, pc}

08004e7a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004e7a:	b580      	push	{r7, lr}
 8004e7c:	b084      	sub	sp, #16
 8004e7e:	af00      	add	r7, sp, #0
 8004e80:	6078      	str	r0, [r7, #4]
 8004e82:	460b      	mov	r3, r1
 8004e84:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004e86:	78fb      	ldrb	r3, [r7, #3]
 8004e88:	f003 030f 	and.w	r3, r3, #15
 8004e8c:	687a      	ldr	r2, [r7, #4]
 8004e8e:	7912      	ldrb	r2, [r2, #4]
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d901      	bls.n	8004e98 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004e94:	2301      	movs	r3, #1
 8004e96:	e04f      	b.n	8004f38 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004e98:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	da0f      	bge.n	8004ec0 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004ea0:	78fb      	ldrb	r3, [r7, #3]
 8004ea2:	f003 020f 	and.w	r2, r3, #15
 8004ea6:	4613      	mov	r3, r2
 8004ea8:	00db      	lsls	r3, r3, #3
 8004eaa:	4413      	add	r3, r2
 8004eac:	009b      	lsls	r3, r3, #2
 8004eae:	3310      	adds	r3, #16
 8004eb0:	687a      	ldr	r2, [r7, #4]
 8004eb2:	4413      	add	r3, r2
 8004eb4:	3304      	adds	r3, #4
 8004eb6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	2201      	movs	r2, #1
 8004ebc:	705a      	strb	r2, [r3, #1]
 8004ebe:	e00d      	b.n	8004edc <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004ec0:	78fa      	ldrb	r2, [r7, #3]
 8004ec2:	4613      	mov	r3, r2
 8004ec4:	00db      	lsls	r3, r3, #3
 8004ec6:	4413      	add	r3, r2
 8004ec8:	009b      	lsls	r3, r3, #2
 8004eca:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004ece:	687a      	ldr	r2, [r7, #4]
 8004ed0:	4413      	add	r3, r2
 8004ed2:	3304      	adds	r3, #4
 8004ed4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	2200      	movs	r2, #0
 8004eda:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	2201      	movs	r2, #1
 8004ee0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004ee2:	78fb      	ldrb	r3, [r7, #3]
 8004ee4:	f003 030f 	and.w	r3, r3, #15
 8004ee8:	b2da      	uxtb	r2, r3
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004ef4:	2b01      	cmp	r3, #1
 8004ef6:	d101      	bne.n	8004efc <HAL_PCD_EP_SetStall+0x82>
 8004ef8:	2302      	movs	r3, #2
 8004efa:	e01d      	b.n	8004f38 <HAL_PCD_EP_SetStall+0xbe>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2201      	movs	r2, #1
 8004f00:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	68f9      	ldr	r1, [r7, #12]
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	f002 fd32 	bl	8007974 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004f10:	78fb      	ldrb	r3, [r7, #3]
 8004f12:	f003 030f 	and.w	r3, r3, #15
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d109      	bne.n	8004f2e <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6818      	ldr	r0, [r3, #0]
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	7999      	ldrb	r1, [r3, #6]
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004f28:	461a      	mov	r2, r3
 8004f2a:	f002 ff23 	bl	8007d74 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2200      	movs	r2, #0
 8004f32:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004f36:	2300      	movs	r3, #0
}
 8004f38:	4618      	mov	r0, r3
 8004f3a:	3710      	adds	r7, #16
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	bd80      	pop	{r7, pc}

08004f40 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b084      	sub	sp, #16
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
 8004f48:	460b      	mov	r3, r1
 8004f4a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004f4c:	78fb      	ldrb	r3, [r7, #3]
 8004f4e:	f003 030f 	and.w	r3, r3, #15
 8004f52:	687a      	ldr	r2, [r7, #4]
 8004f54:	7912      	ldrb	r2, [r2, #4]
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d901      	bls.n	8004f5e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	e042      	b.n	8004fe4 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004f5e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	da0f      	bge.n	8004f86 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004f66:	78fb      	ldrb	r3, [r7, #3]
 8004f68:	f003 020f 	and.w	r2, r3, #15
 8004f6c:	4613      	mov	r3, r2
 8004f6e:	00db      	lsls	r3, r3, #3
 8004f70:	4413      	add	r3, r2
 8004f72:	009b      	lsls	r3, r3, #2
 8004f74:	3310      	adds	r3, #16
 8004f76:	687a      	ldr	r2, [r7, #4]
 8004f78:	4413      	add	r3, r2
 8004f7a:	3304      	adds	r3, #4
 8004f7c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	2201      	movs	r2, #1
 8004f82:	705a      	strb	r2, [r3, #1]
 8004f84:	e00f      	b.n	8004fa6 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004f86:	78fb      	ldrb	r3, [r7, #3]
 8004f88:	f003 020f 	and.w	r2, r3, #15
 8004f8c:	4613      	mov	r3, r2
 8004f8e:	00db      	lsls	r3, r3, #3
 8004f90:	4413      	add	r3, r2
 8004f92:	009b      	lsls	r3, r3, #2
 8004f94:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004f98:	687a      	ldr	r2, [r7, #4]
 8004f9a:	4413      	add	r3, r2
 8004f9c:	3304      	adds	r3, #4
 8004f9e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	2200      	movs	r2, #0
 8004faa:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004fac:	78fb      	ldrb	r3, [r7, #3]
 8004fae:	f003 030f 	and.w	r3, r3, #15
 8004fb2:	b2da      	uxtb	r2, r3
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004fbe:	2b01      	cmp	r3, #1
 8004fc0:	d101      	bne.n	8004fc6 <HAL_PCD_EP_ClrStall+0x86>
 8004fc2:	2302      	movs	r3, #2
 8004fc4:	e00e      	b.n	8004fe4 <HAL_PCD_EP_ClrStall+0xa4>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2201      	movs	r2, #1
 8004fca:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	68f9      	ldr	r1, [r7, #12]
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	f002 fd3b 	bl	8007a50 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2200      	movs	r2, #0
 8004fde:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004fe2:	2300      	movs	r3, #0
}
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	3710      	adds	r7, #16
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	bd80      	pop	{r7, pc}

08004fec <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b084      	sub	sp, #16
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
 8004ff4:	460b      	mov	r3, r1
 8004ff6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004ff8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	da0c      	bge.n	800501a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005000:	78fb      	ldrb	r3, [r7, #3]
 8005002:	f003 020f 	and.w	r2, r3, #15
 8005006:	4613      	mov	r3, r2
 8005008:	00db      	lsls	r3, r3, #3
 800500a:	4413      	add	r3, r2
 800500c:	009b      	lsls	r3, r3, #2
 800500e:	3310      	adds	r3, #16
 8005010:	687a      	ldr	r2, [r7, #4]
 8005012:	4413      	add	r3, r2
 8005014:	3304      	adds	r3, #4
 8005016:	60fb      	str	r3, [r7, #12]
 8005018:	e00c      	b.n	8005034 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800501a:	78fb      	ldrb	r3, [r7, #3]
 800501c:	f003 020f 	and.w	r2, r3, #15
 8005020:	4613      	mov	r3, r2
 8005022:	00db      	lsls	r3, r3, #3
 8005024:	4413      	add	r3, r2
 8005026:	009b      	lsls	r3, r3, #2
 8005028:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800502c:	687a      	ldr	r2, [r7, #4]
 800502e:	4413      	add	r3, r2
 8005030:	3304      	adds	r3, #4
 8005032:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	68f9      	ldr	r1, [r7, #12]
 800503a:	4618      	mov	r0, r3
 800503c:	f002 fb5a 	bl	80076f4 <USB_EPStopXfer>
 8005040:	4603      	mov	r3, r0
 8005042:	72fb      	strb	r3, [r7, #11]

  return ret;
 8005044:	7afb      	ldrb	r3, [r7, #11]
}
 8005046:	4618      	mov	r0, r3
 8005048:	3710      	adds	r7, #16
 800504a:	46bd      	mov	sp, r7
 800504c:	bd80      	pop	{r7, pc}

0800504e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800504e:	b580      	push	{r7, lr}
 8005050:	b08a      	sub	sp, #40	@ 0x28
 8005052:	af02      	add	r7, sp, #8
 8005054:	6078      	str	r0, [r7, #4]
 8005056:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800505e:	697b      	ldr	r3, [r7, #20]
 8005060:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005062:	683a      	ldr	r2, [r7, #0]
 8005064:	4613      	mov	r3, r2
 8005066:	00db      	lsls	r3, r3, #3
 8005068:	4413      	add	r3, r2
 800506a:	009b      	lsls	r3, r3, #2
 800506c:	3310      	adds	r3, #16
 800506e:	687a      	ldr	r2, [r7, #4]
 8005070:	4413      	add	r3, r2
 8005072:	3304      	adds	r3, #4
 8005074:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	695a      	ldr	r2, [r3, #20]
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	691b      	ldr	r3, [r3, #16]
 800507e:	429a      	cmp	r2, r3
 8005080:	d901      	bls.n	8005086 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8005082:	2301      	movs	r3, #1
 8005084:	e06b      	b.n	800515e <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	691a      	ldr	r2, [r3, #16]
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	695b      	ldr	r3, [r3, #20]
 800508e:	1ad3      	subs	r3, r2, r3
 8005090:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	689b      	ldr	r3, [r3, #8]
 8005096:	69fa      	ldr	r2, [r7, #28]
 8005098:	429a      	cmp	r2, r3
 800509a:	d902      	bls.n	80050a2 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	689b      	ldr	r3, [r3, #8]
 80050a0:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80050a2:	69fb      	ldr	r3, [r7, #28]
 80050a4:	3303      	adds	r3, #3
 80050a6:	089b      	lsrs	r3, r3, #2
 80050a8:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80050aa:	e02a      	b.n	8005102 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	691a      	ldr	r2, [r3, #16]
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	695b      	ldr	r3, [r3, #20]
 80050b4:	1ad3      	subs	r3, r2, r3
 80050b6:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	689b      	ldr	r3, [r3, #8]
 80050bc:	69fa      	ldr	r2, [r7, #28]
 80050be:	429a      	cmp	r2, r3
 80050c0:	d902      	bls.n	80050c8 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	689b      	ldr	r3, [r3, #8]
 80050c6:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80050c8:	69fb      	ldr	r3, [r7, #28]
 80050ca:	3303      	adds	r3, #3
 80050cc:	089b      	lsrs	r3, r3, #2
 80050ce:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	68d9      	ldr	r1, [r3, #12]
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	b2da      	uxtb	r2, r3
 80050d8:	69fb      	ldr	r3, [r7, #28]
 80050da:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80050e0:	9300      	str	r3, [sp, #0]
 80050e2:	4603      	mov	r3, r0
 80050e4:	6978      	ldr	r0, [r7, #20]
 80050e6:	f002 fbaf 	bl	8007848 <USB_WritePacket>

    ep->xfer_buff  += len;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	68da      	ldr	r2, [r3, #12]
 80050ee:	69fb      	ldr	r3, [r7, #28]
 80050f0:	441a      	add	r2, r3
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	695a      	ldr	r2, [r3, #20]
 80050fa:	69fb      	ldr	r3, [r7, #28]
 80050fc:	441a      	add	r2, r3
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	015a      	lsls	r2, r3, #5
 8005106:	693b      	ldr	r3, [r7, #16]
 8005108:	4413      	add	r3, r2
 800510a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800510e:	699b      	ldr	r3, [r3, #24]
 8005110:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005112:	69ba      	ldr	r2, [r7, #24]
 8005114:	429a      	cmp	r2, r3
 8005116:	d809      	bhi.n	800512c <PCD_WriteEmptyTxFifo+0xde>
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	695a      	ldr	r2, [r3, #20]
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005120:	429a      	cmp	r2, r3
 8005122:	d203      	bcs.n	800512c <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	691b      	ldr	r3, [r3, #16]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d1bf      	bne.n	80050ac <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	691a      	ldr	r2, [r3, #16]
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	695b      	ldr	r3, [r3, #20]
 8005134:	429a      	cmp	r2, r3
 8005136:	d811      	bhi.n	800515c <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	f003 030f 	and.w	r3, r3, #15
 800513e:	2201      	movs	r2, #1
 8005140:	fa02 f303 	lsl.w	r3, r2, r3
 8005144:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005146:	693b      	ldr	r3, [r7, #16]
 8005148:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800514c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800514e:	68bb      	ldr	r3, [r7, #8]
 8005150:	43db      	mvns	r3, r3
 8005152:	6939      	ldr	r1, [r7, #16]
 8005154:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005158:	4013      	ands	r3, r2
 800515a:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800515c:	2300      	movs	r3, #0
}
 800515e:	4618      	mov	r0, r3
 8005160:	3720      	adds	r7, #32
 8005162:	46bd      	mov	sp, r7
 8005164:	bd80      	pop	{r7, pc}
	...

08005168 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005168:	b580      	push	{r7, lr}
 800516a:	b088      	sub	sp, #32
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
 8005170:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005178:	69fb      	ldr	r3, [r7, #28]
 800517a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800517c:	69fb      	ldr	r3, [r7, #28]
 800517e:	333c      	adds	r3, #60	@ 0x3c
 8005180:	3304      	adds	r3, #4
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	015a      	lsls	r2, r3, #5
 800518a:	69bb      	ldr	r3, [r7, #24]
 800518c:	4413      	add	r3, r2
 800518e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005192:	689b      	ldr	r3, [r3, #8]
 8005194:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	799b      	ldrb	r3, [r3, #6]
 800519a:	2b01      	cmp	r3, #1
 800519c:	d17b      	bne.n	8005296 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800519e:	693b      	ldr	r3, [r7, #16]
 80051a0:	f003 0308 	and.w	r3, r3, #8
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d015      	beq.n	80051d4 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80051a8:	697b      	ldr	r3, [r7, #20]
 80051aa:	4a61      	ldr	r2, [pc, #388]	@ (8005330 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80051ac:	4293      	cmp	r3, r2
 80051ae:	f240 80b9 	bls.w	8005324 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80051b2:	693b      	ldr	r3, [r7, #16]
 80051b4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	f000 80b3 	beq.w	8005324 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	015a      	lsls	r2, r3, #5
 80051c2:	69bb      	ldr	r3, [r7, #24]
 80051c4:	4413      	add	r3, r2
 80051c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80051ca:	461a      	mov	r2, r3
 80051cc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80051d0:	6093      	str	r3, [r2, #8]
 80051d2:	e0a7      	b.n	8005324 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80051d4:	693b      	ldr	r3, [r7, #16]
 80051d6:	f003 0320 	and.w	r3, r3, #32
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d009      	beq.n	80051f2 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	015a      	lsls	r2, r3, #5
 80051e2:	69bb      	ldr	r3, [r7, #24]
 80051e4:	4413      	add	r3, r2
 80051e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80051ea:	461a      	mov	r2, r3
 80051ec:	2320      	movs	r3, #32
 80051ee:	6093      	str	r3, [r2, #8]
 80051f0:	e098      	b.n	8005324 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80051f2:	693b      	ldr	r3, [r7, #16]
 80051f4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	f040 8093 	bne.w	8005324 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80051fe:	697b      	ldr	r3, [r7, #20]
 8005200:	4a4b      	ldr	r2, [pc, #300]	@ (8005330 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d90f      	bls.n	8005226 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005206:	693b      	ldr	r3, [r7, #16]
 8005208:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800520c:	2b00      	cmp	r3, #0
 800520e:	d00a      	beq.n	8005226 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	015a      	lsls	r2, r3, #5
 8005214:	69bb      	ldr	r3, [r7, #24]
 8005216:	4413      	add	r3, r2
 8005218:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800521c:	461a      	mov	r2, r3
 800521e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005222:	6093      	str	r3, [r2, #8]
 8005224:	e07e      	b.n	8005324 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8005226:	683a      	ldr	r2, [r7, #0]
 8005228:	4613      	mov	r3, r2
 800522a:	00db      	lsls	r3, r3, #3
 800522c:	4413      	add	r3, r2
 800522e:	009b      	lsls	r3, r3, #2
 8005230:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005234:	687a      	ldr	r2, [r7, #4]
 8005236:	4413      	add	r3, r2
 8005238:	3304      	adds	r3, #4
 800523a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	6a1a      	ldr	r2, [r3, #32]
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	0159      	lsls	r1, r3, #5
 8005244:	69bb      	ldr	r3, [r7, #24]
 8005246:	440b      	add	r3, r1
 8005248:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800524c:	691b      	ldr	r3, [r3, #16]
 800524e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005252:	1ad2      	subs	r2, r2, r3
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d114      	bne.n	8005288 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	691b      	ldr	r3, [r3, #16]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d109      	bne.n	800527a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6818      	ldr	r0, [r3, #0]
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005270:	461a      	mov	r2, r3
 8005272:	2101      	movs	r1, #1
 8005274:	f002 fd7e 	bl	8007d74 <USB_EP0_OutStart>
 8005278:	e006      	b.n	8005288 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	68da      	ldr	r2, [r3, #12]
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	695b      	ldr	r3, [r3, #20]
 8005282:	441a      	add	r2, r3
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	b2db      	uxtb	r3, r3
 800528c:	4619      	mov	r1, r3
 800528e:	6878      	ldr	r0, [r7, #4]
 8005290:	f005 fc8a 	bl	800aba8 <HAL_PCD_DataOutStageCallback>
 8005294:	e046      	b.n	8005324 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8005296:	697b      	ldr	r3, [r7, #20]
 8005298:	4a26      	ldr	r2, [pc, #152]	@ (8005334 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d124      	bne.n	80052e8 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800529e:	693b      	ldr	r3, [r7, #16]
 80052a0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d00a      	beq.n	80052be <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	015a      	lsls	r2, r3, #5
 80052ac:	69bb      	ldr	r3, [r7, #24]
 80052ae:	4413      	add	r3, r2
 80052b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80052b4:	461a      	mov	r2, r3
 80052b6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80052ba:	6093      	str	r3, [r2, #8]
 80052bc:	e032      	b.n	8005324 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80052be:	693b      	ldr	r3, [r7, #16]
 80052c0:	f003 0320 	and.w	r3, r3, #32
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d008      	beq.n	80052da <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	015a      	lsls	r2, r3, #5
 80052cc:	69bb      	ldr	r3, [r7, #24]
 80052ce:	4413      	add	r3, r2
 80052d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80052d4:	461a      	mov	r2, r3
 80052d6:	2320      	movs	r3, #32
 80052d8:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	b2db      	uxtb	r3, r3
 80052de:	4619      	mov	r1, r3
 80052e0:	6878      	ldr	r0, [r7, #4]
 80052e2:	f005 fc61 	bl	800aba8 <HAL_PCD_DataOutStageCallback>
 80052e6:	e01d      	b.n	8005324 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d114      	bne.n	8005318 <PCD_EP_OutXfrComplete_int+0x1b0>
 80052ee:	6879      	ldr	r1, [r7, #4]
 80052f0:	683a      	ldr	r2, [r7, #0]
 80052f2:	4613      	mov	r3, r2
 80052f4:	00db      	lsls	r3, r3, #3
 80052f6:	4413      	add	r3, r2
 80052f8:	009b      	lsls	r3, r3, #2
 80052fa:	440b      	add	r3, r1
 80052fc:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d108      	bne.n	8005318 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6818      	ldr	r0, [r3, #0]
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005310:	461a      	mov	r2, r3
 8005312:	2100      	movs	r1, #0
 8005314:	f002 fd2e 	bl	8007d74 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	b2db      	uxtb	r3, r3
 800531c:	4619      	mov	r1, r3
 800531e:	6878      	ldr	r0, [r7, #4]
 8005320:	f005 fc42 	bl	800aba8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8005324:	2300      	movs	r3, #0
}
 8005326:	4618      	mov	r0, r3
 8005328:	3720      	adds	r7, #32
 800532a:	46bd      	mov	sp, r7
 800532c:	bd80      	pop	{r7, pc}
 800532e:	bf00      	nop
 8005330:	4f54300a 	.word	0x4f54300a
 8005334:	4f54310a 	.word	0x4f54310a

08005338 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005338:	b580      	push	{r7, lr}
 800533a:	b086      	sub	sp, #24
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
 8005340:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005348:	697b      	ldr	r3, [r7, #20]
 800534a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800534c:	697b      	ldr	r3, [r7, #20]
 800534e:	333c      	adds	r3, #60	@ 0x3c
 8005350:	3304      	adds	r3, #4
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	015a      	lsls	r2, r3, #5
 800535a:	693b      	ldr	r3, [r7, #16]
 800535c:	4413      	add	r3, r2
 800535e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005362:	689b      	ldr	r3, [r3, #8]
 8005364:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	4a15      	ldr	r2, [pc, #84]	@ (80053c0 <PCD_EP_OutSetupPacket_int+0x88>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d90e      	bls.n	800538c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800536e:	68bb      	ldr	r3, [r7, #8]
 8005370:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005374:	2b00      	cmp	r3, #0
 8005376:	d009      	beq.n	800538c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	015a      	lsls	r2, r3, #5
 800537c:	693b      	ldr	r3, [r7, #16]
 800537e:	4413      	add	r3, r2
 8005380:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005384:	461a      	mov	r2, r3
 8005386:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800538a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800538c:	6878      	ldr	r0, [r7, #4]
 800538e:	f005 fbf9 	bl	800ab84 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	4a0a      	ldr	r2, [pc, #40]	@ (80053c0 <PCD_EP_OutSetupPacket_int+0x88>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d90c      	bls.n	80053b4 <PCD_EP_OutSetupPacket_int+0x7c>
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	799b      	ldrb	r3, [r3, #6]
 800539e:	2b01      	cmp	r3, #1
 80053a0:	d108      	bne.n	80053b4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6818      	ldr	r0, [r3, #0]
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80053ac:	461a      	mov	r2, r3
 80053ae:	2101      	movs	r1, #1
 80053b0:	f002 fce0 	bl	8007d74 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80053b4:	2300      	movs	r3, #0
}
 80053b6:	4618      	mov	r0, r3
 80053b8:	3718      	adds	r7, #24
 80053ba:	46bd      	mov	sp, r7
 80053bc:	bd80      	pop	{r7, pc}
 80053be:	bf00      	nop
 80053c0:	4f54300a 	.word	0x4f54300a

080053c4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80053c4:	b480      	push	{r7}
 80053c6:	b085      	sub	sp, #20
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
 80053cc:	460b      	mov	r3, r1
 80053ce:	70fb      	strb	r3, [r7, #3]
 80053d0:	4613      	mov	r3, r2
 80053d2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053da:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80053dc:	78fb      	ldrb	r3, [r7, #3]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d107      	bne.n	80053f2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80053e2:	883b      	ldrh	r3, [r7, #0]
 80053e4:	0419      	lsls	r1, r3, #16
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	68ba      	ldr	r2, [r7, #8]
 80053ec:	430a      	orrs	r2, r1
 80053ee:	629a      	str	r2, [r3, #40]	@ 0x28
 80053f0:	e028      	b.n	8005444 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053f8:	0c1b      	lsrs	r3, r3, #16
 80053fa:	68ba      	ldr	r2, [r7, #8]
 80053fc:	4413      	add	r3, r2
 80053fe:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005400:	2300      	movs	r3, #0
 8005402:	73fb      	strb	r3, [r7, #15]
 8005404:	e00d      	b.n	8005422 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681a      	ldr	r2, [r3, #0]
 800540a:	7bfb      	ldrb	r3, [r7, #15]
 800540c:	3340      	adds	r3, #64	@ 0x40
 800540e:	009b      	lsls	r3, r3, #2
 8005410:	4413      	add	r3, r2
 8005412:	685b      	ldr	r3, [r3, #4]
 8005414:	0c1b      	lsrs	r3, r3, #16
 8005416:	68ba      	ldr	r2, [r7, #8]
 8005418:	4413      	add	r3, r2
 800541a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800541c:	7bfb      	ldrb	r3, [r7, #15]
 800541e:	3301      	adds	r3, #1
 8005420:	73fb      	strb	r3, [r7, #15]
 8005422:	7bfa      	ldrb	r2, [r7, #15]
 8005424:	78fb      	ldrb	r3, [r7, #3]
 8005426:	3b01      	subs	r3, #1
 8005428:	429a      	cmp	r2, r3
 800542a:	d3ec      	bcc.n	8005406 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800542c:	883b      	ldrh	r3, [r7, #0]
 800542e:	0418      	lsls	r0, r3, #16
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6819      	ldr	r1, [r3, #0]
 8005434:	78fb      	ldrb	r3, [r7, #3]
 8005436:	3b01      	subs	r3, #1
 8005438:	68ba      	ldr	r2, [r7, #8]
 800543a:	4302      	orrs	r2, r0
 800543c:	3340      	adds	r3, #64	@ 0x40
 800543e:	009b      	lsls	r3, r3, #2
 8005440:	440b      	add	r3, r1
 8005442:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005444:	2300      	movs	r3, #0
}
 8005446:	4618      	mov	r0, r3
 8005448:	3714      	adds	r7, #20
 800544a:	46bd      	mov	sp, r7
 800544c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005450:	4770      	bx	lr

08005452 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8005452:	b480      	push	{r7}
 8005454:	b083      	sub	sp, #12
 8005456:	af00      	add	r7, sp, #0
 8005458:	6078      	str	r0, [r7, #4]
 800545a:	460b      	mov	r3, r1
 800545c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	887a      	ldrh	r2, [r7, #2]
 8005464:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8005466:	2300      	movs	r3, #0
}
 8005468:	4618      	mov	r0, r3
 800546a:	370c      	adds	r7, #12
 800546c:	46bd      	mov	sp, r7
 800546e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005472:	4770      	bx	lr

08005474 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8005474:	b480      	push	{r7}
 8005476:	b083      	sub	sp, #12
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
 800547c:	460b      	mov	r3, r1
 800547e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8005480:	bf00      	nop
 8005482:	370c      	adds	r7, #12
 8005484:	46bd      	mov	sp, r7
 8005486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548a:	4770      	bx	lr

0800548c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b086      	sub	sp, #24
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d101      	bne.n	800549e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800549a:	2301      	movs	r3, #1
 800549c:	e267      	b.n	800596e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f003 0301 	and.w	r3, r3, #1
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d075      	beq.n	8005596 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80054aa:	4b88      	ldr	r3, [pc, #544]	@ (80056cc <HAL_RCC_OscConfig+0x240>)
 80054ac:	689b      	ldr	r3, [r3, #8]
 80054ae:	f003 030c 	and.w	r3, r3, #12
 80054b2:	2b04      	cmp	r3, #4
 80054b4:	d00c      	beq.n	80054d0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80054b6:	4b85      	ldr	r3, [pc, #532]	@ (80056cc <HAL_RCC_OscConfig+0x240>)
 80054b8:	689b      	ldr	r3, [r3, #8]
 80054ba:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80054be:	2b08      	cmp	r3, #8
 80054c0:	d112      	bne.n	80054e8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80054c2:	4b82      	ldr	r3, [pc, #520]	@ (80056cc <HAL_RCC_OscConfig+0x240>)
 80054c4:	685b      	ldr	r3, [r3, #4]
 80054c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80054ca:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80054ce:	d10b      	bne.n	80054e8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80054d0:	4b7e      	ldr	r3, [pc, #504]	@ (80056cc <HAL_RCC_OscConfig+0x240>)
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d05b      	beq.n	8005594 <HAL_RCC_OscConfig+0x108>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	685b      	ldr	r3, [r3, #4]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d157      	bne.n	8005594 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80054e4:	2301      	movs	r3, #1
 80054e6:	e242      	b.n	800596e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	685b      	ldr	r3, [r3, #4]
 80054ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80054f0:	d106      	bne.n	8005500 <HAL_RCC_OscConfig+0x74>
 80054f2:	4b76      	ldr	r3, [pc, #472]	@ (80056cc <HAL_RCC_OscConfig+0x240>)
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	4a75      	ldr	r2, [pc, #468]	@ (80056cc <HAL_RCC_OscConfig+0x240>)
 80054f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80054fc:	6013      	str	r3, [r2, #0]
 80054fe:	e01d      	b.n	800553c <HAL_RCC_OscConfig+0xb0>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	685b      	ldr	r3, [r3, #4]
 8005504:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005508:	d10c      	bne.n	8005524 <HAL_RCC_OscConfig+0x98>
 800550a:	4b70      	ldr	r3, [pc, #448]	@ (80056cc <HAL_RCC_OscConfig+0x240>)
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	4a6f      	ldr	r2, [pc, #444]	@ (80056cc <HAL_RCC_OscConfig+0x240>)
 8005510:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005514:	6013      	str	r3, [r2, #0]
 8005516:	4b6d      	ldr	r3, [pc, #436]	@ (80056cc <HAL_RCC_OscConfig+0x240>)
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	4a6c      	ldr	r2, [pc, #432]	@ (80056cc <HAL_RCC_OscConfig+0x240>)
 800551c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005520:	6013      	str	r3, [r2, #0]
 8005522:	e00b      	b.n	800553c <HAL_RCC_OscConfig+0xb0>
 8005524:	4b69      	ldr	r3, [pc, #420]	@ (80056cc <HAL_RCC_OscConfig+0x240>)
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4a68      	ldr	r2, [pc, #416]	@ (80056cc <HAL_RCC_OscConfig+0x240>)
 800552a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800552e:	6013      	str	r3, [r2, #0]
 8005530:	4b66      	ldr	r3, [pc, #408]	@ (80056cc <HAL_RCC_OscConfig+0x240>)
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	4a65      	ldr	r2, [pc, #404]	@ (80056cc <HAL_RCC_OscConfig+0x240>)
 8005536:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800553a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	685b      	ldr	r3, [r3, #4]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d013      	beq.n	800556c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005544:	f7fd fa64 	bl	8002a10 <HAL_GetTick>
 8005548:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800554a:	e008      	b.n	800555e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800554c:	f7fd fa60 	bl	8002a10 <HAL_GetTick>
 8005550:	4602      	mov	r2, r0
 8005552:	693b      	ldr	r3, [r7, #16]
 8005554:	1ad3      	subs	r3, r2, r3
 8005556:	2b64      	cmp	r3, #100	@ 0x64
 8005558:	d901      	bls.n	800555e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800555a:	2303      	movs	r3, #3
 800555c:	e207      	b.n	800596e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800555e:	4b5b      	ldr	r3, [pc, #364]	@ (80056cc <HAL_RCC_OscConfig+0x240>)
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005566:	2b00      	cmp	r3, #0
 8005568:	d0f0      	beq.n	800554c <HAL_RCC_OscConfig+0xc0>
 800556a:	e014      	b.n	8005596 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800556c:	f7fd fa50 	bl	8002a10 <HAL_GetTick>
 8005570:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005572:	e008      	b.n	8005586 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005574:	f7fd fa4c 	bl	8002a10 <HAL_GetTick>
 8005578:	4602      	mov	r2, r0
 800557a:	693b      	ldr	r3, [r7, #16]
 800557c:	1ad3      	subs	r3, r2, r3
 800557e:	2b64      	cmp	r3, #100	@ 0x64
 8005580:	d901      	bls.n	8005586 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005582:	2303      	movs	r3, #3
 8005584:	e1f3      	b.n	800596e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005586:	4b51      	ldr	r3, [pc, #324]	@ (80056cc <HAL_RCC_OscConfig+0x240>)
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800558e:	2b00      	cmp	r3, #0
 8005590:	d1f0      	bne.n	8005574 <HAL_RCC_OscConfig+0xe8>
 8005592:	e000      	b.n	8005596 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005594:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f003 0302 	and.w	r3, r3, #2
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d063      	beq.n	800566a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80055a2:	4b4a      	ldr	r3, [pc, #296]	@ (80056cc <HAL_RCC_OscConfig+0x240>)
 80055a4:	689b      	ldr	r3, [r3, #8]
 80055a6:	f003 030c 	and.w	r3, r3, #12
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d00b      	beq.n	80055c6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80055ae:	4b47      	ldr	r3, [pc, #284]	@ (80056cc <HAL_RCC_OscConfig+0x240>)
 80055b0:	689b      	ldr	r3, [r3, #8]
 80055b2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80055b6:	2b08      	cmp	r3, #8
 80055b8:	d11c      	bne.n	80055f4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80055ba:	4b44      	ldr	r3, [pc, #272]	@ (80056cc <HAL_RCC_OscConfig+0x240>)
 80055bc:	685b      	ldr	r3, [r3, #4]
 80055be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d116      	bne.n	80055f4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80055c6:	4b41      	ldr	r3, [pc, #260]	@ (80056cc <HAL_RCC_OscConfig+0x240>)
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f003 0302 	and.w	r3, r3, #2
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d005      	beq.n	80055de <HAL_RCC_OscConfig+0x152>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	68db      	ldr	r3, [r3, #12]
 80055d6:	2b01      	cmp	r3, #1
 80055d8:	d001      	beq.n	80055de <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80055da:	2301      	movs	r3, #1
 80055dc:	e1c7      	b.n	800596e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80055de:	4b3b      	ldr	r3, [pc, #236]	@ (80056cc <HAL_RCC_OscConfig+0x240>)
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	691b      	ldr	r3, [r3, #16]
 80055ea:	00db      	lsls	r3, r3, #3
 80055ec:	4937      	ldr	r1, [pc, #220]	@ (80056cc <HAL_RCC_OscConfig+0x240>)
 80055ee:	4313      	orrs	r3, r2
 80055f0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80055f2:	e03a      	b.n	800566a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	68db      	ldr	r3, [r3, #12]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d020      	beq.n	800563e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80055fc:	4b34      	ldr	r3, [pc, #208]	@ (80056d0 <HAL_RCC_OscConfig+0x244>)
 80055fe:	2201      	movs	r2, #1
 8005600:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005602:	f7fd fa05 	bl	8002a10 <HAL_GetTick>
 8005606:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005608:	e008      	b.n	800561c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800560a:	f7fd fa01 	bl	8002a10 <HAL_GetTick>
 800560e:	4602      	mov	r2, r0
 8005610:	693b      	ldr	r3, [r7, #16]
 8005612:	1ad3      	subs	r3, r2, r3
 8005614:	2b02      	cmp	r3, #2
 8005616:	d901      	bls.n	800561c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005618:	2303      	movs	r3, #3
 800561a:	e1a8      	b.n	800596e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800561c:	4b2b      	ldr	r3, [pc, #172]	@ (80056cc <HAL_RCC_OscConfig+0x240>)
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f003 0302 	and.w	r3, r3, #2
 8005624:	2b00      	cmp	r3, #0
 8005626:	d0f0      	beq.n	800560a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005628:	4b28      	ldr	r3, [pc, #160]	@ (80056cc <HAL_RCC_OscConfig+0x240>)
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	691b      	ldr	r3, [r3, #16]
 8005634:	00db      	lsls	r3, r3, #3
 8005636:	4925      	ldr	r1, [pc, #148]	@ (80056cc <HAL_RCC_OscConfig+0x240>)
 8005638:	4313      	orrs	r3, r2
 800563a:	600b      	str	r3, [r1, #0]
 800563c:	e015      	b.n	800566a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800563e:	4b24      	ldr	r3, [pc, #144]	@ (80056d0 <HAL_RCC_OscConfig+0x244>)
 8005640:	2200      	movs	r2, #0
 8005642:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005644:	f7fd f9e4 	bl	8002a10 <HAL_GetTick>
 8005648:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800564a:	e008      	b.n	800565e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800564c:	f7fd f9e0 	bl	8002a10 <HAL_GetTick>
 8005650:	4602      	mov	r2, r0
 8005652:	693b      	ldr	r3, [r7, #16]
 8005654:	1ad3      	subs	r3, r2, r3
 8005656:	2b02      	cmp	r3, #2
 8005658:	d901      	bls.n	800565e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800565a:	2303      	movs	r3, #3
 800565c:	e187      	b.n	800596e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800565e:	4b1b      	ldr	r3, [pc, #108]	@ (80056cc <HAL_RCC_OscConfig+0x240>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f003 0302 	and.w	r3, r3, #2
 8005666:	2b00      	cmp	r3, #0
 8005668:	d1f0      	bne.n	800564c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f003 0308 	and.w	r3, r3, #8
 8005672:	2b00      	cmp	r3, #0
 8005674:	d036      	beq.n	80056e4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	695b      	ldr	r3, [r3, #20]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d016      	beq.n	80056ac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800567e:	4b15      	ldr	r3, [pc, #84]	@ (80056d4 <HAL_RCC_OscConfig+0x248>)
 8005680:	2201      	movs	r2, #1
 8005682:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005684:	f7fd f9c4 	bl	8002a10 <HAL_GetTick>
 8005688:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800568a:	e008      	b.n	800569e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800568c:	f7fd f9c0 	bl	8002a10 <HAL_GetTick>
 8005690:	4602      	mov	r2, r0
 8005692:	693b      	ldr	r3, [r7, #16]
 8005694:	1ad3      	subs	r3, r2, r3
 8005696:	2b02      	cmp	r3, #2
 8005698:	d901      	bls.n	800569e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800569a:	2303      	movs	r3, #3
 800569c:	e167      	b.n	800596e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800569e:	4b0b      	ldr	r3, [pc, #44]	@ (80056cc <HAL_RCC_OscConfig+0x240>)
 80056a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80056a2:	f003 0302 	and.w	r3, r3, #2
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d0f0      	beq.n	800568c <HAL_RCC_OscConfig+0x200>
 80056aa:	e01b      	b.n	80056e4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80056ac:	4b09      	ldr	r3, [pc, #36]	@ (80056d4 <HAL_RCC_OscConfig+0x248>)
 80056ae:	2200      	movs	r2, #0
 80056b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80056b2:	f7fd f9ad 	bl	8002a10 <HAL_GetTick>
 80056b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80056b8:	e00e      	b.n	80056d8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80056ba:	f7fd f9a9 	bl	8002a10 <HAL_GetTick>
 80056be:	4602      	mov	r2, r0
 80056c0:	693b      	ldr	r3, [r7, #16]
 80056c2:	1ad3      	subs	r3, r2, r3
 80056c4:	2b02      	cmp	r3, #2
 80056c6:	d907      	bls.n	80056d8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80056c8:	2303      	movs	r3, #3
 80056ca:	e150      	b.n	800596e <HAL_RCC_OscConfig+0x4e2>
 80056cc:	40023800 	.word	0x40023800
 80056d0:	42470000 	.word	0x42470000
 80056d4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80056d8:	4b88      	ldr	r3, [pc, #544]	@ (80058fc <HAL_RCC_OscConfig+0x470>)
 80056da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80056dc:	f003 0302 	and.w	r3, r3, #2
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d1ea      	bne.n	80056ba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f003 0304 	and.w	r3, r3, #4
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	f000 8097 	beq.w	8005820 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80056f2:	2300      	movs	r3, #0
 80056f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80056f6:	4b81      	ldr	r3, [pc, #516]	@ (80058fc <HAL_RCC_OscConfig+0x470>)
 80056f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d10f      	bne.n	8005722 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005702:	2300      	movs	r3, #0
 8005704:	60bb      	str	r3, [r7, #8]
 8005706:	4b7d      	ldr	r3, [pc, #500]	@ (80058fc <HAL_RCC_OscConfig+0x470>)
 8005708:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800570a:	4a7c      	ldr	r2, [pc, #496]	@ (80058fc <HAL_RCC_OscConfig+0x470>)
 800570c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005710:	6413      	str	r3, [r2, #64]	@ 0x40
 8005712:	4b7a      	ldr	r3, [pc, #488]	@ (80058fc <HAL_RCC_OscConfig+0x470>)
 8005714:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005716:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800571a:	60bb      	str	r3, [r7, #8]
 800571c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800571e:	2301      	movs	r3, #1
 8005720:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005722:	4b77      	ldr	r3, [pc, #476]	@ (8005900 <HAL_RCC_OscConfig+0x474>)
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800572a:	2b00      	cmp	r3, #0
 800572c:	d118      	bne.n	8005760 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800572e:	4b74      	ldr	r3, [pc, #464]	@ (8005900 <HAL_RCC_OscConfig+0x474>)
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	4a73      	ldr	r2, [pc, #460]	@ (8005900 <HAL_RCC_OscConfig+0x474>)
 8005734:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005738:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800573a:	f7fd f969 	bl	8002a10 <HAL_GetTick>
 800573e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005740:	e008      	b.n	8005754 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005742:	f7fd f965 	bl	8002a10 <HAL_GetTick>
 8005746:	4602      	mov	r2, r0
 8005748:	693b      	ldr	r3, [r7, #16]
 800574a:	1ad3      	subs	r3, r2, r3
 800574c:	2b02      	cmp	r3, #2
 800574e:	d901      	bls.n	8005754 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005750:	2303      	movs	r3, #3
 8005752:	e10c      	b.n	800596e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005754:	4b6a      	ldr	r3, [pc, #424]	@ (8005900 <HAL_RCC_OscConfig+0x474>)
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800575c:	2b00      	cmp	r3, #0
 800575e:	d0f0      	beq.n	8005742 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	689b      	ldr	r3, [r3, #8]
 8005764:	2b01      	cmp	r3, #1
 8005766:	d106      	bne.n	8005776 <HAL_RCC_OscConfig+0x2ea>
 8005768:	4b64      	ldr	r3, [pc, #400]	@ (80058fc <HAL_RCC_OscConfig+0x470>)
 800576a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800576c:	4a63      	ldr	r2, [pc, #396]	@ (80058fc <HAL_RCC_OscConfig+0x470>)
 800576e:	f043 0301 	orr.w	r3, r3, #1
 8005772:	6713      	str	r3, [r2, #112]	@ 0x70
 8005774:	e01c      	b.n	80057b0 <HAL_RCC_OscConfig+0x324>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	689b      	ldr	r3, [r3, #8]
 800577a:	2b05      	cmp	r3, #5
 800577c:	d10c      	bne.n	8005798 <HAL_RCC_OscConfig+0x30c>
 800577e:	4b5f      	ldr	r3, [pc, #380]	@ (80058fc <HAL_RCC_OscConfig+0x470>)
 8005780:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005782:	4a5e      	ldr	r2, [pc, #376]	@ (80058fc <HAL_RCC_OscConfig+0x470>)
 8005784:	f043 0304 	orr.w	r3, r3, #4
 8005788:	6713      	str	r3, [r2, #112]	@ 0x70
 800578a:	4b5c      	ldr	r3, [pc, #368]	@ (80058fc <HAL_RCC_OscConfig+0x470>)
 800578c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800578e:	4a5b      	ldr	r2, [pc, #364]	@ (80058fc <HAL_RCC_OscConfig+0x470>)
 8005790:	f043 0301 	orr.w	r3, r3, #1
 8005794:	6713      	str	r3, [r2, #112]	@ 0x70
 8005796:	e00b      	b.n	80057b0 <HAL_RCC_OscConfig+0x324>
 8005798:	4b58      	ldr	r3, [pc, #352]	@ (80058fc <HAL_RCC_OscConfig+0x470>)
 800579a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800579c:	4a57      	ldr	r2, [pc, #348]	@ (80058fc <HAL_RCC_OscConfig+0x470>)
 800579e:	f023 0301 	bic.w	r3, r3, #1
 80057a2:	6713      	str	r3, [r2, #112]	@ 0x70
 80057a4:	4b55      	ldr	r3, [pc, #340]	@ (80058fc <HAL_RCC_OscConfig+0x470>)
 80057a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057a8:	4a54      	ldr	r2, [pc, #336]	@ (80058fc <HAL_RCC_OscConfig+0x470>)
 80057aa:	f023 0304 	bic.w	r3, r3, #4
 80057ae:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	689b      	ldr	r3, [r3, #8]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d015      	beq.n	80057e4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057b8:	f7fd f92a 	bl	8002a10 <HAL_GetTick>
 80057bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80057be:	e00a      	b.n	80057d6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80057c0:	f7fd f926 	bl	8002a10 <HAL_GetTick>
 80057c4:	4602      	mov	r2, r0
 80057c6:	693b      	ldr	r3, [r7, #16]
 80057c8:	1ad3      	subs	r3, r2, r3
 80057ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d901      	bls.n	80057d6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80057d2:	2303      	movs	r3, #3
 80057d4:	e0cb      	b.n	800596e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80057d6:	4b49      	ldr	r3, [pc, #292]	@ (80058fc <HAL_RCC_OscConfig+0x470>)
 80057d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057da:	f003 0302 	and.w	r3, r3, #2
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d0ee      	beq.n	80057c0 <HAL_RCC_OscConfig+0x334>
 80057e2:	e014      	b.n	800580e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80057e4:	f7fd f914 	bl	8002a10 <HAL_GetTick>
 80057e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80057ea:	e00a      	b.n	8005802 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80057ec:	f7fd f910 	bl	8002a10 <HAL_GetTick>
 80057f0:	4602      	mov	r2, r0
 80057f2:	693b      	ldr	r3, [r7, #16]
 80057f4:	1ad3      	subs	r3, r2, r3
 80057f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d901      	bls.n	8005802 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80057fe:	2303      	movs	r3, #3
 8005800:	e0b5      	b.n	800596e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005802:	4b3e      	ldr	r3, [pc, #248]	@ (80058fc <HAL_RCC_OscConfig+0x470>)
 8005804:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005806:	f003 0302 	and.w	r3, r3, #2
 800580a:	2b00      	cmp	r3, #0
 800580c:	d1ee      	bne.n	80057ec <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800580e:	7dfb      	ldrb	r3, [r7, #23]
 8005810:	2b01      	cmp	r3, #1
 8005812:	d105      	bne.n	8005820 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005814:	4b39      	ldr	r3, [pc, #228]	@ (80058fc <HAL_RCC_OscConfig+0x470>)
 8005816:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005818:	4a38      	ldr	r2, [pc, #224]	@ (80058fc <HAL_RCC_OscConfig+0x470>)
 800581a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800581e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	699b      	ldr	r3, [r3, #24]
 8005824:	2b00      	cmp	r3, #0
 8005826:	f000 80a1 	beq.w	800596c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800582a:	4b34      	ldr	r3, [pc, #208]	@ (80058fc <HAL_RCC_OscConfig+0x470>)
 800582c:	689b      	ldr	r3, [r3, #8]
 800582e:	f003 030c 	and.w	r3, r3, #12
 8005832:	2b08      	cmp	r3, #8
 8005834:	d05c      	beq.n	80058f0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	699b      	ldr	r3, [r3, #24]
 800583a:	2b02      	cmp	r3, #2
 800583c:	d141      	bne.n	80058c2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800583e:	4b31      	ldr	r3, [pc, #196]	@ (8005904 <HAL_RCC_OscConfig+0x478>)
 8005840:	2200      	movs	r2, #0
 8005842:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005844:	f7fd f8e4 	bl	8002a10 <HAL_GetTick>
 8005848:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800584a:	e008      	b.n	800585e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800584c:	f7fd f8e0 	bl	8002a10 <HAL_GetTick>
 8005850:	4602      	mov	r2, r0
 8005852:	693b      	ldr	r3, [r7, #16]
 8005854:	1ad3      	subs	r3, r2, r3
 8005856:	2b02      	cmp	r3, #2
 8005858:	d901      	bls.n	800585e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800585a:	2303      	movs	r3, #3
 800585c:	e087      	b.n	800596e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800585e:	4b27      	ldr	r3, [pc, #156]	@ (80058fc <HAL_RCC_OscConfig+0x470>)
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005866:	2b00      	cmp	r3, #0
 8005868:	d1f0      	bne.n	800584c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	69da      	ldr	r2, [r3, #28]
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6a1b      	ldr	r3, [r3, #32]
 8005872:	431a      	orrs	r2, r3
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005878:	019b      	lsls	r3, r3, #6
 800587a:	431a      	orrs	r2, r3
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005880:	085b      	lsrs	r3, r3, #1
 8005882:	3b01      	subs	r3, #1
 8005884:	041b      	lsls	r3, r3, #16
 8005886:	431a      	orrs	r2, r3
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800588c:	061b      	lsls	r3, r3, #24
 800588e:	491b      	ldr	r1, [pc, #108]	@ (80058fc <HAL_RCC_OscConfig+0x470>)
 8005890:	4313      	orrs	r3, r2
 8005892:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005894:	4b1b      	ldr	r3, [pc, #108]	@ (8005904 <HAL_RCC_OscConfig+0x478>)
 8005896:	2201      	movs	r2, #1
 8005898:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800589a:	f7fd f8b9 	bl	8002a10 <HAL_GetTick>
 800589e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80058a0:	e008      	b.n	80058b4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80058a2:	f7fd f8b5 	bl	8002a10 <HAL_GetTick>
 80058a6:	4602      	mov	r2, r0
 80058a8:	693b      	ldr	r3, [r7, #16]
 80058aa:	1ad3      	subs	r3, r2, r3
 80058ac:	2b02      	cmp	r3, #2
 80058ae:	d901      	bls.n	80058b4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80058b0:	2303      	movs	r3, #3
 80058b2:	e05c      	b.n	800596e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80058b4:	4b11      	ldr	r3, [pc, #68]	@ (80058fc <HAL_RCC_OscConfig+0x470>)
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d0f0      	beq.n	80058a2 <HAL_RCC_OscConfig+0x416>
 80058c0:	e054      	b.n	800596c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80058c2:	4b10      	ldr	r3, [pc, #64]	@ (8005904 <HAL_RCC_OscConfig+0x478>)
 80058c4:	2200      	movs	r2, #0
 80058c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058c8:	f7fd f8a2 	bl	8002a10 <HAL_GetTick>
 80058cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80058ce:	e008      	b.n	80058e2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80058d0:	f7fd f89e 	bl	8002a10 <HAL_GetTick>
 80058d4:	4602      	mov	r2, r0
 80058d6:	693b      	ldr	r3, [r7, #16]
 80058d8:	1ad3      	subs	r3, r2, r3
 80058da:	2b02      	cmp	r3, #2
 80058dc:	d901      	bls.n	80058e2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80058de:	2303      	movs	r3, #3
 80058e0:	e045      	b.n	800596e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80058e2:	4b06      	ldr	r3, [pc, #24]	@ (80058fc <HAL_RCC_OscConfig+0x470>)
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d1f0      	bne.n	80058d0 <HAL_RCC_OscConfig+0x444>
 80058ee:	e03d      	b.n	800596c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	699b      	ldr	r3, [r3, #24]
 80058f4:	2b01      	cmp	r3, #1
 80058f6:	d107      	bne.n	8005908 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80058f8:	2301      	movs	r3, #1
 80058fa:	e038      	b.n	800596e <HAL_RCC_OscConfig+0x4e2>
 80058fc:	40023800 	.word	0x40023800
 8005900:	40007000 	.word	0x40007000
 8005904:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005908:	4b1b      	ldr	r3, [pc, #108]	@ (8005978 <HAL_RCC_OscConfig+0x4ec>)
 800590a:	685b      	ldr	r3, [r3, #4]
 800590c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	699b      	ldr	r3, [r3, #24]
 8005912:	2b01      	cmp	r3, #1
 8005914:	d028      	beq.n	8005968 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005920:	429a      	cmp	r2, r3
 8005922:	d121      	bne.n	8005968 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800592e:	429a      	cmp	r2, r3
 8005930:	d11a      	bne.n	8005968 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005932:	68fa      	ldr	r2, [r7, #12]
 8005934:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005938:	4013      	ands	r3, r2
 800593a:	687a      	ldr	r2, [r7, #4]
 800593c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800593e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005940:	4293      	cmp	r3, r2
 8005942:	d111      	bne.n	8005968 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800594e:	085b      	lsrs	r3, r3, #1
 8005950:	3b01      	subs	r3, #1
 8005952:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005954:	429a      	cmp	r2, r3
 8005956:	d107      	bne.n	8005968 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005962:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005964:	429a      	cmp	r2, r3
 8005966:	d001      	beq.n	800596c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005968:	2301      	movs	r3, #1
 800596a:	e000      	b.n	800596e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800596c:	2300      	movs	r3, #0
}
 800596e:	4618      	mov	r0, r3
 8005970:	3718      	adds	r7, #24
 8005972:	46bd      	mov	sp, r7
 8005974:	bd80      	pop	{r7, pc}
 8005976:	bf00      	nop
 8005978:	40023800 	.word	0x40023800

0800597c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800597c:	b580      	push	{r7, lr}
 800597e:	b084      	sub	sp, #16
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
 8005984:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d101      	bne.n	8005990 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800598c:	2301      	movs	r3, #1
 800598e:	e0cc      	b.n	8005b2a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005990:	4b68      	ldr	r3, [pc, #416]	@ (8005b34 <HAL_RCC_ClockConfig+0x1b8>)
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f003 0307 	and.w	r3, r3, #7
 8005998:	683a      	ldr	r2, [r7, #0]
 800599a:	429a      	cmp	r2, r3
 800599c:	d90c      	bls.n	80059b8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800599e:	4b65      	ldr	r3, [pc, #404]	@ (8005b34 <HAL_RCC_ClockConfig+0x1b8>)
 80059a0:	683a      	ldr	r2, [r7, #0]
 80059a2:	b2d2      	uxtb	r2, r2
 80059a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80059a6:	4b63      	ldr	r3, [pc, #396]	@ (8005b34 <HAL_RCC_ClockConfig+0x1b8>)
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f003 0307 	and.w	r3, r3, #7
 80059ae:	683a      	ldr	r2, [r7, #0]
 80059b0:	429a      	cmp	r2, r3
 80059b2:	d001      	beq.n	80059b8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80059b4:	2301      	movs	r3, #1
 80059b6:	e0b8      	b.n	8005b2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f003 0302 	and.w	r3, r3, #2
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d020      	beq.n	8005a06 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f003 0304 	and.w	r3, r3, #4
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d005      	beq.n	80059dc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80059d0:	4b59      	ldr	r3, [pc, #356]	@ (8005b38 <HAL_RCC_ClockConfig+0x1bc>)
 80059d2:	689b      	ldr	r3, [r3, #8]
 80059d4:	4a58      	ldr	r2, [pc, #352]	@ (8005b38 <HAL_RCC_ClockConfig+0x1bc>)
 80059d6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80059da:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f003 0308 	and.w	r3, r3, #8
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d005      	beq.n	80059f4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80059e8:	4b53      	ldr	r3, [pc, #332]	@ (8005b38 <HAL_RCC_ClockConfig+0x1bc>)
 80059ea:	689b      	ldr	r3, [r3, #8]
 80059ec:	4a52      	ldr	r2, [pc, #328]	@ (8005b38 <HAL_RCC_ClockConfig+0x1bc>)
 80059ee:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80059f2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80059f4:	4b50      	ldr	r3, [pc, #320]	@ (8005b38 <HAL_RCC_ClockConfig+0x1bc>)
 80059f6:	689b      	ldr	r3, [r3, #8]
 80059f8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	689b      	ldr	r3, [r3, #8]
 8005a00:	494d      	ldr	r1, [pc, #308]	@ (8005b38 <HAL_RCC_ClockConfig+0x1bc>)
 8005a02:	4313      	orrs	r3, r2
 8005a04:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f003 0301 	and.w	r3, r3, #1
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d044      	beq.n	8005a9c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	685b      	ldr	r3, [r3, #4]
 8005a16:	2b01      	cmp	r3, #1
 8005a18:	d107      	bne.n	8005a2a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a1a:	4b47      	ldr	r3, [pc, #284]	@ (8005b38 <HAL_RCC_ClockConfig+0x1bc>)
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d119      	bne.n	8005a5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a26:	2301      	movs	r3, #1
 8005a28:	e07f      	b.n	8005b2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	685b      	ldr	r3, [r3, #4]
 8005a2e:	2b02      	cmp	r3, #2
 8005a30:	d003      	beq.n	8005a3a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005a36:	2b03      	cmp	r3, #3
 8005a38:	d107      	bne.n	8005a4a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a3a:	4b3f      	ldr	r3, [pc, #252]	@ (8005b38 <HAL_RCC_ClockConfig+0x1bc>)
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d109      	bne.n	8005a5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a46:	2301      	movs	r3, #1
 8005a48:	e06f      	b.n	8005b2a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a4a:	4b3b      	ldr	r3, [pc, #236]	@ (8005b38 <HAL_RCC_ClockConfig+0x1bc>)
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f003 0302 	and.w	r3, r3, #2
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d101      	bne.n	8005a5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a56:	2301      	movs	r3, #1
 8005a58:	e067      	b.n	8005b2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005a5a:	4b37      	ldr	r3, [pc, #220]	@ (8005b38 <HAL_RCC_ClockConfig+0x1bc>)
 8005a5c:	689b      	ldr	r3, [r3, #8]
 8005a5e:	f023 0203 	bic.w	r2, r3, #3
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	685b      	ldr	r3, [r3, #4]
 8005a66:	4934      	ldr	r1, [pc, #208]	@ (8005b38 <HAL_RCC_ClockConfig+0x1bc>)
 8005a68:	4313      	orrs	r3, r2
 8005a6a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005a6c:	f7fc ffd0 	bl	8002a10 <HAL_GetTick>
 8005a70:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a72:	e00a      	b.n	8005a8a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a74:	f7fc ffcc 	bl	8002a10 <HAL_GetTick>
 8005a78:	4602      	mov	r2, r0
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	1ad3      	subs	r3, r2, r3
 8005a7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d901      	bls.n	8005a8a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005a86:	2303      	movs	r3, #3
 8005a88:	e04f      	b.n	8005b2a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a8a:	4b2b      	ldr	r3, [pc, #172]	@ (8005b38 <HAL_RCC_ClockConfig+0x1bc>)
 8005a8c:	689b      	ldr	r3, [r3, #8]
 8005a8e:	f003 020c 	and.w	r2, r3, #12
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	685b      	ldr	r3, [r3, #4]
 8005a96:	009b      	lsls	r3, r3, #2
 8005a98:	429a      	cmp	r2, r3
 8005a9a:	d1eb      	bne.n	8005a74 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005a9c:	4b25      	ldr	r3, [pc, #148]	@ (8005b34 <HAL_RCC_ClockConfig+0x1b8>)
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f003 0307 	and.w	r3, r3, #7
 8005aa4:	683a      	ldr	r2, [r7, #0]
 8005aa6:	429a      	cmp	r2, r3
 8005aa8:	d20c      	bcs.n	8005ac4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005aaa:	4b22      	ldr	r3, [pc, #136]	@ (8005b34 <HAL_RCC_ClockConfig+0x1b8>)
 8005aac:	683a      	ldr	r2, [r7, #0]
 8005aae:	b2d2      	uxtb	r2, r2
 8005ab0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ab2:	4b20      	ldr	r3, [pc, #128]	@ (8005b34 <HAL_RCC_ClockConfig+0x1b8>)
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f003 0307 	and.w	r3, r3, #7
 8005aba:	683a      	ldr	r2, [r7, #0]
 8005abc:	429a      	cmp	r2, r3
 8005abe:	d001      	beq.n	8005ac4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005ac0:	2301      	movs	r3, #1
 8005ac2:	e032      	b.n	8005b2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f003 0304 	and.w	r3, r3, #4
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d008      	beq.n	8005ae2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005ad0:	4b19      	ldr	r3, [pc, #100]	@ (8005b38 <HAL_RCC_ClockConfig+0x1bc>)
 8005ad2:	689b      	ldr	r3, [r3, #8]
 8005ad4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	68db      	ldr	r3, [r3, #12]
 8005adc:	4916      	ldr	r1, [pc, #88]	@ (8005b38 <HAL_RCC_ClockConfig+0x1bc>)
 8005ade:	4313      	orrs	r3, r2
 8005ae0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f003 0308 	and.w	r3, r3, #8
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d009      	beq.n	8005b02 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005aee:	4b12      	ldr	r3, [pc, #72]	@ (8005b38 <HAL_RCC_ClockConfig+0x1bc>)
 8005af0:	689b      	ldr	r3, [r3, #8]
 8005af2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	691b      	ldr	r3, [r3, #16]
 8005afa:	00db      	lsls	r3, r3, #3
 8005afc:	490e      	ldr	r1, [pc, #56]	@ (8005b38 <HAL_RCC_ClockConfig+0x1bc>)
 8005afe:	4313      	orrs	r3, r2
 8005b00:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005b02:	f000 f821 	bl	8005b48 <HAL_RCC_GetSysClockFreq>
 8005b06:	4602      	mov	r2, r0
 8005b08:	4b0b      	ldr	r3, [pc, #44]	@ (8005b38 <HAL_RCC_ClockConfig+0x1bc>)
 8005b0a:	689b      	ldr	r3, [r3, #8]
 8005b0c:	091b      	lsrs	r3, r3, #4
 8005b0e:	f003 030f 	and.w	r3, r3, #15
 8005b12:	490a      	ldr	r1, [pc, #40]	@ (8005b3c <HAL_RCC_ClockConfig+0x1c0>)
 8005b14:	5ccb      	ldrb	r3, [r1, r3]
 8005b16:	fa22 f303 	lsr.w	r3, r2, r3
 8005b1a:	4a09      	ldr	r2, [pc, #36]	@ (8005b40 <HAL_RCC_ClockConfig+0x1c4>)
 8005b1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005b1e:	4b09      	ldr	r3, [pc, #36]	@ (8005b44 <HAL_RCC_ClockConfig+0x1c8>)
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	4618      	mov	r0, r3
 8005b24:	f7fc ff30 	bl	8002988 <HAL_InitTick>

  return HAL_OK;
 8005b28:	2300      	movs	r3, #0
}
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	3710      	adds	r7, #16
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	bd80      	pop	{r7, pc}
 8005b32:	bf00      	nop
 8005b34:	40023c00 	.word	0x40023c00
 8005b38:	40023800 	.word	0x40023800
 8005b3c:	0800d9dc 	.word	0x0800d9dc
 8005b40:	20000000 	.word	0x20000000
 8005b44:	20000004 	.word	0x20000004

08005b48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005b48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005b4c:	b094      	sub	sp, #80	@ 0x50
 8005b4e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005b50:	2300      	movs	r3, #0
 8005b52:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8005b54:	2300      	movs	r3, #0
 8005b56:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8005b58:	2300      	movs	r3, #0
 8005b5a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005b60:	4b79      	ldr	r3, [pc, #484]	@ (8005d48 <HAL_RCC_GetSysClockFreq+0x200>)
 8005b62:	689b      	ldr	r3, [r3, #8]
 8005b64:	f003 030c 	and.w	r3, r3, #12
 8005b68:	2b08      	cmp	r3, #8
 8005b6a:	d00d      	beq.n	8005b88 <HAL_RCC_GetSysClockFreq+0x40>
 8005b6c:	2b08      	cmp	r3, #8
 8005b6e:	f200 80e1 	bhi.w	8005d34 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d002      	beq.n	8005b7c <HAL_RCC_GetSysClockFreq+0x34>
 8005b76:	2b04      	cmp	r3, #4
 8005b78:	d003      	beq.n	8005b82 <HAL_RCC_GetSysClockFreq+0x3a>
 8005b7a:	e0db      	b.n	8005d34 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005b7c:	4b73      	ldr	r3, [pc, #460]	@ (8005d4c <HAL_RCC_GetSysClockFreq+0x204>)
 8005b7e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005b80:	e0db      	b.n	8005d3a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005b82:	4b73      	ldr	r3, [pc, #460]	@ (8005d50 <HAL_RCC_GetSysClockFreq+0x208>)
 8005b84:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005b86:	e0d8      	b.n	8005d3a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005b88:	4b6f      	ldr	r3, [pc, #444]	@ (8005d48 <HAL_RCC_GetSysClockFreq+0x200>)
 8005b8a:	685b      	ldr	r3, [r3, #4]
 8005b8c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005b90:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005b92:	4b6d      	ldr	r3, [pc, #436]	@ (8005d48 <HAL_RCC_GetSysClockFreq+0x200>)
 8005b94:	685b      	ldr	r3, [r3, #4]
 8005b96:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d063      	beq.n	8005c66 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005b9e:	4b6a      	ldr	r3, [pc, #424]	@ (8005d48 <HAL_RCC_GetSysClockFreq+0x200>)
 8005ba0:	685b      	ldr	r3, [r3, #4]
 8005ba2:	099b      	lsrs	r3, r3, #6
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005ba8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005baa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005bb0:	633b      	str	r3, [r7, #48]	@ 0x30
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	637b      	str	r3, [r7, #52]	@ 0x34
 8005bb6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005bba:	4622      	mov	r2, r4
 8005bbc:	462b      	mov	r3, r5
 8005bbe:	f04f 0000 	mov.w	r0, #0
 8005bc2:	f04f 0100 	mov.w	r1, #0
 8005bc6:	0159      	lsls	r1, r3, #5
 8005bc8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005bcc:	0150      	lsls	r0, r2, #5
 8005bce:	4602      	mov	r2, r0
 8005bd0:	460b      	mov	r3, r1
 8005bd2:	4621      	mov	r1, r4
 8005bd4:	1a51      	subs	r1, r2, r1
 8005bd6:	6139      	str	r1, [r7, #16]
 8005bd8:	4629      	mov	r1, r5
 8005bda:	eb63 0301 	sbc.w	r3, r3, r1
 8005bde:	617b      	str	r3, [r7, #20]
 8005be0:	f04f 0200 	mov.w	r2, #0
 8005be4:	f04f 0300 	mov.w	r3, #0
 8005be8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005bec:	4659      	mov	r1, fp
 8005bee:	018b      	lsls	r3, r1, #6
 8005bf0:	4651      	mov	r1, sl
 8005bf2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005bf6:	4651      	mov	r1, sl
 8005bf8:	018a      	lsls	r2, r1, #6
 8005bfa:	4651      	mov	r1, sl
 8005bfc:	ebb2 0801 	subs.w	r8, r2, r1
 8005c00:	4659      	mov	r1, fp
 8005c02:	eb63 0901 	sbc.w	r9, r3, r1
 8005c06:	f04f 0200 	mov.w	r2, #0
 8005c0a:	f04f 0300 	mov.w	r3, #0
 8005c0e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005c12:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005c16:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005c1a:	4690      	mov	r8, r2
 8005c1c:	4699      	mov	r9, r3
 8005c1e:	4623      	mov	r3, r4
 8005c20:	eb18 0303 	adds.w	r3, r8, r3
 8005c24:	60bb      	str	r3, [r7, #8]
 8005c26:	462b      	mov	r3, r5
 8005c28:	eb49 0303 	adc.w	r3, r9, r3
 8005c2c:	60fb      	str	r3, [r7, #12]
 8005c2e:	f04f 0200 	mov.w	r2, #0
 8005c32:	f04f 0300 	mov.w	r3, #0
 8005c36:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005c3a:	4629      	mov	r1, r5
 8005c3c:	024b      	lsls	r3, r1, #9
 8005c3e:	4621      	mov	r1, r4
 8005c40:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005c44:	4621      	mov	r1, r4
 8005c46:	024a      	lsls	r2, r1, #9
 8005c48:	4610      	mov	r0, r2
 8005c4a:	4619      	mov	r1, r3
 8005c4c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005c4e:	2200      	movs	r2, #0
 8005c50:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005c52:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005c54:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005c58:	f7fc f822 	bl	8001ca0 <__aeabi_uldivmod>
 8005c5c:	4602      	mov	r2, r0
 8005c5e:	460b      	mov	r3, r1
 8005c60:	4613      	mov	r3, r2
 8005c62:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005c64:	e058      	b.n	8005d18 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005c66:	4b38      	ldr	r3, [pc, #224]	@ (8005d48 <HAL_RCC_GetSysClockFreq+0x200>)
 8005c68:	685b      	ldr	r3, [r3, #4]
 8005c6a:	099b      	lsrs	r3, r3, #6
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	4618      	mov	r0, r3
 8005c70:	4611      	mov	r1, r2
 8005c72:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005c76:	623b      	str	r3, [r7, #32]
 8005c78:	2300      	movs	r3, #0
 8005c7a:	627b      	str	r3, [r7, #36]	@ 0x24
 8005c7c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005c80:	4642      	mov	r2, r8
 8005c82:	464b      	mov	r3, r9
 8005c84:	f04f 0000 	mov.w	r0, #0
 8005c88:	f04f 0100 	mov.w	r1, #0
 8005c8c:	0159      	lsls	r1, r3, #5
 8005c8e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005c92:	0150      	lsls	r0, r2, #5
 8005c94:	4602      	mov	r2, r0
 8005c96:	460b      	mov	r3, r1
 8005c98:	4641      	mov	r1, r8
 8005c9a:	ebb2 0a01 	subs.w	sl, r2, r1
 8005c9e:	4649      	mov	r1, r9
 8005ca0:	eb63 0b01 	sbc.w	fp, r3, r1
 8005ca4:	f04f 0200 	mov.w	r2, #0
 8005ca8:	f04f 0300 	mov.w	r3, #0
 8005cac:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005cb0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005cb4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005cb8:	ebb2 040a 	subs.w	r4, r2, sl
 8005cbc:	eb63 050b 	sbc.w	r5, r3, fp
 8005cc0:	f04f 0200 	mov.w	r2, #0
 8005cc4:	f04f 0300 	mov.w	r3, #0
 8005cc8:	00eb      	lsls	r3, r5, #3
 8005cca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005cce:	00e2      	lsls	r2, r4, #3
 8005cd0:	4614      	mov	r4, r2
 8005cd2:	461d      	mov	r5, r3
 8005cd4:	4643      	mov	r3, r8
 8005cd6:	18e3      	adds	r3, r4, r3
 8005cd8:	603b      	str	r3, [r7, #0]
 8005cda:	464b      	mov	r3, r9
 8005cdc:	eb45 0303 	adc.w	r3, r5, r3
 8005ce0:	607b      	str	r3, [r7, #4]
 8005ce2:	f04f 0200 	mov.w	r2, #0
 8005ce6:	f04f 0300 	mov.w	r3, #0
 8005cea:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005cee:	4629      	mov	r1, r5
 8005cf0:	028b      	lsls	r3, r1, #10
 8005cf2:	4621      	mov	r1, r4
 8005cf4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005cf8:	4621      	mov	r1, r4
 8005cfa:	028a      	lsls	r2, r1, #10
 8005cfc:	4610      	mov	r0, r2
 8005cfe:	4619      	mov	r1, r3
 8005d00:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005d02:	2200      	movs	r2, #0
 8005d04:	61bb      	str	r3, [r7, #24]
 8005d06:	61fa      	str	r2, [r7, #28]
 8005d08:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005d0c:	f7fb ffc8 	bl	8001ca0 <__aeabi_uldivmod>
 8005d10:	4602      	mov	r2, r0
 8005d12:	460b      	mov	r3, r1
 8005d14:	4613      	mov	r3, r2
 8005d16:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005d18:	4b0b      	ldr	r3, [pc, #44]	@ (8005d48 <HAL_RCC_GetSysClockFreq+0x200>)
 8005d1a:	685b      	ldr	r3, [r3, #4]
 8005d1c:	0c1b      	lsrs	r3, r3, #16
 8005d1e:	f003 0303 	and.w	r3, r3, #3
 8005d22:	3301      	adds	r3, #1
 8005d24:	005b      	lsls	r3, r3, #1
 8005d26:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8005d28:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005d2a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005d2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d30:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005d32:	e002      	b.n	8005d3a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005d34:	4b05      	ldr	r3, [pc, #20]	@ (8005d4c <HAL_RCC_GetSysClockFreq+0x204>)
 8005d36:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005d38:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005d3a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	3750      	adds	r7, #80	@ 0x50
 8005d40:	46bd      	mov	sp, r7
 8005d42:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005d46:	bf00      	nop
 8005d48:	40023800 	.word	0x40023800
 8005d4c:	00f42400 	.word	0x00f42400
 8005d50:	007a1200 	.word	0x007a1200

08005d54 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005d54:	b480      	push	{r7}
 8005d56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005d58:	4b03      	ldr	r3, [pc, #12]	@ (8005d68 <HAL_RCC_GetHCLKFreq+0x14>)
 8005d5a:	681b      	ldr	r3, [r3, #0]
}
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d64:	4770      	bx	lr
 8005d66:	bf00      	nop
 8005d68:	20000000 	.word	0x20000000

08005d6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005d70:	f7ff fff0 	bl	8005d54 <HAL_RCC_GetHCLKFreq>
 8005d74:	4602      	mov	r2, r0
 8005d76:	4b05      	ldr	r3, [pc, #20]	@ (8005d8c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005d78:	689b      	ldr	r3, [r3, #8]
 8005d7a:	0a9b      	lsrs	r3, r3, #10
 8005d7c:	f003 0307 	and.w	r3, r3, #7
 8005d80:	4903      	ldr	r1, [pc, #12]	@ (8005d90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005d82:	5ccb      	ldrb	r3, [r1, r3]
 8005d84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005d88:	4618      	mov	r0, r3
 8005d8a:	bd80      	pop	{r7, pc}
 8005d8c:	40023800 	.word	0x40023800
 8005d90:	0800d9ec 	.word	0x0800d9ec

08005d94 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b082      	sub	sp, #8
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d101      	bne.n	8005da6 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8005da2:	2301      	movs	r3, #1
 8005da4:	e01c      	b.n	8005de0 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	795b      	ldrb	r3, [r3, #5]
 8005daa:	b2db      	uxtb	r3, r3
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d105      	bne.n	8005dbc <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2200      	movs	r2, #0
 8005db4:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8005db6:	6878      	ldr	r0, [r7, #4]
 8005db8:	f7fc fc64 	bl	8002684 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2202      	movs	r2, #2
 8005dc0:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	681a      	ldr	r2, [r3, #0]
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f042 0204 	orr.w	r2, r2, #4
 8005dd0:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	2201      	movs	r2, #1
 8005dd6:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2200      	movs	r2, #0
 8005ddc:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8005dde:	2300      	movs	r3, #0
}
 8005de0:	4618      	mov	r0, r3
 8005de2:	3708      	adds	r7, #8
 8005de4:	46bd      	mov	sp, r7
 8005de6:	bd80      	pop	{r7, pc}

08005de8 <HAL_RNG_GenerateRandomNumber_IT>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber_IT(RNG_HandleTypeDef *hrng)
{
 8005de8:	b480      	push	{r7}
 8005dea:	b085      	sub	sp, #20
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005df0:	2300      	movs	r3, #0
 8005df2:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	791b      	ldrb	r3, [r3, #4]
 8005df8:	2b01      	cmp	r3, #1
 8005dfa:	d101      	bne.n	8005e00 <HAL_RNG_GenerateRandomNumber_IT+0x18>
 8005dfc:	2302      	movs	r3, #2
 8005dfe:	e01c      	b.n	8005e3a <HAL_RNG_GenerateRandomNumber_IT+0x52>
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2201      	movs	r2, #1
 8005e04:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	795b      	ldrb	r3, [r3, #5]
 8005e0a:	b2db      	uxtb	r3, r3
 8005e0c:	2b01      	cmp	r3, #1
 8005e0e:	d10b      	bne.n	8005e28 <HAL_RNG_GenerateRandomNumber_IT+0x40>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2202      	movs	r2, #2
 8005e14:	715a      	strb	r2, [r3, #5]

    /* Enable the RNG Interrupts: Data Ready, Clock error, Seed error */
    __HAL_RNG_ENABLE_IT(hrng);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	681a      	ldr	r2, [r3, #0]
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f042 0208 	orr.w	r2, r2, #8
 8005e24:	601a      	str	r2, [r3, #0]
 8005e26:	e007      	b.n	8005e38 <HAL_RNG_GenerateRandomNumber_IT+0x50>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hrng);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	711a      	strb	r2, [r3, #4]

    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2204      	movs	r2, #4
 8005e32:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 8005e34:	2301      	movs	r3, #1
 8005e36:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005e38:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	3714      	adds	r7, #20
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e44:	4770      	bx	lr

08005e46 <HAL_RNG_IRQHandler>:
  *                the configuration information for RNG.
  * @retval None

  */
void HAL_RNG_IRQHandler(RNG_HandleTypeDef *hrng)
{
 8005e46:	b580      	push	{r7, lr}
 8005e48:	b084      	sub	sp, #16
 8005e4a:	af00      	add	r7, sp, #0
 8005e4c:	6078      	str	r0, [r7, #4]
  uint32_t rngclockerror = 0U;
 8005e4e:	2300      	movs	r3, #0
 8005e50:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hrng->Instance->SR;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	685b      	ldr	r3, [r3, #4]
 8005e58:	60bb      	str	r3, [r7, #8]

  /* RNG clock error interrupt occurred */
  if ((itflag & RNG_IT_CEI) == RNG_IT_CEI)
 8005e5a:	68bb      	ldr	r3, [r7, #8]
 8005e5c:	f003 0320 	and.w	r3, r3, #32
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d005      	beq.n	8005e70 <HAL_RNG_IRQHandler+0x2a>
  {
    /* Update the error code */
    hrng->ErrorCode = HAL_RNG_ERROR_CLOCK;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2210      	movs	r2, #16
 8005e68:	609a      	str	r2, [r3, #8]
    rngclockerror = 1U;
 8005e6a:	2301      	movs	r3, #1
 8005e6c:	60fb      	str	r3, [r7, #12]
 8005e6e:	e009      	b.n	8005e84 <HAL_RNG_IRQHandler+0x3e>
  }
  else if ((itflag & RNG_IT_SEI) == RNG_IT_SEI)
 8005e70:	68bb      	ldr	r3, [r7, #8]
 8005e72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d004      	beq.n	8005e84 <HAL_RNG_IRQHandler+0x3e>
  {
    /* Update the error code */
    hrng->ErrorCode = HAL_RNG_ERROR_SEED;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	2208      	movs	r2, #8
 8005e7e:	609a      	str	r2, [r3, #8]
    rngclockerror = 1U;
 8005e80:	2301      	movs	r3, #1
 8005e82:	60fb      	str	r3, [r7, #12]
  else
  {
    /* Nothing to do */
  }

  if (rngclockerror == 1U)
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	2b01      	cmp	r3, #1
 8005e88:	d10b      	bne.n	8005ea2 <HAL_RNG_IRQHandler+0x5c>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_ERROR;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	2204      	movs	r2, #4
 8005e8e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback */
    hrng->ErrorCallback(hrng);
#else
    /* Call legacy weak Error callback */
    HAL_RNG_ErrorCallback(hrng);
 8005e90:	6878      	ldr	r0, [r7, #4]
 8005e92:	f000 f838 	bl	8005f06 <HAL_RNG_ErrorCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

    /* Clear the clock error flag */
    __HAL_RNG_CLEAR_IT(hrng, RNG_IT_CEI | RNG_IT_SEI);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f06f 0260 	mvn.w	r2, #96	@ 0x60
 8005e9e:	605a      	str	r2, [r3, #4]

    return;
 8005ea0:	e022      	b.n	8005ee8 <HAL_RNG_IRQHandler+0xa2>
  }

  /* Check RNG data ready interrupt occurred */
  if ((itflag & RNG_IT_DRDY) == RNG_IT_DRDY)
 8005ea2:	68bb      	ldr	r3, [r7, #8]
 8005ea4:	f003 0301 	and.w	r3, r3, #1
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d01d      	beq.n	8005ee8 <HAL_RNG_IRQHandler+0xa2>
  {
    /* Generate random number once, so disable the IT */
    __HAL_RNG_DISABLE_IT(hrng);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	681a      	ldr	r2, [r3, #0]
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f022 0208 	bic.w	r2, r2, #8
 8005eba:	601a      	str	r2, [r3, #0]

    /* Get the 32bit Random number (DRDY flag automatically cleared) */
    hrng->RandomNumber = hrng->Instance->DR;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	689a      	ldr	r2, [r3, #8]
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	60da      	str	r2, [r3, #12]

    if (hrng->State != HAL_RNG_STATE_ERROR)
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	795b      	ldrb	r3, [r3, #5]
 8005eca:	b2db      	uxtb	r3, r3
 8005ecc:	2b04      	cmp	r3, #4
 8005ece:	d00b      	beq.n	8005ee8 <HAL_RNG_IRQHandler+0xa2>
    {
      /* Change RNG peripheral state */
      hrng->State = HAL_RNG_STATE_READY;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2201      	movs	r2, #1
 8005ed4:	715a      	strb	r2, [r3, #5]
      /* Process Unlocked */
      __HAL_UNLOCK(hrng);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2200      	movs	r2, #0
 8005eda:	711a      	strb	r2, [r3, #4]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
      /* Call registered Data Ready callback */
      hrng->ReadyDataCallback(hrng, hrng->RandomNumber);
#else
      /* Call legacy weak Data Ready callback */
      HAL_RNG_ReadyDataCallback(hrng, hrng->RandomNumber);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	68db      	ldr	r3, [r3, #12]
 8005ee0:	4619      	mov	r1, r3
 8005ee2:	6878      	ldr	r0, [r7, #4]
 8005ee4:	f006 f9b8 	bl	800c258 <HAL_RNG_ReadyDataCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */
    }
  }
}
 8005ee8:	3710      	adds	r7, #16
 8005eea:	46bd      	mov	sp, r7
 8005eec:	bd80      	pop	{r7, pc}

08005eee <HAL_RNG_ReadLastRandomNumber>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval random value
  */
uint32_t HAL_RNG_ReadLastRandomNumber(const RNG_HandleTypeDef *hrng)
{
 8005eee:	b480      	push	{r7}
 8005ef0:	b083      	sub	sp, #12
 8005ef2:	af00      	add	r7, sp, #0
 8005ef4:	6078      	str	r0, [r7, #4]
  return (hrng->RandomNumber);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	68db      	ldr	r3, [r3, #12]
}
 8005efa:	4618      	mov	r0, r3
 8005efc:	370c      	adds	r7, #12
 8005efe:	46bd      	mov	sp, r7
 8005f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f04:	4770      	bx	lr

08005f06 <HAL_RNG_ErrorCallback>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval None
  */
__weak void HAL_RNG_ErrorCallback(RNG_HandleTypeDef *hrng)
{
 8005f06:	b480      	push	{r7}
 8005f08:	b083      	sub	sp, #12
 8005f0a:	af00      	add	r7, sp, #0
 8005f0c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrng);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_ErrorCallback must be implemented in the user file.
   */
}
 8005f0e:	bf00      	nop
 8005f10:	370c      	adds	r7, #12
 8005f12:	46bd      	mov	sp, r7
 8005f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f18:	4770      	bx	lr

08005f1a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005f1a:	b580      	push	{r7, lr}
 8005f1c:	b082      	sub	sp, #8
 8005f1e:	af00      	add	r7, sp, #0
 8005f20:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d101      	bne.n	8005f2c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005f28:	2301      	movs	r3, #1
 8005f2a:	e041      	b.n	8005fb0 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005f32:	b2db      	uxtb	r3, r3
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d106      	bne.n	8005f46 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005f40:	6878      	ldr	r0, [r7, #4]
 8005f42:	f7fc fbc7 	bl	80026d4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	2202      	movs	r2, #2
 8005f4a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681a      	ldr	r2, [r3, #0]
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	3304      	adds	r3, #4
 8005f56:	4619      	mov	r1, r3
 8005f58:	4610      	mov	r0, r2
 8005f5a:	f000 fa7d 	bl	8006458 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	2201      	movs	r2, #1
 8005f62:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	2201      	movs	r2, #1
 8005f6a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	2201      	movs	r2, #1
 8005f72:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	2201      	movs	r2, #1
 8005f7a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2201      	movs	r2, #1
 8005f82:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2201      	movs	r2, #1
 8005f8a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	2201      	movs	r2, #1
 8005f92:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	2201      	movs	r2, #1
 8005f9a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	2201      	movs	r2, #1
 8005fa2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	2201      	movs	r2, #1
 8005faa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005fae:	2300      	movs	r3, #0
}
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	3708      	adds	r7, #8
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	bd80      	pop	{r7, pc}

08005fb8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005fb8:	b480      	push	{r7}
 8005fba:	b085      	sub	sp, #20
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005fc6:	b2db      	uxtb	r3, r3
 8005fc8:	2b01      	cmp	r3, #1
 8005fca:	d001      	beq.n	8005fd0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005fcc:	2301      	movs	r3, #1
 8005fce:	e04e      	b.n	800606e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2202      	movs	r2, #2
 8005fd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	68da      	ldr	r2, [r3, #12]
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f042 0201 	orr.w	r2, r2, #1
 8005fe6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	4a23      	ldr	r2, [pc, #140]	@ (800607c <HAL_TIM_Base_Start_IT+0xc4>)
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	d022      	beq.n	8006038 <HAL_TIM_Base_Start_IT+0x80>
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ffa:	d01d      	beq.n	8006038 <HAL_TIM_Base_Start_IT+0x80>
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	4a1f      	ldr	r2, [pc, #124]	@ (8006080 <HAL_TIM_Base_Start_IT+0xc8>)
 8006002:	4293      	cmp	r3, r2
 8006004:	d018      	beq.n	8006038 <HAL_TIM_Base_Start_IT+0x80>
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	4a1e      	ldr	r2, [pc, #120]	@ (8006084 <HAL_TIM_Base_Start_IT+0xcc>)
 800600c:	4293      	cmp	r3, r2
 800600e:	d013      	beq.n	8006038 <HAL_TIM_Base_Start_IT+0x80>
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	4a1c      	ldr	r2, [pc, #112]	@ (8006088 <HAL_TIM_Base_Start_IT+0xd0>)
 8006016:	4293      	cmp	r3, r2
 8006018:	d00e      	beq.n	8006038 <HAL_TIM_Base_Start_IT+0x80>
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	4a1b      	ldr	r2, [pc, #108]	@ (800608c <HAL_TIM_Base_Start_IT+0xd4>)
 8006020:	4293      	cmp	r3, r2
 8006022:	d009      	beq.n	8006038 <HAL_TIM_Base_Start_IT+0x80>
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	4a19      	ldr	r2, [pc, #100]	@ (8006090 <HAL_TIM_Base_Start_IT+0xd8>)
 800602a:	4293      	cmp	r3, r2
 800602c:	d004      	beq.n	8006038 <HAL_TIM_Base_Start_IT+0x80>
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	4a18      	ldr	r2, [pc, #96]	@ (8006094 <HAL_TIM_Base_Start_IT+0xdc>)
 8006034:	4293      	cmp	r3, r2
 8006036:	d111      	bne.n	800605c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	689b      	ldr	r3, [r3, #8]
 800603e:	f003 0307 	and.w	r3, r3, #7
 8006042:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	2b06      	cmp	r3, #6
 8006048:	d010      	beq.n	800606c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	681a      	ldr	r2, [r3, #0]
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f042 0201 	orr.w	r2, r2, #1
 8006058:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800605a:	e007      	b.n	800606c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	681a      	ldr	r2, [r3, #0]
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f042 0201 	orr.w	r2, r2, #1
 800606a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800606c:	2300      	movs	r3, #0
}
 800606e:	4618      	mov	r0, r3
 8006070:	3714      	adds	r7, #20
 8006072:	46bd      	mov	sp, r7
 8006074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006078:	4770      	bx	lr
 800607a:	bf00      	nop
 800607c:	40010000 	.word	0x40010000
 8006080:	40000400 	.word	0x40000400
 8006084:	40000800 	.word	0x40000800
 8006088:	40000c00 	.word	0x40000c00
 800608c:	40010400 	.word	0x40010400
 8006090:	40014000 	.word	0x40014000
 8006094:	40001800 	.word	0x40001800

08006098 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006098:	b580      	push	{r7, lr}
 800609a:	b084      	sub	sp, #16
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	68db      	ldr	r3, [r3, #12]
 80060a6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	691b      	ldr	r3, [r3, #16]
 80060ae:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80060b0:	68bb      	ldr	r3, [r7, #8]
 80060b2:	f003 0302 	and.w	r3, r3, #2
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d020      	beq.n	80060fc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	f003 0302 	and.w	r3, r3, #2
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d01b      	beq.n	80060fc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f06f 0202 	mvn.w	r2, #2
 80060cc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	2201      	movs	r2, #1
 80060d2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	699b      	ldr	r3, [r3, #24]
 80060da:	f003 0303 	and.w	r3, r3, #3
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d003      	beq.n	80060ea <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80060e2:	6878      	ldr	r0, [r7, #4]
 80060e4:	f000 f999 	bl	800641a <HAL_TIM_IC_CaptureCallback>
 80060e8:	e005      	b.n	80060f6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80060ea:	6878      	ldr	r0, [r7, #4]
 80060ec:	f000 f98b 	bl	8006406 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060f0:	6878      	ldr	r0, [r7, #4]
 80060f2:	f000 f99c 	bl	800642e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	2200      	movs	r2, #0
 80060fa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80060fc:	68bb      	ldr	r3, [r7, #8]
 80060fe:	f003 0304 	and.w	r3, r3, #4
 8006102:	2b00      	cmp	r3, #0
 8006104:	d020      	beq.n	8006148 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	f003 0304 	and.w	r3, r3, #4
 800610c:	2b00      	cmp	r3, #0
 800610e:	d01b      	beq.n	8006148 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f06f 0204 	mvn.w	r2, #4
 8006118:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	2202      	movs	r2, #2
 800611e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	699b      	ldr	r3, [r3, #24]
 8006126:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800612a:	2b00      	cmp	r3, #0
 800612c:	d003      	beq.n	8006136 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800612e:	6878      	ldr	r0, [r7, #4]
 8006130:	f000 f973 	bl	800641a <HAL_TIM_IC_CaptureCallback>
 8006134:	e005      	b.n	8006142 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006136:	6878      	ldr	r0, [r7, #4]
 8006138:	f000 f965 	bl	8006406 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800613c:	6878      	ldr	r0, [r7, #4]
 800613e:	f000 f976 	bl	800642e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	2200      	movs	r2, #0
 8006146:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006148:	68bb      	ldr	r3, [r7, #8]
 800614a:	f003 0308 	and.w	r3, r3, #8
 800614e:	2b00      	cmp	r3, #0
 8006150:	d020      	beq.n	8006194 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	f003 0308 	and.w	r3, r3, #8
 8006158:	2b00      	cmp	r3, #0
 800615a:	d01b      	beq.n	8006194 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f06f 0208 	mvn.w	r2, #8
 8006164:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	2204      	movs	r2, #4
 800616a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	69db      	ldr	r3, [r3, #28]
 8006172:	f003 0303 	and.w	r3, r3, #3
 8006176:	2b00      	cmp	r3, #0
 8006178:	d003      	beq.n	8006182 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800617a:	6878      	ldr	r0, [r7, #4]
 800617c:	f000 f94d 	bl	800641a <HAL_TIM_IC_CaptureCallback>
 8006180:	e005      	b.n	800618e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006182:	6878      	ldr	r0, [r7, #4]
 8006184:	f000 f93f 	bl	8006406 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006188:	6878      	ldr	r0, [r7, #4]
 800618a:	f000 f950 	bl	800642e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	2200      	movs	r2, #0
 8006192:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006194:	68bb      	ldr	r3, [r7, #8]
 8006196:	f003 0310 	and.w	r3, r3, #16
 800619a:	2b00      	cmp	r3, #0
 800619c:	d020      	beq.n	80061e0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	f003 0310 	and.w	r3, r3, #16
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d01b      	beq.n	80061e0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f06f 0210 	mvn.w	r2, #16
 80061b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2208      	movs	r2, #8
 80061b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	69db      	ldr	r3, [r3, #28]
 80061be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d003      	beq.n	80061ce <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80061c6:	6878      	ldr	r0, [r7, #4]
 80061c8:	f000 f927 	bl	800641a <HAL_TIM_IC_CaptureCallback>
 80061cc:	e005      	b.n	80061da <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80061ce:	6878      	ldr	r0, [r7, #4]
 80061d0:	f000 f919 	bl	8006406 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061d4:	6878      	ldr	r0, [r7, #4]
 80061d6:	f000 f92a 	bl	800642e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	2200      	movs	r2, #0
 80061de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80061e0:	68bb      	ldr	r3, [r7, #8]
 80061e2:	f003 0301 	and.w	r3, r3, #1
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d00c      	beq.n	8006204 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	f003 0301 	and.w	r3, r3, #1
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d007      	beq.n	8006204 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f06f 0201 	mvn.w	r2, #1
 80061fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80061fe:	6878      	ldr	r0, [r7, #4]
 8006200:	f006 f83a 	bl	800c278 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006204:	68bb      	ldr	r3, [r7, #8]
 8006206:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800620a:	2b00      	cmp	r3, #0
 800620c:	d00c      	beq.n	8006228 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006214:	2b00      	cmp	r3, #0
 8006216:	d007      	beq.n	8006228 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006220:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006222:	6878      	ldr	r0, [r7, #4]
 8006224:	f000 fae4 	bl	80067f0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006228:	68bb      	ldr	r3, [r7, #8]
 800622a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800622e:	2b00      	cmp	r3, #0
 8006230:	d00c      	beq.n	800624c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006238:	2b00      	cmp	r3, #0
 800623a:	d007      	beq.n	800624c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006244:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006246:	6878      	ldr	r0, [r7, #4]
 8006248:	f000 f8fb 	bl	8006442 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800624c:	68bb      	ldr	r3, [r7, #8]
 800624e:	f003 0320 	and.w	r3, r3, #32
 8006252:	2b00      	cmp	r3, #0
 8006254:	d00c      	beq.n	8006270 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	f003 0320 	and.w	r3, r3, #32
 800625c:	2b00      	cmp	r3, #0
 800625e:	d007      	beq.n	8006270 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f06f 0220 	mvn.w	r2, #32
 8006268:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800626a:	6878      	ldr	r0, [r7, #4]
 800626c:	f000 fab6 	bl	80067dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006270:	bf00      	nop
 8006272:	3710      	adds	r7, #16
 8006274:	46bd      	mov	sp, r7
 8006276:	bd80      	pop	{r7, pc}

08006278 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006278:	b580      	push	{r7, lr}
 800627a:	b084      	sub	sp, #16
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
 8006280:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006282:	2300      	movs	r3, #0
 8006284:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800628c:	2b01      	cmp	r3, #1
 800628e:	d101      	bne.n	8006294 <HAL_TIM_ConfigClockSource+0x1c>
 8006290:	2302      	movs	r3, #2
 8006292:	e0b4      	b.n	80063fe <HAL_TIM_ConfigClockSource+0x186>
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2201      	movs	r2, #1
 8006298:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2202      	movs	r2, #2
 80062a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	689b      	ldr	r3, [r3, #8]
 80062aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80062ac:	68bb      	ldr	r3, [r7, #8]
 80062ae:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80062b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80062b4:	68bb      	ldr	r3, [r7, #8]
 80062b6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80062ba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	68ba      	ldr	r2, [r7, #8]
 80062c2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80062cc:	d03e      	beq.n	800634c <HAL_TIM_ConfigClockSource+0xd4>
 80062ce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80062d2:	f200 8087 	bhi.w	80063e4 <HAL_TIM_ConfigClockSource+0x16c>
 80062d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80062da:	f000 8086 	beq.w	80063ea <HAL_TIM_ConfigClockSource+0x172>
 80062de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80062e2:	d87f      	bhi.n	80063e4 <HAL_TIM_ConfigClockSource+0x16c>
 80062e4:	2b70      	cmp	r3, #112	@ 0x70
 80062e6:	d01a      	beq.n	800631e <HAL_TIM_ConfigClockSource+0xa6>
 80062e8:	2b70      	cmp	r3, #112	@ 0x70
 80062ea:	d87b      	bhi.n	80063e4 <HAL_TIM_ConfigClockSource+0x16c>
 80062ec:	2b60      	cmp	r3, #96	@ 0x60
 80062ee:	d050      	beq.n	8006392 <HAL_TIM_ConfigClockSource+0x11a>
 80062f0:	2b60      	cmp	r3, #96	@ 0x60
 80062f2:	d877      	bhi.n	80063e4 <HAL_TIM_ConfigClockSource+0x16c>
 80062f4:	2b50      	cmp	r3, #80	@ 0x50
 80062f6:	d03c      	beq.n	8006372 <HAL_TIM_ConfigClockSource+0xfa>
 80062f8:	2b50      	cmp	r3, #80	@ 0x50
 80062fa:	d873      	bhi.n	80063e4 <HAL_TIM_ConfigClockSource+0x16c>
 80062fc:	2b40      	cmp	r3, #64	@ 0x40
 80062fe:	d058      	beq.n	80063b2 <HAL_TIM_ConfigClockSource+0x13a>
 8006300:	2b40      	cmp	r3, #64	@ 0x40
 8006302:	d86f      	bhi.n	80063e4 <HAL_TIM_ConfigClockSource+0x16c>
 8006304:	2b30      	cmp	r3, #48	@ 0x30
 8006306:	d064      	beq.n	80063d2 <HAL_TIM_ConfigClockSource+0x15a>
 8006308:	2b30      	cmp	r3, #48	@ 0x30
 800630a:	d86b      	bhi.n	80063e4 <HAL_TIM_ConfigClockSource+0x16c>
 800630c:	2b20      	cmp	r3, #32
 800630e:	d060      	beq.n	80063d2 <HAL_TIM_ConfigClockSource+0x15a>
 8006310:	2b20      	cmp	r3, #32
 8006312:	d867      	bhi.n	80063e4 <HAL_TIM_ConfigClockSource+0x16c>
 8006314:	2b00      	cmp	r3, #0
 8006316:	d05c      	beq.n	80063d2 <HAL_TIM_ConfigClockSource+0x15a>
 8006318:	2b10      	cmp	r3, #16
 800631a:	d05a      	beq.n	80063d2 <HAL_TIM_ConfigClockSource+0x15a>
 800631c:	e062      	b.n	80063e4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006322:	683b      	ldr	r3, [r7, #0]
 8006324:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800632e:	f000 f9b9 	bl	80066a4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	689b      	ldr	r3, [r3, #8]
 8006338:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800633a:	68bb      	ldr	r3, [r7, #8]
 800633c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006340:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	68ba      	ldr	r2, [r7, #8]
 8006348:	609a      	str	r2, [r3, #8]
      break;
 800634a:	e04f      	b.n	80063ec <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006354:	683b      	ldr	r3, [r7, #0]
 8006356:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800635c:	f000 f9a2 	bl	80066a4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	689a      	ldr	r2, [r3, #8]
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800636e:	609a      	str	r2, [r3, #8]
      break;
 8006370:	e03c      	b.n	80063ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800637a:	683b      	ldr	r3, [r7, #0]
 800637c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800637e:	461a      	mov	r2, r3
 8006380:	f000 f916 	bl	80065b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	2150      	movs	r1, #80	@ 0x50
 800638a:	4618      	mov	r0, r3
 800638c:	f000 f96f 	bl	800666e <TIM_ITRx_SetConfig>
      break;
 8006390:	e02c      	b.n	80063ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006396:	683b      	ldr	r3, [r7, #0]
 8006398:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800639a:	683b      	ldr	r3, [r7, #0]
 800639c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800639e:	461a      	mov	r2, r3
 80063a0:	f000 f935 	bl	800660e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	2160      	movs	r1, #96	@ 0x60
 80063aa:	4618      	mov	r0, r3
 80063ac:	f000 f95f 	bl	800666e <TIM_ITRx_SetConfig>
      break;
 80063b0:	e01c      	b.n	80063ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80063b6:	683b      	ldr	r3, [r7, #0]
 80063b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80063ba:	683b      	ldr	r3, [r7, #0]
 80063bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80063be:	461a      	mov	r2, r3
 80063c0:	f000 f8f6 	bl	80065b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	2140      	movs	r1, #64	@ 0x40
 80063ca:	4618      	mov	r0, r3
 80063cc:	f000 f94f 	bl	800666e <TIM_ITRx_SetConfig>
      break;
 80063d0:	e00c      	b.n	80063ec <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681a      	ldr	r2, [r3, #0]
 80063d6:	683b      	ldr	r3, [r7, #0]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	4619      	mov	r1, r3
 80063dc:	4610      	mov	r0, r2
 80063de:	f000 f946 	bl	800666e <TIM_ITRx_SetConfig>
      break;
 80063e2:	e003      	b.n	80063ec <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80063e4:	2301      	movs	r3, #1
 80063e6:	73fb      	strb	r3, [r7, #15]
      break;
 80063e8:	e000      	b.n	80063ec <HAL_TIM_ConfigClockSource+0x174>
      break;
 80063ea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2201      	movs	r2, #1
 80063f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2200      	movs	r2, #0
 80063f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80063fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80063fe:	4618      	mov	r0, r3
 8006400:	3710      	adds	r7, #16
 8006402:	46bd      	mov	sp, r7
 8006404:	bd80      	pop	{r7, pc}

08006406 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006406:	b480      	push	{r7}
 8006408:	b083      	sub	sp, #12
 800640a:	af00      	add	r7, sp, #0
 800640c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800640e:	bf00      	nop
 8006410:	370c      	adds	r7, #12
 8006412:	46bd      	mov	sp, r7
 8006414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006418:	4770      	bx	lr

0800641a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800641a:	b480      	push	{r7}
 800641c:	b083      	sub	sp, #12
 800641e:	af00      	add	r7, sp, #0
 8006420:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006422:	bf00      	nop
 8006424:	370c      	adds	r7, #12
 8006426:	46bd      	mov	sp, r7
 8006428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642c:	4770      	bx	lr

0800642e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800642e:	b480      	push	{r7}
 8006430:	b083      	sub	sp, #12
 8006432:	af00      	add	r7, sp, #0
 8006434:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006436:	bf00      	nop
 8006438:	370c      	adds	r7, #12
 800643a:	46bd      	mov	sp, r7
 800643c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006440:	4770      	bx	lr

08006442 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006442:	b480      	push	{r7}
 8006444:	b083      	sub	sp, #12
 8006446:	af00      	add	r7, sp, #0
 8006448:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800644a:	bf00      	nop
 800644c:	370c      	adds	r7, #12
 800644e:	46bd      	mov	sp, r7
 8006450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006454:	4770      	bx	lr
	...

08006458 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006458:	b480      	push	{r7}
 800645a:	b085      	sub	sp, #20
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
 8006460:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	4a46      	ldr	r2, [pc, #280]	@ (8006584 <TIM_Base_SetConfig+0x12c>)
 800646c:	4293      	cmp	r3, r2
 800646e:	d013      	beq.n	8006498 <TIM_Base_SetConfig+0x40>
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006476:	d00f      	beq.n	8006498 <TIM_Base_SetConfig+0x40>
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	4a43      	ldr	r2, [pc, #268]	@ (8006588 <TIM_Base_SetConfig+0x130>)
 800647c:	4293      	cmp	r3, r2
 800647e:	d00b      	beq.n	8006498 <TIM_Base_SetConfig+0x40>
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	4a42      	ldr	r2, [pc, #264]	@ (800658c <TIM_Base_SetConfig+0x134>)
 8006484:	4293      	cmp	r3, r2
 8006486:	d007      	beq.n	8006498 <TIM_Base_SetConfig+0x40>
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	4a41      	ldr	r2, [pc, #260]	@ (8006590 <TIM_Base_SetConfig+0x138>)
 800648c:	4293      	cmp	r3, r2
 800648e:	d003      	beq.n	8006498 <TIM_Base_SetConfig+0x40>
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	4a40      	ldr	r2, [pc, #256]	@ (8006594 <TIM_Base_SetConfig+0x13c>)
 8006494:	4293      	cmp	r3, r2
 8006496:	d108      	bne.n	80064aa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800649e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80064a0:	683b      	ldr	r3, [r7, #0]
 80064a2:	685b      	ldr	r3, [r3, #4]
 80064a4:	68fa      	ldr	r2, [r7, #12]
 80064a6:	4313      	orrs	r3, r2
 80064a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	4a35      	ldr	r2, [pc, #212]	@ (8006584 <TIM_Base_SetConfig+0x12c>)
 80064ae:	4293      	cmp	r3, r2
 80064b0:	d02b      	beq.n	800650a <TIM_Base_SetConfig+0xb2>
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80064b8:	d027      	beq.n	800650a <TIM_Base_SetConfig+0xb2>
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	4a32      	ldr	r2, [pc, #200]	@ (8006588 <TIM_Base_SetConfig+0x130>)
 80064be:	4293      	cmp	r3, r2
 80064c0:	d023      	beq.n	800650a <TIM_Base_SetConfig+0xb2>
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	4a31      	ldr	r2, [pc, #196]	@ (800658c <TIM_Base_SetConfig+0x134>)
 80064c6:	4293      	cmp	r3, r2
 80064c8:	d01f      	beq.n	800650a <TIM_Base_SetConfig+0xb2>
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	4a30      	ldr	r2, [pc, #192]	@ (8006590 <TIM_Base_SetConfig+0x138>)
 80064ce:	4293      	cmp	r3, r2
 80064d0:	d01b      	beq.n	800650a <TIM_Base_SetConfig+0xb2>
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	4a2f      	ldr	r2, [pc, #188]	@ (8006594 <TIM_Base_SetConfig+0x13c>)
 80064d6:	4293      	cmp	r3, r2
 80064d8:	d017      	beq.n	800650a <TIM_Base_SetConfig+0xb2>
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	4a2e      	ldr	r2, [pc, #184]	@ (8006598 <TIM_Base_SetConfig+0x140>)
 80064de:	4293      	cmp	r3, r2
 80064e0:	d013      	beq.n	800650a <TIM_Base_SetConfig+0xb2>
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	4a2d      	ldr	r2, [pc, #180]	@ (800659c <TIM_Base_SetConfig+0x144>)
 80064e6:	4293      	cmp	r3, r2
 80064e8:	d00f      	beq.n	800650a <TIM_Base_SetConfig+0xb2>
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	4a2c      	ldr	r2, [pc, #176]	@ (80065a0 <TIM_Base_SetConfig+0x148>)
 80064ee:	4293      	cmp	r3, r2
 80064f0:	d00b      	beq.n	800650a <TIM_Base_SetConfig+0xb2>
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	4a2b      	ldr	r2, [pc, #172]	@ (80065a4 <TIM_Base_SetConfig+0x14c>)
 80064f6:	4293      	cmp	r3, r2
 80064f8:	d007      	beq.n	800650a <TIM_Base_SetConfig+0xb2>
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	4a2a      	ldr	r2, [pc, #168]	@ (80065a8 <TIM_Base_SetConfig+0x150>)
 80064fe:	4293      	cmp	r3, r2
 8006500:	d003      	beq.n	800650a <TIM_Base_SetConfig+0xb2>
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	4a29      	ldr	r2, [pc, #164]	@ (80065ac <TIM_Base_SetConfig+0x154>)
 8006506:	4293      	cmp	r3, r2
 8006508:	d108      	bne.n	800651c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006510:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	68db      	ldr	r3, [r3, #12]
 8006516:	68fa      	ldr	r2, [r7, #12]
 8006518:	4313      	orrs	r3, r2
 800651a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006522:	683b      	ldr	r3, [r7, #0]
 8006524:	695b      	ldr	r3, [r3, #20]
 8006526:	4313      	orrs	r3, r2
 8006528:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	68fa      	ldr	r2, [r7, #12]
 800652e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	689a      	ldr	r2, [r3, #8]
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	681a      	ldr	r2, [r3, #0]
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	4a10      	ldr	r2, [pc, #64]	@ (8006584 <TIM_Base_SetConfig+0x12c>)
 8006544:	4293      	cmp	r3, r2
 8006546:	d003      	beq.n	8006550 <TIM_Base_SetConfig+0xf8>
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	4a12      	ldr	r2, [pc, #72]	@ (8006594 <TIM_Base_SetConfig+0x13c>)
 800654c:	4293      	cmp	r3, r2
 800654e:	d103      	bne.n	8006558 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006550:	683b      	ldr	r3, [r7, #0]
 8006552:	691a      	ldr	r2, [r3, #16]
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2201      	movs	r2, #1
 800655c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	691b      	ldr	r3, [r3, #16]
 8006562:	f003 0301 	and.w	r3, r3, #1
 8006566:	2b01      	cmp	r3, #1
 8006568:	d105      	bne.n	8006576 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	691b      	ldr	r3, [r3, #16]
 800656e:	f023 0201 	bic.w	r2, r3, #1
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	611a      	str	r2, [r3, #16]
  }
}
 8006576:	bf00      	nop
 8006578:	3714      	adds	r7, #20
 800657a:	46bd      	mov	sp, r7
 800657c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006580:	4770      	bx	lr
 8006582:	bf00      	nop
 8006584:	40010000 	.word	0x40010000
 8006588:	40000400 	.word	0x40000400
 800658c:	40000800 	.word	0x40000800
 8006590:	40000c00 	.word	0x40000c00
 8006594:	40010400 	.word	0x40010400
 8006598:	40014000 	.word	0x40014000
 800659c:	40014400 	.word	0x40014400
 80065a0:	40014800 	.word	0x40014800
 80065a4:	40001800 	.word	0x40001800
 80065a8:	40001c00 	.word	0x40001c00
 80065ac:	40002000 	.word	0x40002000

080065b0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80065b0:	b480      	push	{r7}
 80065b2:	b087      	sub	sp, #28
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	60f8      	str	r0, [r7, #12]
 80065b8:	60b9      	str	r1, [r7, #8]
 80065ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	6a1b      	ldr	r3, [r3, #32]
 80065c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	6a1b      	ldr	r3, [r3, #32]
 80065c6:	f023 0201 	bic.w	r2, r3, #1
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	699b      	ldr	r3, [r3, #24]
 80065d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80065d4:	693b      	ldr	r3, [r7, #16]
 80065d6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80065da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	011b      	lsls	r3, r3, #4
 80065e0:	693a      	ldr	r2, [r7, #16]
 80065e2:	4313      	orrs	r3, r2
 80065e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80065e6:	697b      	ldr	r3, [r7, #20]
 80065e8:	f023 030a 	bic.w	r3, r3, #10
 80065ec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80065ee:	697a      	ldr	r2, [r7, #20]
 80065f0:	68bb      	ldr	r3, [r7, #8]
 80065f2:	4313      	orrs	r3, r2
 80065f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	693a      	ldr	r2, [r7, #16]
 80065fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	697a      	ldr	r2, [r7, #20]
 8006600:	621a      	str	r2, [r3, #32]
}
 8006602:	bf00      	nop
 8006604:	371c      	adds	r7, #28
 8006606:	46bd      	mov	sp, r7
 8006608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660c:	4770      	bx	lr

0800660e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800660e:	b480      	push	{r7}
 8006610:	b087      	sub	sp, #28
 8006612:	af00      	add	r7, sp, #0
 8006614:	60f8      	str	r0, [r7, #12]
 8006616:	60b9      	str	r1, [r7, #8]
 8006618:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	6a1b      	ldr	r3, [r3, #32]
 800661e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	6a1b      	ldr	r3, [r3, #32]
 8006624:	f023 0210 	bic.w	r2, r3, #16
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	699b      	ldr	r3, [r3, #24]
 8006630:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006632:	693b      	ldr	r3, [r7, #16]
 8006634:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006638:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	031b      	lsls	r3, r3, #12
 800663e:	693a      	ldr	r2, [r7, #16]
 8006640:	4313      	orrs	r3, r2
 8006642:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006644:	697b      	ldr	r3, [r7, #20]
 8006646:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800664a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800664c:	68bb      	ldr	r3, [r7, #8]
 800664e:	011b      	lsls	r3, r3, #4
 8006650:	697a      	ldr	r2, [r7, #20]
 8006652:	4313      	orrs	r3, r2
 8006654:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	693a      	ldr	r2, [r7, #16]
 800665a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	697a      	ldr	r2, [r7, #20]
 8006660:	621a      	str	r2, [r3, #32]
}
 8006662:	bf00      	nop
 8006664:	371c      	adds	r7, #28
 8006666:	46bd      	mov	sp, r7
 8006668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666c:	4770      	bx	lr

0800666e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800666e:	b480      	push	{r7}
 8006670:	b085      	sub	sp, #20
 8006672:	af00      	add	r7, sp, #0
 8006674:	6078      	str	r0, [r7, #4]
 8006676:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	689b      	ldr	r3, [r3, #8]
 800667c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006684:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006686:	683a      	ldr	r2, [r7, #0]
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	4313      	orrs	r3, r2
 800668c:	f043 0307 	orr.w	r3, r3, #7
 8006690:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	68fa      	ldr	r2, [r7, #12]
 8006696:	609a      	str	r2, [r3, #8]
}
 8006698:	bf00      	nop
 800669a:	3714      	adds	r7, #20
 800669c:	46bd      	mov	sp, r7
 800669e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a2:	4770      	bx	lr

080066a4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80066a4:	b480      	push	{r7}
 80066a6:	b087      	sub	sp, #28
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	60f8      	str	r0, [r7, #12]
 80066ac:	60b9      	str	r1, [r7, #8]
 80066ae:	607a      	str	r2, [r7, #4]
 80066b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	689b      	ldr	r3, [r3, #8]
 80066b6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80066b8:	697b      	ldr	r3, [r7, #20]
 80066ba:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80066be:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	021a      	lsls	r2, r3, #8
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	431a      	orrs	r2, r3
 80066c8:	68bb      	ldr	r3, [r7, #8]
 80066ca:	4313      	orrs	r3, r2
 80066cc:	697a      	ldr	r2, [r7, #20]
 80066ce:	4313      	orrs	r3, r2
 80066d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	697a      	ldr	r2, [r7, #20]
 80066d6:	609a      	str	r2, [r3, #8]
}
 80066d8:	bf00      	nop
 80066da:	371c      	adds	r7, #28
 80066dc:	46bd      	mov	sp, r7
 80066de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e2:	4770      	bx	lr

080066e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80066e4:	b480      	push	{r7}
 80066e6:	b085      	sub	sp, #20
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
 80066ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80066f4:	2b01      	cmp	r3, #1
 80066f6:	d101      	bne.n	80066fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80066f8:	2302      	movs	r3, #2
 80066fa:	e05a      	b.n	80067b2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2201      	movs	r2, #1
 8006700:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2202      	movs	r2, #2
 8006708:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	685b      	ldr	r3, [r3, #4]
 8006712:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	689b      	ldr	r3, [r3, #8]
 800671a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006722:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	68fa      	ldr	r2, [r7, #12]
 800672a:	4313      	orrs	r3, r2
 800672c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	68fa      	ldr	r2, [r7, #12]
 8006734:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	4a21      	ldr	r2, [pc, #132]	@ (80067c0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800673c:	4293      	cmp	r3, r2
 800673e:	d022      	beq.n	8006786 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006748:	d01d      	beq.n	8006786 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	4a1d      	ldr	r2, [pc, #116]	@ (80067c4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006750:	4293      	cmp	r3, r2
 8006752:	d018      	beq.n	8006786 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	4a1b      	ldr	r2, [pc, #108]	@ (80067c8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800675a:	4293      	cmp	r3, r2
 800675c:	d013      	beq.n	8006786 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	4a1a      	ldr	r2, [pc, #104]	@ (80067cc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006764:	4293      	cmp	r3, r2
 8006766:	d00e      	beq.n	8006786 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	4a18      	ldr	r2, [pc, #96]	@ (80067d0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800676e:	4293      	cmp	r3, r2
 8006770:	d009      	beq.n	8006786 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	4a17      	ldr	r2, [pc, #92]	@ (80067d4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006778:	4293      	cmp	r3, r2
 800677a:	d004      	beq.n	8006786 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	4a15      	ldr	r2, [pc, #84]	@ (80067d8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006782:	4293      	cmp	r3, r2
 8006784:	d10c      	bne.n	80067a0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006786:	68bb      	ldr	r3, [r7, #8]
 8006788:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800678c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800678e:	683b      	ldr	r3, [r7, #0]
 8006790:	685b      	ldr	r3, [r3, #4]
 8006792:	68ba      	ldr	r2, [r7, #8]
 8006794:	4313      	orrs	r3, r2
 8006796:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	68ba      	ldr	r2, [r7, #8]
 800679e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2201      	movs	r2, #1
 80067a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2200      	movs	r2, #0
 80067ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80067b0:	2300      	movs	r3, #0
}
 80067b2:	4618      	mov	r0, r3
 80067b4:	3714      	adds	r7, #20
 80067b6:	46bd      	mov	sp, r7
 80067b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067bc:	4770      	bx	lr
 80067be:	bf00      	nop
 80067c0:	40010000 	.word	0x40010000
 80067c4:	40000400 	.word	0x40000400
 80067c8:	40000800 	.word	0x40000800
 80067cc:	40000c00 	.word	0x40000c00
 80067d0:	40010400 	.word	0x40010400
 80067d4:	40014000 	.word	0x40014000
 80067d8:	40001800 	.word	0x40001800

080067dc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80067dc:	b480      	push	{r7}
 80067de:	b083      	sub	sp, #12
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80067e4:	bf00      	nop
 80067e6:	370c      	adds	r7, #12
 80067e8:	46bd      	mov	sp, r7
 80067ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ee:	4770      	bx	lr

080067f0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80067f0:	b480      	push	{r7}
 80067f2:	b083      	sub	sp, #12
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80067f8:	bf00      	nop
 80067fa:	370c      	adds	r7, #12
 80067fc:	46bd      	mov	sp, r7
 80067fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006802:	4770      	bx	lr

08006804 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006804:	b084      	sub	sp, #16
 8006806:	b580      	push	{r7, lr}
 8006808:	b084      	sub	sp, #16
 800680a:	af00      	add	r7, sp, #0
 800680c:	6078      	str	r0, [r7, #4]
 800680e:	f107 001c 	add.w	r0, r7, #28
 8006812:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006816:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800681a:	2b01      	cmp	r3, #1
 800681c:	d123      	bne.n	8006866 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006822:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	68db      	ldr	r3, [r3, #12]
 800682e:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8006832:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006836:	687a      	ldr	r2, [r7, #4]
 8006838:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	68db      	ldr	r3, [r3, #12]
 800683e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006846:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800684a:	2b01      	cmp	r3, #1
 800684c:	d105      	bne.n	800685a <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	68db      	ldr	r3, [r3, #12]
 8006852:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800685a:	6878      	ldr	r0, [r7, #4]
 800685c:	f001 fae8 	bl	8007e30 <USB_CoreReset>
 8006860:	4603      	mov	r3, r0
 8006862:	73fb      	strb	r3, [r7, #15]
 8006864:	e01b      	b.n	800689e <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	68db      	ldr	r3, [r3, #12]
 800686a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006872:	6878      	ldr	r0, [r7, #4]
 8006874:	f001 fadc 	bl	8007e30 <USB_CoreReset>
 8006878:	4603      	mov	r3, r0
 800687a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800687c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006880:	2b00      	cmp	r3, #0
 8006882:	d106      	bne.n	8006892 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006888:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	639a      	str	r2, [r3, #56]	@ 0x38
 8006890:	e005      	b.n	800689e <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006896:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800689e:	7fbb      	ldrb	r3, [r7, #30]
 80068a0:	2b01      	cmp	r3, #1
 80068a2:	d10b      	bne.n	80068bc <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	689b      	ldr	r3, [r3, #8]
 80068a8:	f043 0206 	orr.w	r2, r3, #6
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	689b      	ldr	r3, [r3, #8]
 80068b4:	f043 0220 	orr.w	r2, r3, #32
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80068bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80068be:	4618      	mov	r0, r3
 80068c0:	3710      	adds	r7, #16
 80068c2:	46bd      	mov	sp, r7
 80068c4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80068c8:	b004      	add	sp, #16
 80068ca:	4770      	bx	lr

080068cc <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80068cc:	b480      	push	{r7}
 80068ce:	b087      	sub	sp, #28
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	60f8      	str	r0, [r7, #12]
 80068d4:	60b9      	str	r1, [r7, #8]
 80068d6:	4613      	mov	r3, r2
 80068d8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80068da:	79fb      	ldrb	r3, [r7, #7]
 80068dc:	2b02      	cmp	r3, #2
 80068de:	d165      	bne.n	80069ac <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80068e0:	68bb      	ldr	r3, [r7, #8]
 80068e2:	4a41      	ldr	r2, [pc, #260]	@ (80069e8 <USB_SetTurnaroundTime+0x11c>)
 80068e4:	4293      	cmp	r3, r2
 80068e6:	d906      	bls.n	80068f6 <USB_SetTurnaroundTime+0x2a>
 80068e8:	68bb      	ldr	r3, [r7, #8]
 80068ea:	4a40      	ldr	r2, [pc, #256]	@ (80069ec <USB_SetTurnaroundTime+0x120>)
 80068ec:	4293      	cmp	r3, r2
 80068ee:	d202      	bcs.n	80068f6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80068f0:	230f      	movs	r3, #15
 80068f2:	617b      	str	r3, [r7, #20]
 80068f4:	e062      	b.n	80069bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80068f6:	68bb      	ldr	r3, [r7, #8]
 80068f8:	4a3c      	ldr	r2, [pc, #240]	@ (80069ec <USB_SetTurnaroundTime+0x120>)
 80068fa:	4293      	cmp	r3, r2
 80068fc:	d306      	bcc.n	800690c <USB_SetTurnaroundTime+0x40>
 80068fe:	68bb      	ldr	r3, [r7, #8]
 8006900:	4a3b      	ldr	r2, [pc, #236]	@ (80069f0 <USB_SetTurnaroundTime+0x124>)
 8006902:	4293      	cmp	r3, r2
 8006904:	d202      	bcs.n	800690c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8006906:	230e      	movs	r3, #14
 8006908:	617b      	str	r3, [r7, #20]
 800690a:	e057      	b.n	80069bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800690c:	68bb      	ldr	r3, [r7, #8]
 800690e:	4a38      	ldr	r2, [pc, #224]	@ (80069f0 <USB_SetTurnaroundTime+0x124>)
 8006910:	4293      	cmp	r3, r2
 8006912:	d306      	bcc.n	8006922 <USB_SetTurnaroundTime+0x56>
 8006914:	68bb      	ldr	r3, [r7, #8]
 8006916:	4a37      	ldr	r2, [pc, #220]	@ (80069f4 <USB_SetTurnaroundTime+0x128>)
 8006918:	4293      	cmp	r3, r2
 800691a:	d202      	bcs.n	8006922 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800691c:	230d      	movs	r3, #13
 800691e:	617b      	str	r3, [r7, #20]
 8006920:	e04c      	b.n	80069bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006922:	68bb      	ldr	r3, [r7, #8]
 8006924:	4a33      	ldr	r2, [pc, #204]	@ (80069f4 <USB_SetTurnaroundTime+0x128>)
 8006926:	4293      	cmp	r3, r2
 8006928:	d306      	bcc.n	8006938 <USB_SetTurnaroundTime+0x6c>
 800692a:	68bb      	ldr	r3, [r7, #8]
 800692c:	4a32      	ldr	r2, [pc, #200]	@ (80069f8 <USB_SetTurnaroundTime+0x12c>)
 800692e:	4293      	cmp	r3, r2
 8006930:	d802      	bhi.n	8006938 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8006932:	230c      	movs	r3, #12
 8006934:	617b      	str	r3, [r7, #20]
 8006936:	e041      	b.n	80069bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006938:	68bb      	ldr	r3, [r7, #8]
 800693a:	4a2f      	ldr	r2, [pc, #188]	@ (80069f8 <USB_SetTurnaroundTime+0x12c>)
 800693c:	4293      	cmp	r3, r2
 800693e:	d906      	bls.n	800694e <USB_SetTurnaroundTime+0x82>
 8006940:	68bb      	ldr	r3, [r7, #8]
 8006942:	4a2e      	ldr	r2, [pc, #184]	@ (80069fc <USB_SetTurnaroundTime+0x130>)
 8006944:	4293      	cmp	r3, r2
 8006946:	d802      	bhi.n	800694e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006948:	230b      	movs	r3, #11
 800694a:	617b      	str	r3, [r7, #20]
 800694c:	e036      	b.n	80069bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800694e:	68bb      	ldr	r3, [r7, #8]
 8006950:	4a2a      	ldr	r2, [pc, #168]	@ (80069fc <USB_SetTurnaroundTime+0x130>)
 8006952:	4293      	cmp	r3, r2
 8006954:	d906      	bls.n	8006964 <USB_SetTurnaroundTime+0x98>
 8006956:	68bb      	ldr	r3, [r7, #8]
 8006958:	4a29      	ldr	r2, [pc, #164]	@ (8006a00 <USB_SetTurnaroundTime+0x134>)
 800695a:	4293      	cmp	r3, r2
 800695c:	d802      	bhi.n	8006964 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800695e:	230a      	movs	r3, #10
 8006960:	617b      	str	r3, [r7, #20]
 8006962:	e02b      	b.n	80069bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006964:	68bb      	ldr	r3, [r7, #8]
 8006966:	4a26      	ldr	r2, [pc, #152]	@ (8006a00 <USB_SetTurnaroundTime+0x134>)
 8006968:	4293      	cmp	r3, r2
 800696a:	d906      	bls.n	800697a <USB_SetTurnaroundTime+0xae>
 800696c:	68bb      	ldr	r3, [r7, #8]
 800696e:	4a25      	ldr	r2, [pc, #148]	@ (8006a04 <USB_SetTurnaroundTime+0x138>)
 8006970:	4293      	cmp	r3, r2
 8006972:	d202      	bcs.n	800697a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006974:	2309      	movs	r3, #9
 8006976:	617b      	str	r3, [r7, #20]
 8006978:	e020      	b.n	80069bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800697a:	68bb      	ldr	r3, [r7, #8]
 800697c:	4a21      	ldr	r2, [pc, #132]	@ (8006a04 <USB_SetTurnaroundTime+0x138>)
 800697e:	4293      	cmp	r3, r2
 8006980:	d306      	bcc.n	8006990 <USB_SetTurnaroundTime+0xc4>
 8006982:	68bb      	ldr	r3, [r7, #8]
 8006984:	4a20      	ldr	r2, [pc, #128]	@ (8006a08 <USB_SetTurnaroundTime+0x13c>)
 8006986:	4293      	cmp	r3, r2
 8006988:	d802      	bhi.n	8006990 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800698a:	2308      	movs	r3, #8
 800698c:	617b      	str	r3, [r7, #20]
 800698e:	e015      	b.n	80069bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006990:	68bb      	ldr	r3, [r7, #8]
 8006992:	4a1d      	ldr	r2, [pc, #116]	@ (8006a08 <USB_SetTurnaroundTime+0x13c>)
 8006994:	4293      	cmp	r3, r2
 8006996:	d906      	bls.n	80069a6 <USB_SetTurnaroundTime+0xda>
 8006998:	68bb      	ldr	r3, [r7, #8]
 800699a:	4a1c      	ldr	r2, [pc, #112]	@ (8006a0c <USB_SetTurnaroundTime+0x140>)
 800699c:	4293      	cmp	r3, r2
 800699e:	d202      	bcs.n	80069a6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80069a0:	2307      	movs	r3, #7
 80069a2:	617b      	str	r3, [r7, #20]
 80069a4:	e00a      	b.n	80069bc <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80069a6:	2306      	movs	r3, #6
 80069a8:	617b      	str	r3, [r7, #20]
 80069aa:	e007      	b.n	80069bc <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80069ac:	79fb      	ldrb	r3, [r7, #7]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d102      	bne.n	80069b8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80069b2:	2309      	movs	r3, #9
 80069b4:	617b      	str	r3, [r7, #20]
 80069b6:	e001      	b.n	80069bc <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80069b8:	2309      	movs	r3, #9
 80069ba:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	68db      	ldr	r3, [r3, #12]
 80069c0:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	68da      	ldr	r2, [r3, #12]
 80069cc:	697b      	ldr	r3, [r7, #20]
 80069ce:	029b      	lsls	r3, r3, #10
 80069d0:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 80069d4:	431a      	orrs	r2, r3
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80069da:	2300      	movs	r3, #0
}
 80069dc:	4618      	mov	r0, r3
 80069de:	371c      	adds	r7, #28
 80069e0:	46bd      	mov	sp, r7
 80069e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e6:	4770      	bx	lr
 80069e8:	00d8acbf 	.word	0x00d8acbf
 80069ec:	00e4e1c0 	.word	0x00e4e1c0
 80069f0:	00f42400 	.word	0x00f42400
 80069f4:	01067380 	.word	0x01067380
 80069f8:	011a499f 	.word	0x011a499f
 80069fc:	01312cff 	.word	0x01312cff
 8006a00:	014ca43f 	.word	0x014ca43f
 8006a04:	016e3600 	.word	0x016e3600
 8006a08:	01a6ab1f 	.word	0x01a6ab1f
 8006a0c:	01e84800 	.word	0x01e84800

08006a10 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006a10:	b480      	push	{r7}
 8006a12:	b083      	sub	sp, #12
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	689b      	ldr	r3, [r3, #8]
 8006a1c:	f043 0201 	orr.w	r2, r3, #1
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006a24:	2300      	movs	r3, #0
}
 8006a26:	4618      	mov	r0, r3
 8006a28:	370c      	adds	r7, #12
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a30:	4770      	bx	lr

08006a32 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006a32:	b480      	push	{r7}
 8006a34:	b083      	sub	sp, #12
 8006a36:	af00      	add	r7, sp, #0
 8006a38:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	689b      	ldr	r3, [r3, #8]
 8006a3e:	f023 0201 	bic.w	r2, r3, #1
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006a46:	2300      	movs	r3, #0
}
 8006a48:	4618      	mov	r0, r3
 8006a4a:	370c      	adds	r7, #12
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a52:	4770      	bx	lr

08006a54 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	b084      	sub	sp, #16
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
 8006a5c:	460b      	mov	r3, r1
 8006a5e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006a60:	2300      	movs	r3, #0
 8006a62:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	68db      	ldr	r3, [r3, #12]
 8006a68:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006a70:	78fb      	ldrb	r3, [r7, #3]
 8006a72:	2b01      	cmp	r3, #1
 8006a74:	d115      	bne.n	8006aa2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	68db      	ldr	r3, [r3, #12]
 8006a7a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006a82:	200a      	movs	r0, #10
 8006a84:	f7fb ffd0 	bl	8002a28 <HAL_Delay>
      ms += 10U;
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	330a      	adds	r3, #10
 8006a8c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006a8e:	6878      	ldr	r0, [r7, #4]
 8006a90:	f001 f93f 	bl	8007d12 <USB_GetMode>
 8006a94:	4603      	mov	r3, r0
 8006a96:	2b01      	cmp	r3, #1
 8006a98:	d01e      	beq.n	8006ad8 <USB_SetCurrentMode+0x84>
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	2bc7      	cmp	r3, #199	@ 0xc7
 8006a9e:	d9f0      	bls.n	8006a82 <USB_SetCurrentMode+0x2e>
 8006aa0:	e01a      	b.n	8006ad8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006aa2:	78fb      	ldrb	r3, [r7, #3]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d115      	bne.n	8006ad4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	68db      	ldr	r3, [r3, #12]
 8006aac:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006ab4:	200a      	movs	r0, #10
 8006ab6:	f7fb ffb7 	bl	8002a28 <HAL_Delay>
      ms += 10U;
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	330a      	adds	r3, #10
 8006abe:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006ac0:	6878      	ldr	r0, [r7, #4]
 8006ac2:	f001 f926 	bl	8007d12 <USB_GetMode>
 8006ac6:	4603      	mov	r3, r0
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d005      	beq.n	8006ad8 <USB_SetCurrentMode+0x84>
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	2bc7      	cmp	r3, #199	@ 0xc7
 8006ad0:	d9f0      	bls.n	8006ab4 <USB_SetCurrentMode+0x60>
 8006ad2:	e001      	b.n	8006ad8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006ad4:	2301      	movs	r3, #1
 8006ad6:	e005      	b.n	8006ae4 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	2bc8      	cmp	r3, #200	@ 0xc8
 8006adc:	d101      	bne.n	8006ae2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006ade:	2301      	movs	r3, #1
 8006ae0:	e000      	b.n	8006ae4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006ae2:	2300      	movs	r3, #0
}
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	3710      	adds	r7, #16
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	bd80      	pop	{r7, pc}

08006aec <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006aec:	b084      	sub	sp, #16
 8006aee:	b580      	push	{r7, lr}
 8006af0:	b086      	sub	sp, #24
 8006af2:	af00      	add	r7, sp, #0
 8006af4:	6078      	str	r0, [r7, #4]
 8006af6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8006afa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006afe:	2300      	movs	r3, #0
 8006b00:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006b06:	2300      	movs	r3, #0
 8006b08:	613b      	str	r3, [r7, #16]
 8006b0a:	e009      	b.n	8006b20 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006b0c:	687a      	ldr	r2, [r7, #4]
 8006b0e:	693b      	ldr	r3, [r7, #16]
 8006b10:	3340      	adds	r3, #64	@ 0x40
 8006b12:	009b      	lsls	r3, r3, #2
 8006b14:	4413      	add	r3, r2
 8006b16:	2200      	movs	r2, #0
 8006b18:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006b1a:	693b      	ldr	r3, [r7, #16]
 8006b1c:	3301      	adds	r3, #1
 8006b1e:	613b      	str	r3, [r7, #16]
 8006b20:	693b      	ldr	r3, [r7, #16]
 8006b22:	2b0e      	cmp	r3, #14
 8006b24:	d9f2      	bls.n	8006b0c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006b26:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d11c      	bne.n	8006b68 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b34:	685b      	ldr	r3, [r3, #4]
 8006b36:	68fa      	ldr	r2, [r7, #12]
 8006b38:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006b3c:	f043 0302 	orr.w	r3, r3, #2
 8006b40:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b46:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b52:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b5e:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	639a      	str	r2, [r3, #56]	@ 0x38
 8006b66:	e00b      	b.n	8006b80 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b6c:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b78:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006b86:	461a      	mov	r2, r3
 8006b88:	2300      	movs	r3, #0
 8006b8a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006b8c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8006b90:	2b01      	cmp	r3, #1
 8006b92:	d10d      	bne.n	8006bb0 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006b94:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d104      	bne.n	8006ba6 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006b9c:	2100      	movs	r1, #0
 8006b9e:	6878      	ldr	r0, [r7, #4]
 8006ba0:	f000 f968 	bl	8006e74 <USB_SetDevSpeed>
 8006ba4:	e008      	b.n	8006bb8 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006ba6:	2101      	movs	r1, #1
 8006ba8:	6878      	ldr	r0, [r7, #4]
 8006baa:	f000 f963 	bl	8006e74 <USB_SetDevSpeed>
 8006bae:	e003      	b.n	8006bb8 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006bb0:	2103      	movs	r1, #3
 8006bb2:	6878      	ldr	r0, [r7, #4]
 8006bb4:	f000 f95e 	bl	8006e74 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006bb8:	2110      	movs	r1, #16
 8006bba:	6878      	ldr	r0, [r7, #4]
 8006bbc:	f000 f8fa 	bl	8006db4 <USB_FlushTxFifo>
 8006bc0:	4603      	mov	r3, r0
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d001      	beq.n	8006bca <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8006bc6:	2301      	movs	r3, #1
 8006bc8:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006bca:	6878      	ldr	r0, [r7, #4]
 8006bcc:	f000 f924 	bl	8006e18 <USB_FlushRxFifo>
 8006bd0:	4603      	mov	r3, r0
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d001      	beq.n	8006bda <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8006bd6:	2301      	movs	r3, #1
 8006bd8:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006be0:	461a      	mov	r2, r3
 8006be2:	2300      	movs	r3, #0
 8006be4:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006bec:	461a      	mov	r2, r3
 8006bee:	2300      	movs	r3, #0
 8006bf0:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006bf8:	461a      	mov	r2, r3
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006bfe:	2300      	movs	r3, #0
 8006c00:	613b      	str	r3, [r7, #16]
 8006c02:	e043      	b.n	8006c8c <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006c04:	693b      	ldr	r3, [r7, #16]
 8006c06:	015a      	lsls	r2, r3, #5
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	4413      	add	r3, r2
 8006c0c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006c16:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006c1a:	d118      	bne.n	8006c4e <USB_DevInit+0x162>
    {
      if (i == 0U)
 8006c1c:	693b      	ldr	r3, [r7, #16]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d10a      	bne.n	8006c38 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006c22:	693b      	ldr	r3, [r7, #16]
 8006c24:	015a      	lsls	r2, r3, #5
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	4413      	add	r3, r2
 8006c2a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c2e:	461a      	mov	r2, r3
 8006c30:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006c34:	6013      	str	r3, [r2, #0]
 8006c36:	e013      	b.n	8006c60 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006c38:	693b      	ldr	r3, [r7, #16]
 8006c3a:	015a      	lsls	r2, r3, #5
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	4413      	add	r3, r2
 8006c40:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c44:	461a      	mov	r2, r3
 8006c46:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006c4a:	6013      	str	r3, [r2, #0]
 8006c4c:	e008      	b.n	8006c60 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006c4e:	693b      	ldr	r3, [r7, #16]
 8006c50:	015a      	lsls	r2, r3, #5
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	4413      	add	r3, r2
 8006c56:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c5a:	461a      	mov	r2, r3
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006c60:	693b      	ldr	r3, [r7, #16]
 8006c62:	015a      	lsls	r2, r3, #5
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	4413      	add	r3, r2
 8006c68:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c6c:	461a      	mov	r2, r3
 8006c6e:	2300      	movs	r3, #0
 8006c70:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006c72:	693b      	ldr	r3, [r7, #16]
 8006c74:	015a      	lsls	r2, r3, #5
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	4413      	add	r3, r2
 8006c7a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c7e:	461a      	mov	r2, r3
 8006c80:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006c84:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006c86:	693b      	ldr	r3, [r7, #16]
 8006c88:	3301      	adds	r3, #1
 8006c8a:	613b      	str	r3, [r7, #16]
 8006c8c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006c90:	461a      	mov	r2, r3
 8006c92:	693b      	ldr	r3, [r7, #16]
 8006c94:	4293      	cmp	r3, r2
 8006c96:	d3b5      	bcc.n	8006c04 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006c98:	2300      	movs	r3, #0
 8006c9a:	613b      	str	r3, [r7, #16]
 8006c9c:	e043      	b.n	8006d26 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006c9e:	693b      	ldr	r3, [r7, #16]
 8006ca0:	015a      	lsls	r2, r3, #5
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	4413      	add	r3, r2
 8006ca6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006cb0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006cb4:	d118      	bne.n	8006ce8 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8006cb6:	693b      	ldr	r3, [r7, #16]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d10a      	bne.n	8006cd2 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006cbc:	693b      	ldr	r3, [r7, #16]
 8006cbe:	015a      	lsls	r2, r3, #5
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	4413      	add	r3, r2
 8006cc4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006cc8:	461a      	mov	r2, r3
 8006cca:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006cce:	6013      	str	r3, [r2, #0]
 8006cd0:	e013      	b.n	8006cfa <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006cd2:	693b      	ldr	r3, [r7, #16]
 8006cd4:	015a      	lsls	r2, r3, #5
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	4413      	add	r3, r2
 8006cda:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006cde:	461a      	mov	r2, r3
 8006ce0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006ce4:	6013      	str	r3, [r2, #0]
 8006ce6:	e008      	b.n	8006cfa <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006ce8:	693b      	ldr	r3, [r7, #16]
 8006cea:	015a      	lsls	r2, r3, #5
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	4413      	add	r3, r2
 8006cf0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006cf4:	461a      	mov	r2, r3
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006cfa:	693b      	ldr	r3, [r7, #16]
 8006cfc:	015a      	lsls	r2, r3, #5
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	4413      	add	r3, r2
 8006d02:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d06:	461a      	mov	r2, r3
 8006d08:	2300      	movs	r3, #0
 8006d0a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006d0c:	693b      	ldr	r3, [r7, #16]
 8006d0e:	015a      	lsls	r2, r3, #5
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	4413      	add	r3, r2
 8006d14:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d18:	461a      	mov	r2, r3
 8006d1a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006d1e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006d20:	693b      	ldr	r3, [r7, #16]
 8006d22:	3301      	adds	r3, #1
 8006d24:	613b      	str	r3, [r7, #16]
 8006d26:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006d2a:	461a      	mov	r2, r3
 8006d2c:	693b      	ldr	r3, [r7, #16]
 8006d2e:	4293      	cmp	r3, r2
 8006d30:	d3b5      	bcc.n	8006c9e <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006d38:	691b      	ldr	r3, [r3, #16]
 8006d3a:	68fa      	ldr	r2, [r7, #12]
 8006d3c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006d40:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006d44:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	2200      	movs	r2, #0
 8006d4a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8006d52:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006d54:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d105      	bne.n	8006d68 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	699b      	ldr	r3, [r3, #24]
 8006d60:	f043 0210 	orr.w	r2, r3, #16
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	699a      	ldr	r2, [r3, #24]
 8006d6c:	4b10      	ldr	r3, [pc, #64]	@ (8006db0 <USB_DevInit+0x2c4>)
 8006d6e:	4313      	orrs	r3, r2
 8006d70:	687a      	ldr	r2, [r7, #4]
 8006d72:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006d74:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d005      	beq.n	8006d88 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	699b      	ldr	r3, [r3, #24]
 8006d80:	f043 0208 	orr.w	r2, r3, #8
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006d88:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006d8c:	2b01      	cmp	r3, #1
 8006d8e:	d107      	bne.n	8006da0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	699b      	ldr	r3, [r3, #24]
 8006d94:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006d98:	f043 0304 	orr.w	r3, r3, #4
 8006d9c:	687a      	ldr	r2, [r7, #4]
 8006d9e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006da0:	7dfb      	ldrb	r3, [r7, #23]
}
 8006da2:	4618      	mov	r0, r3
 8006da4:	3718      	adds	r7, #24
 8006da6:	46bd      	mov	sp, r7
 8006da8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006dac:	b004      	add	sp, #16
 8006dae:	4770      	bx	lr
 8006db0:	803c3800 	.word	0x803c3800

08006db4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006db4:	b480      	push	{r7}
 8006db6:	b085      	sub	sp, #20
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	6078      	str	r0, [r7, #4]
 8006dbc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006dbe:	2300      	movs	r3, #0
 8006dc0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	3301      	adds	r3, #1
 8006dc6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006dce:	d901      	bls.n	8006dd4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006dd0:	2303      	movs	r3, #3
 8006dd2:	e01b      	b.n	8006e0c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	691b      	ldr	r3, [r3, #16]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	daf2      	bge.n	8006dc2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006ddc:	2300      	movs	r3, #0
 8006dde:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006de0:	683b      	ldr	r3, [r7, #0]
 8006de2:	019b      	lsls	r3, r3, #6
 8006de4:	f043 0220 	orr.w	r2, r3, #32
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	3301      	adds	r3, #1
 8006df0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006df8:	d901      	bls.n	8006dfe <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006dfa:	2303      	movs	r3, #3
 8006dfc:	e006      	b.n	8006e0c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	691b      	ldr	r3, [r3, #16]
 8006e02:	f003 0320 	and.w	r3, r3, #32
 8006e06:	2b20      	cmp	r3, #32
 8006e08:	d0f0      	beq.n	8006dec <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006e0a:	2300      	movs	r3, #0
}
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	3714      	adds	r7, #20
 8006e10:	46bd      	mov	sp, r7
 8006e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e16:	4770      	bx	lr

08006e18 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006e18:	b480      	push	{r7}
 8006e1a:	b085      	sub	sp, #20
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006e20:	2300      	movs	r3, #0
 8006e22:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	3301      	adds	r3, #1
 8006e28:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006e30:	d901      	bls.n	8006e36 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006e32:	2303      	movs	r3, #3
 8006e34:	e018      	b.n	8006e68 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	691b      	ldr	r3, [r3, #16]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	daf2      	bge.n	8006e24 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006e3e:	2300      	movs	r3, #0
 8006e40:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	2210      	movs	r2, #16
 8006e46:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	3301      	adds	r3, #1
 8006e4c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006e54:	d901      	bls.n	8006e5a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006e56:	2303      	movs	r3, #3
 8006e58:	e006      	b.n	8006e68 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	691b      	ldr	r3, [r3, #16]
 8006e5e:	f003 0310 	and.w	r3, r3, #16
 8006e62:	2b10      	cmp	r3, #16
 8006e64:	d0f0      	beq.n	8006e48 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006e66:	2300      	movs	r3, #0
}
 8006e68:	4618      	mov	r0, r3
 8006e6a:	3714      	adds	r7, #20
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e72:	4770      	bx	lr

08006e74 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006e74:	b480      	push	{r7}
 8006e76:	b085      	sub	sp, #20
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
 8006e7c:	460b      	mov	r3, r1
 8006e7e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006e8a:	681a      	ldr	r2, [r3, #0]
 8006e8c:	78fb      	ldrb	r3, [r7, #3]
 8006e8e:	68f9      	ldr	r1, [r7, #12]
 8006e90:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006e94:	4313      	orrs	r3, r2
 8006e96:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006e98:	2300      	movs	r3, #0
}
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	3714      	adds	r7, #20
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea4:	4770      	bx	lr

08006ea6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8006ea6:	b480      	push	{r7}
 8006ea8:	b087      	sub	sp, #28
 8006eaa:	af00      	add	r7, sp, #0
 8006eac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006eb2:	693b      	ldr	r3, [r7, #16]
 8006eb4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006eb8:	689b      	ldr	r3, [r3, #8]
 8006eba:	f003 0306 	and.w	r3, r3, #6
 8006ebe:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d102      	bne.n	8006ecc <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	75fb      	strb	r3, [r7, #23]
 8006eca:	e00a      	b.n	8006ee2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	2b02      	cmp	r3, #2
 8006ed0:	d002      	beq.n	8006ed8 <USB_GetDevSpeed+0x32>
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	2b06      	cmp	r3, #6
 8006ed6:	d102      	bne.n	8006ede <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006ed8:	2302      	movs	r3, #2
 8006eda:	75fb      	strb	r3, [r7, #23]
 8006edc:	e001      	b.n	8006ee2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8006ede:	230f      	movs	r3, #15
 8006ee0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8006ee2:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	371c      	adds	r7, #28
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eee:	4770      	bx	lr

08006ef0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006ef0:	b480      	push	{r7}
 8006ef2:	b085      	sub	sp, #20
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	6078      	str	r0, [r7, #4]
 8006ef8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	781b      	ldrb	r3, [r3, #0]
 8006f02:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006f04:	683b      	ldr	r3, [r7, #0]
 8006f06:	785b      	ldrb	r3, [r3, #1]
 8006f08:	2b01      	cmp	r3, #1
 8006f0a:	d13a      	bne.n	8006f82 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006f12:	69da      	ldr	r2, [r3, #28]
 8006f14:	683b      	ldr	r3, [r7, #0]
 8006f16:	781b      	ldrb	r3, [r3, #0]
 8006f18:	f003 030f 	and.w	r3, r3, #15
 8006f1c:	2101      	movs	r1, #1
 8006f1e:	fa01 f303 	lsl.w	r3, r1, r3
 8006f22:	b29b      	uxth	r3, r3
 8006f24:	68f9      	ldr	r1, [r7, #12]
 8006f26:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006f2a:	4313      	orrs	r3, r2
 8006f2c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006f2e:	68bb      	ldr	r3, [r7, #8]
 8006f30:	015a      	lsls	r2, r3, #5
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	4413      	add	r3, r2
 8006f36:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d155      	bne.n	8006ff0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006f44:	68bb      	ldr	r3, [r7, #8]
 8006f46:	015a      	lsls	r2, r3, #5
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	4413      	add	r3, r2
 8006f4c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f50:	681a      	ldr	r2, [r3, #0]
 8006f52:	683b      	ldr	r3, [r7, #0]
 8006f54:	689b      	ldr	r3, [r3, #8]
 8006f56:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006f5a:	683b      	ldr	r3, [r7, #0]
 8006f5c:	791b      	ldrb	r3, [r3, #4]
 8006f5e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006f60:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006f62:	68bb      	ldr	r3, [r7, #8]
 8006f64:	059b      	lsls	r3, r3, #22
 8006f66:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006f68:	4313      	orrs	r3, r2
 8006f6a:	68ba      	ldr	r2, [r7, #8]
 8006f6c:	0151      	lsls	r1, r2, #5
 8006f6e:	68fa      	ldr	r2, [r7, #12]
 8006f70:	440a      	add	r2, r1
 8006f72:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006f76:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006f7a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006f7e:	6013      	str	r3, [r2, #0]
 8006f80:	e036      	b.n	8006ff0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006f88:	69da      	ldr	r2, [r3, #28]
 8006f8a:	683b      	ldr	r3, [r7, #0]
 8006f8c:	781b      	ldrb	r3, [r3, #0]
 8006f8e:	f003 030f 	and.w	r3, r3, #15
 8006f92:	2101      	movs	r1, #1
 8006f94:	fa01 f303 	lsl.w	r3, r1, r3
 8006f98:	041b      	lsls	r3, r3, #16
 8006f9a:	68f9      	ldr	r1, [r7, #12]
 8006f9c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006fa0:	4313      	orrs	r3, r2
 8006fa2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006fa4:	68bb      	ldr	r3, [r7, #8]
 8006fa6:	015a      	lsls	r2, r3, #5
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	4413      	add	r3, r2
 8006fac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d11a      	bne.n	8006ff0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006fba:	68bb      	ldr	r3, [r7, #8]
 8006fbc:	015a      	lsls	r2, r3, #5
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	4413      	add	r3, r2
 8006fc2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006fc6:	681a      	ldr	r2, [r3, #0]
 8006fc8:	683b      	ldr	r3, [r7, #0]
 8006fca:	689b      	ldr	r3, [r3, #8]
 8006fcc:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006fd0:	683b      	ldr	r3, [r7, #0]
 8006fd2:	791b      	ldrb	r3, [r3, #4]
 8006fd4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006fd6:	430b      	orrs	r3, r1
 8006fd8:	4313      	orrs	r3, r2
 8006fda:	68ba      	ldr	r2, [r7, #8]
 8006fdc:	0151      	lsls	r1, r2, #5
 8006fde:	68fa      	ldr	r2, [r7, #12]
 8006fe0:	440a      	add	r2, r1
 8006fe2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006fe6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006fea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006fee:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006ff0:	2300      	movs	r3, #0
}
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	3714      	adds	r7, #20
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffc:	4770      	bx	lr
	...

08007000 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007000:	b480      	push	{r7}
 8007002:	b085      	sub	sp, #20
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]
 8007008:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800700e:	683b      	ldr	r3, [r7, #0]
 8007010:	781b      	ldrb	r3, [r3, #0]
 8007012:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8007014:	683b      	ldr	r3, [r7, #0]
 8007016:	785b      	ldrb	r3, [r3, #1]
 8007018:	2b01      	cmp	r3, #1
 800701a:	d161      	bne.n	80070e0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800701c:	68bb      	ldr	r3, [r7, #8]
 800701e:	015a      	lsls	r2, r3, #5
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	4413      	add	r3, r2
 8007024:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800702e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007032:	d11f      	bne.n	8007074 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007034:	68bb      	ldr	r3, [r7, #8]
 8007036:	015a      	lsls	r2, r3, #5
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	4413      	add	r3, r2
 800703c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	68ba      	ldr	r2, [r7, #8]
 8007044:	0151      	lsls	r1, r2, #5
 8007046:	68fa      	ldr	r2, [r7, #12]
 8007048:	440a      	add	r2, r1
 800704a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800704e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007052:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8007054:	68bb      	ldr	r3, [r7, #8]
 8007056:	015a      	lsls	r2, r3, #5
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	4413      	add	r3, r2
 800705c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	68ba      	ldr	r2, [r7, #8]
 8007064:	0151      	lsls	r1, r2, #5
 8007066:	68fa      	ldr	r2, [r7, #12]
 8007068:	440a      	add	r2, r1
 800706a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800706e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007072:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800707a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800707c:	683b      	ldr	r3, [r7, #0]
 800707e:	781b      	ldrb	r3, [r3, #0]
 8007080:	f003 030f 	and.w	r3, r3, #15
 8007084:	2101      	movs	r1, #1
 8007086:	fa01 f303 	lsl.w	r3, r1, r3
 800708a:	b29b      	uxth	r3, r3
 800708c:	43db      	mvns	r3, r3
 800708e:	68f9      	ldr	r1, [r7, #12]
 8007090:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007094:	4013      	ands	r3, r2
 8007096:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800709e:	69da      	ldr	r2, [r3, #28]
 80070a0:	683b      	ldr	r3, [r7, #0]
 80070a2:	781b      	ldrb	r3, [r3, #0]
 80070a4:	f003 030f 	and.w	r3, r3, #15
 80070a8:	2101      	movs	r1, #1
 80070aa:	fa01 f303 	lsl.w	r3, r1, r3
 80070ae:	b29b      	uxth	r3, r3
 80070b0:	43db      	mvns	r3, r3
 80070b2:	68f9      	ldr	r1, [r7, #12]
 80070b4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80070b8:	4013      	ands	r3, r2
 80070ba:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80070bc:	68bb      	ldr	r3, [r7, #8]
 80070be:	015a      	lsls	r2, r3, #5
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	4413      	add	r3, r2
 80070c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80070c8:	681a      	ldr	r2, [r3, #0]
 80070ca:	68bb      	ldr	r3, [r7, #8]
 80070cc:	0159      	lsls	r1, r3, #5
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	440b      	add	r3, r1
 80070d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80070d6:	4619      	mov	r1, r3
 80070d8:	4b35      	ldr	r3, [pc, #212]	@ (80071b0 <USB_DeactivateEndpoint+0x1b0>)
 80070da:	4013      	ands	r3, r2
 80070dc:	600b      	str	r3, [r1, #0]
 80070de:	e060      	b.n	80071a2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80070e0:	68bb      	ldr	r3, [r7, #8]
 80070e2:	015a      	lsls	r2, r3, #5
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	4413      	add	r3, r2
 80070e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80070f2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80070f6:	d11f      	bne.n	8007138 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80070f8:	68bb      	ldr	r3, [r7, #8]
 80070fa:	015a      	lsls	r2, r3, #5
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	4413      	add	r3, r2
 8007100:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	68ba      	ldr	r2, [r7, #8]
 8007108:	0151      	lsls	r1, r2, #5
 800710a:	68fa      	ldr	r2, [r7, #12]
 800710c:	440a      	add	r2, r1
 800710e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007112:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007116:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8007118:	68bb      	ldr	r3, [r7, #8]
 800711a:	015a      	lsls	r2, r3, #5
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	4413      	add	r3, r2
 8007120:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	68ba      	ldr	r2, [r7, #8]
 8007128:	0151      	lsls	r1, r2, #5
 800712a:	68fa      	ldr	r2, [r7, #12]
 800712c:	440a      	add	r2, r1
 800712e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007132:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007136:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800713e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007140:	683b      	ldr	r3, [r7, #0]
 8007142:	781b      	ldrb	r3, [r3, #0]
 8007144:	f003 030f 	and.w	r3, r3, #15
 8007148:	2101      	movs	r1, #1
 800714a:	fa01 f303 	lsl.w	r3, r1, r3
 800714e:	041b      	lsls	r3, r3, #16
 8007150:	43db      	mvns	r3, r3
 8007152:	68f9      	ldr	r1, [r7, #12]
 8007154:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007158:	4013      	ands	r3, r2
 800715a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007162:	69da      	ldr	r2, [r3, #28]
 8007164:	683b      	ldr	r3, [r7, #0]
 8007166:	781b      	ldrb	r3, [r3, #0]
 8007168:	f003 030f 	and.w	r3, r3, #15
 800716c:	2101      	movs	r1, #1
 800716e:	fa01 f303 	lsl.w	r3, r1, r3
 8007172:	041b      	lsls	r3, r3, #16
 8007174:	43db      	mvns	r3, r3
 8007176:	68f9      	ldr	r1, [r7, #12]
 8007178:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800717c:	4013      	ands	r3, r2
 800717e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8007180:	68bb      	ldr	r3, [r7, #8]
 8007182:	015a      	lsls	r2, r3, #5
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	4413      	add	r3, r2
 8007188:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800718c:	681a      	ldr	r2, [r3, #0]
 800718e:	68bb      	ldr	r3, [r7, #8]
 8007190:	0159      	lsls	r1, r3, #5
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	440b      	add	r3, r1
 8007196:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800719a:	4619      	mov	r1, r3
 800719c:	4b05      	ldr	r3, [pc, #20]	@ (80071b4 <USB_DeactivateEndpoint+0x1b4>)
 800719e:	4013      	ands	r3, r2
 80071a0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80071a2:	2300      	movs	r3, #0
}
 80071a4:	4618      	mov	r0, r3
 80071a6:	3714      	adds	r7, #20
 80071a8:	46bd      	mov	sp, r7
 80071aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ae:	4770      	bx	lr
 80071b0:	ec337800 	.word	0xec337800
 80071b4:	eff37800 	.word	0xeff37800

080071b8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80071b8:	b580      	push	{r7, lr}
 80071ba:	b08a      	sub	sp, #40	@ 0x28
 80071bc:	af02      	add	r7, sp, #8
 80071be:	60f8      	str	r0, [r7, #12]
 80071c0:	60b9      	str	r1, [r7, #8]
 80071c2:	4613      	mov	r3, r2
 80071c4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80071ca:	68bb      	ldr	r3, [r7, #8]
 80071cc:	781b      	ldrb	r3, [r3, #0]
 80071ce:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80071d0:	68bb      	ldr	r3, [r7, #8]
 80071d2:	785b      	ldrb	r3, [r3, #1]
 80071d4:	2b01      	cmp	r3, #1
 80071d6:	f040 817f 	bne.w	80074d8 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80071da:	68bb      	ldr	r3, [r7, #8]
 80071dc:	691b      	ldr	r3, [r3, #16]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d132      	bne.n	8007248 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80071e2:	69bb      	ldr	r3, [r7, #24]
 80071e4:	015a      	lsls	r2, r3, #5
 80071e6:	69fb      	ldr	r3, [r7, #28]
 80071e8:	4413      	add	r3, r2
 80071ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80071ee:	691b      	ldr	r3, [r3, #16]
 80071f0:	69ba      	ldr	r2, [r7, #24]
 80071f2:	0151      	lsls	r1, r2, #5
 80071f4:	69fa      	ldr	r2, [r7, #28]
 80071f6:	440a      	add	r2, r1
 80071f8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80071fc:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8007200:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8007204:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007206:	69bb      	ldr	r3, [r7, #24]
 8007208:	015a      	lsls	r2, r3, #5
 800720a:	69fb      	ldr	r3, [r7, #28]
 800720c:	4413      	add	r3, r2
 800720e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007212:	691b      	ldr	r3, [r3, #16]
 8007214:	69ba      	ldr	r2, [r7, #24]
 8007216:	0151      	lsls	r1, r2, #5
 8007218:	69fa      	ldr	r2, [r7, #28]
 800721a:	440a      	add	r2, r1
 800721c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007220:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007224:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007226:	69bb      	ldr	r3, [r7, #24]
 8007228:	015a      	lsls	r2, r3, #5
 800722a:	69fb      	ldr	r3, [r7, #28]
 800722c:	4413      	add	r3, r2
 800722e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007232:	691b      	ldr	r3, [r3, #16]
 8007234:	69ba      	ldr	r2, [r7, #24]
 8007236:	0151      	lsls	r1, r2, #5
 8007238:	69fa      	ldr	r2, [r7, #28]
 800723a:	440a      	add	r2, r1
 800723c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007240:	0cdb      	lsrs	r3, r3, #19
 8007242:	04db      	lsls	r3, r3, #19
 8007244:	6113      	str	r3, [r2, #16]
 8007246:	e097      	b.n	8007378 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007248:	69bb      	ldr	r3, [r7, #24]
 800724a:	015a      	lsls	r2, r3, #5
 800724c:	69fb      	ldr	r3, [r7, #28]
 800724e:	4413      	add	r3, r2
 8007250:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007254:	691b      	ldr	r3, [r3, #16]
 8007256:	69ba      	ldr	r2, [r7, #24]
 8007258:	0151      	lsls	r1, r2, #5
 800725a:	69fa      	ldr	r2, [r7, #28]
 800725c:	440a      	add	r2, r1
 800725e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007262:	0cdb      	lsrs	r3, r3, #19
 8007264:	04db      	lsls	r3, r3, #19
 8007266:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007268:	69bb      	ldr	r3, [r7, #24]
 800726a:	015a      	lsls	r2, r3, #5
 800726c:	69fb      	ldr	r3, [r7, #28]
 800726e:	4413      	add	r3, r2
 8007270:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007274:	691b      	ldr	r3, [r3, #16]
 8007276:	69ba      	ldr	r2, [r7, #24]
 8007278:	0151      	lsls	r1, r2, #5
 800727a:	69fa      	ldr	r2, [r7, #28]
 800727c:	440a      	add	r2, r1
 800727e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007282:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8007286:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800728a:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 800728c:	69bb      	ldr	r3, [r7, #24]
 800728e:	2b00      	cmp	r3, #0
 8007290:	d11a      	bne.n	80072c8 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8007292:	68bb      	ldr	r3, [r7, #8]
 8007294:	691a      	ldr	r2, [r3, #16]
 8007296:	68bb      	ldr	r3, [r7, #8]
 8007298:	689b      	ldr	r3, [r3, #8]
 800729a:	429a      	cmp	r2, r3
 800729c:	d903      	bls.n	80072a6 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800729e:	68bb      	ldr	r3, [r7, #8]
 80072a0:	689a      	ldr	r2, [r3, #8]
 80072a2:	68bb      	ldr	r3, [r7, #8]
 80072a4:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80072a6:	69bb      	ldr	r3, [r7, #24]
 80072a8:	015a      	lsls	r2, r3, #5
 80072aa:	69fb      	ldr	r3, [r7, #28]
 80072ac:	4413      	add	r3, r2
 80072ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80072b2:	691b      	ldr	r3, [r3, #16]
 80072b4:	69ba      	ldr	r2, [r7, #24]
 80072b6:	0151      	lsls	r1, r2, #5
 80072b8:	69fa      	ldr	r2, [r7, #28]
 80072ba:	440a      	add	r2, r1
 80072bc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80072c0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80072c4:	6113      	str	r3, [r2, #16]
 80072c6:	e044      	b.n	8007352 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80072c8:	68bb      	ldr	r3, [r7, #8]
 80072ca:	691a      	ldr	r2, [r3, #16]
 80072cc:	68bb      	ldr	r3, [r7, #8]
 80072ce:	689b      	ldr	r3, [r3, #8]
 80072d0:	4413      	add	r3, r2
 80072d2:	1e5a      	subs	r2, r3, #1
 80072d4:	68bb      	ldr	r3, [r7, #8]
 80072d6:	689b      	ldr	r3, [r3, #8]
 80072d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80072dc:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 80072de:	69bb      	ldr	r3, [r7, #24]
 80072e0:	015a      	lsls	r2, r3, #5
 80072e2:	69fb      	ldr	r3, [r7, #28]
 80072e4:	4413      	add	r3, r2
 80072e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80072ea:	691a      	ldr	r2, [r3, #16]
 80072ec:	8afb      	ldrh	r3, [r7, #22]
 80072ee:	04d9      	lsls	r1, r3, #19
 80072f0:	4ba4      	ldr	r3, [pc, #656]	@ (8007584 <USB_EPStartXfer+0x3cc>)
 80072f2:	400b      	ands	r3, r1
 80072f4:	69b9      	ldr	r1, [r7, #24]
 80072f6:	0148      	lsls	r0, r1, #5
 80072f8:	69f9      	ldr	r1, [r7, #28]
 80072fa:	4401      	add	r1, r0
 80072fc:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8007300:	4313      	orrs	r3, r2
 8007302:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8007304:	68bb      	ldr	r3, [r7, #8]
 8007306:	791b      	ldrb	r3, [r3, #4]
 8007308:	2b01      	cmp	r3, #1
 800730a:	d122      	bne.n	8007352 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800730c:	69bb      	ldr	r3, [r7, #24]
 800730e:	015a      	lsls	r2, r3, #5
 8007310:	69fb      	ldr	r3, [r7, #28]
 8007312:	4413      	add	r3, r2
 8007314:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007318:	691b      	ldr	r3, [r3, #16]
 800731a:	69ba      	ldr	r2, [r7, #24]
 800731c:	0151      	lsls	r1, r2, #5
 800731e:	69fa      	ldr	r2, [r7, #28]
 8007320:	440a      	add	r2, r1
 8007322:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007326:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800732a:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 800732c:	69bb      	ldr	r3, [r7, #24]
 800732e:	015a      	lsls	r2, r3, #5
 8007330:	69fb      	ldr	r3, [r7, #28]
 8007332:	4413      	add	r3, r2
 8007334:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007338:	691a      	ldr	r2, [r3, #16]
 800733a:	8afb      	ldrh	r3, [r7, #22]
 800733c:	075b      	lsls	r3, r3, #29
 800733e:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8007342:	69b9      	ldr	r1, [r7, #24]
 8007344:	0148      	lsls	r0, r1, #5
 8007346:	69f9      	ldr	r1, [r7, #28]
 8007348:	4401      	add	r1, r0
 800734a:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800734e:	4313      	orrs	r3, r2
 8007350:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007352:	69bb      	ldr	r3, [r7, #24]
 8007354:	015a      	lsls	r2, r3, #5
 8007356:	69fb      	ldr	r3, [r7, #28]
 8007358:	4413      	add	r3, r2
 800735a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800735e:	691a      	ldr	r2, [r3, #16]
 8007360:	68bb      	ldr	r3, [r7, #8]
 8007362:	691b      	ldr	r3, [r3, #16]
 8007364:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007368:	69b9      	ldr	r1, [r7, #24]
 800736a:	0148      	lsls	r0, r1, #5
 800736c:	69f9      	ldr	r1, [r7, #28]
 800736e:	4401      	add	r1, r0
 8007370:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8007374:	4313      	orrs	r3, r2
 8007376:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007378:	79fb      	ldrb	r3, [r7, #7]
 800737a:	2b01      	cmp	r3, #1
 800737c:	d14b      	bne.n	8007416 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800737e:	68bb      	ldr	r3, [r7, #8]
 8007380:	69db      	ldr	r3, [r3, #28]
 8007382:	2b00      	cmp	r3, #0
 8007384:	d009      	beq.n	800739a <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007386:	69bb      	ldr	r3, [r7, #24]
 8007388:	015a      	lsls	r2, r3, #5
 800738a:	69fb      	ldr	r3, [r7, #28]
 800738c:	4413      	add	r3, r2
 800738e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007392:	461a      	mov	r2, r3
 8007394:	68bb      	ldr	r3, [r7, #8]
 8007396:	69db      	ldr	r3, [r3, #28]
 8007398:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800739a:	68bb      	ldr	r3, [r7, #8]
 800739c:	791b      	ldrb	r3, [r3, #4]
 800739e:	2b01      	cmp	r3, #1
 80073a0:	d128      	bne.n	80073f4 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80073a2:	69fb      	ldr	r3, [r7, #28]
 80073a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80073a8:	689b      	ldr	r3, [r3, #8]
 80073aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d110      	bne.n	80073d4 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80073b2:	69bb      	ldr	r3, [r7, #24]
 80073b4:	015a      	lsls	r2, r3, #5
 80073b6:	69fb      	ldr	r3, [r7, #28]
 80073b8:	4413      	add	r3, r2
 80073ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	69ba      	ldr	r2, [r7, #24]
 80073c2:	0151      	lsls	r1, r2, #5
 80073c4:	69fa      	ldr	r2, [r7, #28]
 80073c6:	440a      	add	r2, r1
 80073c8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80073cc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80073d0:	6013      	str	r3, [r2, #0]
 80073d2:	e00f      	b.n	80073f4 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80073d4:	69bb      	ldr	r3, [r7, #24]
 80073d6:	015a      	lsls	r2, r3, #5
 80073d8:	69fb      	ldr	r3, [r7, #28]
 80073da:	4413      	add	r3, r2
 80073dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	69ba      	ldr	r2, [r7, #24]
 80073e4:	0151      	lsls	r1, r2, #5
 80073e6:	69fa      	ldr	r2, [r7, #28]
 80073e8:	440a      	add	r2, r1
 80073ea:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80073ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80073f2:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80073f4:	69bb      	ldr	r3, [r7, #24]
 80073f6:	015a      	lsls	r2, r3, #5
 80073f8:	69fb      	ldr	r3, [r7, #28]
 80073fa:	4413      	add	r3, r2
 80073fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	69ba      	ldr	r2, [r7, #24]
 8007404:	0151      	lsls	r1, r2, #5
 8007406:	69fa      	ldr	r2, [r7, #28]
 8007408:	440a      	add	r2, r1
 800740a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800740e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8007412:	6013      	str	r3, [r2, #0]
 8007414:	e166      	b.n	80076e4 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007416:	69bb      	ldr	r3, [r7, #24]
 8007418:	015a      	lsls	r2, r3, #5
 800741a:	69fb      	ldr	r3, [r7, #28]
 800741c:	4413      	add	r3, r2
 800741e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	69ba      	ldr	r2, [r7, #24]
 8007426:	0151      	lsls	r1, r2, #5
 8007428:	69fa      	ldr	r2, [r7, #28]
 800742a:	440a      	add	r2, r1
 800742c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007430:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8007434:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007436:	68bb      	ldr	r3, [r7, #8]
 8007438:	791b      	ldrb	r3, [r3, #4]
 800743a:	2b01      	cmp	r3, #1
 800743c:	d015      	beq.n	800746a <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800743e:	68bb      	ldr	r3, [r7, #8]
 8007440:	691b      	ldr	r3, [r3, #16]
 8007442:	2b00      	cmp	r3, #0
 8007444:	f000 814e 	beq.w	80076e4 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007448:	69fb      	ldr	r3, [r7, #28]
 800744a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800744e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007450:	68bb      	ldr	r3, [r7, #8]
 8007452:	781b      	ldrb	r3, [r3, #0]
 8007454:	f003 030f 	and.w	r3, r3, #15
 8007458:	2101      	movs	r1, #1
 800745a:	fa01 f303 	lsl.w	r3, r1, r3
 800745e:	69f9      	ldr	r1, [r7, #28]
 8007460:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007464:	4313      	orrs	r3, r2
 8007466:	634b      	str	r3, [r1, #52]	@ 0x34
 8007468:	e13c      	b.n	80076e4 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800746a:	69fb      	ldr	r3, [r7, #28]
 800746c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007470:	689b      	ldr	r3, [r3, #8]
 8007472:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007476:	2b00      	cmp	r3, #0
 8007478:	d110      	bne.n	800749c <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800747a:	69bb      	ldr	r3, [r7, #24]
 800747c:	015a      	lsls	r2, r3, #5
 800747e:	69fb      	ldr	r3, [r7, #28]
 8007480:	4413      	add	r3, r2
 8007482:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	69ba      	ldr	r2, [r7, #24]
 800748a:	0151      	lsls	r1, r2, #5
 800748c:	69fa      	ldr	r2, [r7, #28]
 800748e:	440a      	add	r2, r1
 8007490:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007494:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007498:	6013      	str	r3, [r2, #0]
 800749a:	e00f      	b.n	80074bc <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800749c:	69bb      	ldr	r3, [r7, #24]
 800749e:	015a      	lsls	r2, r3, #5
 80074a0:	69fb      	ldr	r3, [r7, #28]
 80074a2:	4413      	add	r3, r2
 80074a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	69ba      	ldr	r2, [r7, #24]
 80074ac:	0151      	lsls	r1, r2, #5
 80074ae:	69fa      	ldr	r2, [r7, #28]
 80074b0:	440a      	add	r2, r1
 80074b2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80074b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80074ba:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80074bc:	68bb      	ldr	r3, [r7, #8]
 80074be:	68d9      	ldr	r1, [r3, #12]
 80074c0:	68bb      	ldr	r3, [r7, #8]
 80074c2:	781a      	ldrb	r2, [r3, #0]
 80074c4:	68bb      	ldr	r3, [r7, #8]
 80074c6:	691b      	ldr	r3, [r3, #16]
 80074c8:	b298      	uxth	r0, r3
 80074ca:	79fb      	ldrb	r3, [r7, #7]
 80074cc:	9300      	str	r3, [sp, #0]
 80074ce:	4603      	mov	r3, r0
 80074d0:	68f8      	ldr	r0, [r7, #12]
 80074d2:	f000 f9b9 	bl	8007848 <USB_WritePacket>
 80074d6:	e105      	b.n	80076e4 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80074d8:	69bb      	ldr	r3, [r7, #24]
 80074da:	015a      	lsls	r2, r3, #5
 80074dc:	69fb      	ldr	r3, [r7, #28]
 80074de:	4413      	add	r3, r2
 80074e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80074e4:	691b      	ldr	r3, [r3, #16]
 80074e6:	69ba      	ldr	r2, [r7, #24]
 80074e8:	0151      	lsls	r1, r2, #5
 80074ea:	69fa      	ldr	r2, [r7, #28]
 80074ec:	440a      	add	r2, r1
 80074ee:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80074f2:	0cdb      	lsrs	r3, r3, #19
 80074f4:	04db      	lsls	r3, r3, #19
 80074f6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80074f8:	69bb      	ldr	r3, [r7, #24]
 80074fa:	015a      	lsls	r2, r3, #5
 80074fc:	69fb      	ldr	r3, [r7, #28]
 80074fe:	4413      	add	r3, r2
 8007500:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007504:	691b      	ldr	r3, [r3, #16]
 8007506:	69ba      	ldr	r2, [r7, #24]
 8007508:	0151      	lsls	r1, r2, #5
 800750a:	69fa      	ldr	r2, [r7, #28]
 800750c:	440a      	add	r2, r1
 800750e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007512:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8007516:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800751a:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800751c:	69bb      	ldr	r3, [r7, #24]
 800751e:	2b00      	cmp	r3, #0
 8007520:	d132      	bne.n	8007588 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8007522:	68bb      	ldr	r3, [r7, #8]
 8007524:	691b      	ldr	r3, [r3, #16]
 8007526:	2b00      	cmp	r3, #0
 8007528:	d003      	beq.n	8007532 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 800752a:	68bb      	ldr	r3, [r7, #8]
 800752c:	689a      	ldr	r2, [r3, #8]
 800752e:	68bb      	ldr	r3, [r7, #8]
 8007530:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8007532:	68bb      	ldr	r3, [r7, #8]
 8007534:	689a      	ldr	r2, [r3, #8]
 8007536:	68bb      	ldr	r3, [r7, #8]
 8007538:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800753a:	69bb      	ldr	r3, [r7, #24]
 800753c:	015a      	lsls	r2, r3, #5
 800753e:	69fb      	ldr	r3, [r7, #28]
 8007540:	4413      	add	r3, r2
 8007542:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007546:	691a      	ldr	r2, [r3, #16]
 8007548:	68bb      	ldr	r3, [r7, #8]
 800754a:	6a1b      	ldr	r3, [r3, #32]
 800754c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007550:	69b9      	ldr	r1, [r7, #24]
 8007552:	0148      	lsls	r0, r1, #5
 8007554:	69f9      	ldr	r1, [r7, #28]
 8007556:	4401      	add	r1, r0
 8007558:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800755c:	4313      	orrs	r3, r2
 800755e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007560:	69bb      	ldr	r3, [r7, #24]
 8007562:	015a      	lsls	r2, r3, #5
 8007564:	69fb      	ldr	r3, [r7, #28]
 8007566:	4413      	add	r3, r2
 8007568:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800756c:	691b      	ldr	r3, [r3, #16]
 800756e:	69ba      	ldr	r2, [r7, #24]
 8007570:	0151      	lsls	r1, r2, #5
 8007572:	69fa      	ldr	r2, [r7, #28]
 8007574:	440a      	add	r2, r1
 8007576:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800757a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800757e:	6113      	str	r3, [r2, #16]
 8007580:	e062      	b.n	8007648 <USB_EPStartXfer+0x490>
 8007582:	bf00      	nop
 8007584:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8007588:	68bb      	ldr	r3, [r7, #8]
 800758a:	691b      	ldr	r3, [r3, #16]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d123      	bne.n	80075d8 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8007590:	69bb      	ldr	r3, [r7, #24]
 8007592:	015a      	lsls	r2, r3, #5
 8007594:	69fb      	ldr	r3, [r7, #28]
 8007596:	4413      	add	r3, r2
 8007598:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800759c:	691a      	ldr	r2, [r3, #16]
 800759e:	68bb      	ldr	r3, [r7, #8]
 80075a0:	689b      	ldr	r3, [r3, #8]
 80075a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80075a6:	69b9      	ldr	r1, [r7, #24]
 80075a8:	0148      	lsls	r0, r1, #5
 80075aa:	69f9      	ldr	r1, [r7, #28]
 80075ac:	4401      	add	r1, r0
 80075ae:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80075b2:	4313      	orrs	r3, r2
 80075b4:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80075b6:	69bb      	ldr	r3, [r7, #24]
 80075b8:	015a      	lsls	r2, r3, #5
 80075ba:	69fb      	ldr	r3, [r7, #28]
 80075bc:	4413      	add	r3, r2
 80075be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80075c2:	691b      	ldr	r3, [r3, #16]
 80075c4:	69ba      	ldr	r2, [r7, #24]
 80075c6:	0151      	lsls	r1, r2, #5
 80075c8:	69fa      	ldr	r2, [r7, #28]
 80075ca:	440a      	add	r2, r1
 80075cc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80075d0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80075d4:	6113      	str	r3, [r2, #16]
 80075d6:	e037      	b.n	8007648 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80075d8:	68bb      	ldr	r3, [r7, #8]
 80075da:	691a      	ldr	r2, [r3, #16]
 80075dc:	68bb      	ldr	r3, [r7, #8]
 80075de:	689b      	ldr	r3, [r3, #8]
 80075e0:	4413      	add	r3, r2
 80075e2:	1e5a      	subs	r2, r3, #1
 80075e4:	68bb      	ldr	r3, [r7, #8]
 80075e6:	689b      	ldr	r3, [r3, #8]
 80075e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80075ec:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80075ee:	68bb      	ldr	r3, [r7, #8]
 80075f0:	689b      	ldr	r3, [r3, #8]
 80075f2:	8afa      	ldrh	r2, [r7, #22]
 80075f4:	fb03 f202 	mul.w	r2, r3, r2
 80075f8:	68bb      	ldr	r3, [r7, #8]
 80075fa:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80075fc:	69bb      	ldr	r3, [r7, #24]
 80075fe:	015a      	lsls	r2, r3, #5
 8007600:	69fb      	ldr	r3, [r7, #28]
 8007602:	4413      	add	r3, r2
 8007604:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007608:	691a      	ldr	r2, [r3, #16]
 800760a:	8afb      	ldrh	r3, [r7, #22]
 800760c:	04d9      	lsls	r1, r3, #19
 800760e:	4b38      	ldr	r3, [pc, #224]	@ (80076f0 <USB_EPStartXfer+0x538>)
 8007610:	400b      	ands	r3, r1
 8007612:	69b9      	ldr	r1, [r7, #24]
 8007614:	0148      	lsls	r0, r1, #5
 8007616:	69f9      	ldr	r1, [r7, #28]
 8007618:	4401      	add	r1, r0
 800761a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800761e:	4313      	orrs	r3, r2
 8007620:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8007622:	69bb      	ldr	r3, [r7, #24]
 8007624:	015a      	lsls	r2, r3, #5
 8007626:	69fb      	ldr	r3, [r7, #28]
 8007628:	4413      	add	r3, r2
 800762a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800762e:	691a      	ldr	r2, [r3, #16]
 8007630:	68bb      	ldr	r3, [r7, #8]
 8007632:	6a1b      	ldr	r3, [r3, #32]
 8007634:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007638:	69b9      	ldr	r1, [r7, #24]
 800763a:	0148      	lsls	r0, r1, #5
 800763c:	69f9      	ldr	r1, [r7, #28]
 800763e:	4401      	add	r1, r0
 8007640:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007644:	4313      	orrs	r3, r2
 8007646:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8007648:	79fb      	ldrb	r3, [r7, #7]
 800764a:	2b01      	cmp	r3, #1
 800764c:	d10d      	bne.n	800766a <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800764e:	68bb      	ldr	r3, [r7, #8]
 8007650:	68db      	ldr	r3, [r3, #12]
 8007652:	2b00      	cmp	r3, #0
 8007654:	d009      	beq.n	800766a <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007656:	68bb      	ldr	r3, [r7, #8]
 8007658:	68d9      	ldr	r1, [r3, #12]
 800765a:	69bb      	ldr	r3, [r7, #24]
 800765c:	015a      	lsls	r2, r3, #5
 800765e:	69fb      	ldr	r3, [r7, #28]
 8007660:	4413      	add	r3, r2
 8007662:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007666:	460a      	mov	r2, r1
 8007668:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800766a:	68bb      	ldr	r3, [r7, #8]
 800766c:	791b      	ldrb	r3, [r3, #4]
 800766e:	2b01      	cmp	r3, #1
 8007670:	d128      	bne.n	80076c4 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007672:	69fb      	ldr	r3, [r7, #28]
 8007674:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007678:	689b      	ldr	r3, [r3, #8]
 800767a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800767e:	2b00      	cmp	r3, #0
 8007680:	d110      	bne.n	80076a4 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8007682:	69bb      	ldr	r3, [r7, #24]
 8007684:	015a      	lsls	r2, r3, #5
 8007686:	69fb      	ldr	r3, [r7, #28]
 8007688:	4413      	add	r3, r2
 800768a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	69ba      	ldr	r2, [r7, #24]
 8007692:	0151      	lsls	r1, r2, #5
 8007694:	69fa      	ldr	r2, [r7, #28]
 8007696:	440a      	add	r2, r1
 8007698:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800769c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80076a0:	6013      	str	r3, [r2, #0]
 80076a2:	e00f      	b.n	80076c4 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80076a4:	69bb      	ldr	r3, [r7, #24]
 80076a6:	015a      	lsls	r2, r3, #5
 80076a8:	69fb      	ldr	r3, [r7, #28]
 80076aa:	4413      	add	r3, r2
 80076ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	69ba      	ldr	r2, [r7, #24]
 80076b4:	0151      	lsls	r1, r2, #5
 80076b6:	69fa      	ldr	r2, [r7, #28]
 80076b8:	440a      	add	r2, r1
 80076ba:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80076be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80076c2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80076c4:	69bb      	ldr	r3, [r7, #24]
 80076c6:	015a      	lsls	r2, r3, #5
 80076c8:	69fb      	ldr	r3, [r7, #28]
 80076ca:	4413      	add	r3, r2
 80076cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	69ba      	ldr	r2, [r7, #24]
 80076d4:	0151      	lsls	r1, r2, #5
 80076d6:	69fa      	ldr	r2, [r7, #28]
 80076d8:	440a      	add	r2, r1
 80076da:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80076de:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80076e2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80076e4:	2300      	movs	r3, #0
}
 80076e6:	4618      	mov	r0, r3
 80076e8:	3720      	adds	r7, #32
 80076ea:	46bd      	mov	sp, r7
 80076ec:	bd80      	pop	{r7, pc}
 80076ee:	bf00      	nop
 80076f0:	1ff80000 	.word	0x1ff80000

080076f4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80076f4:	b480      	push	{r7}
 80076f6:	b087      	sub	sp, #28
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	6078      	str	r0, [r7, #4]
 80076fc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80076fe:	2300      	movs	r3, #0
 8007700:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8007702:	2300      	movs	r3, #0
 8007704:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800770a:	683b      	ldr	r3, [r7, #0]
 800770c:	785b      	ldrb	r3, [r3, #1]
 800770e:	2b01      	cmp	r3, #1
 8007710:	d14a      	bne.n	80077a8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007712:	683b      	ldr	r3, [r7, #0]
 8007714:	781b      	ldrb	r3, [r3, #0]
 8007716:	015a      	lsls	r2, r3, #5
 8007718:	693b      	ldr	r3, [r7, #16]
 800771a:	4413      	add	r3, r2
 800771c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007726:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800772a:	f040 8086 	bne.w	800783a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800772e:	683b      	ldr	r3, [r7, #0]
 8007730:	781b      	ldrb	r3, [r3, #0]
 8007732:	015a      	lsls	r2, r3, #5
 8007734:	693b      	ldr	r3, [r7, #16]
 8007736:	4413      	add	r3, r2
 8007738:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	683a      	ldr	r2, [r7, #0]
 8007740:	7812      	ldrb	r2, [r2, #0]
 8007742:	0151      	lsls	r1, r2, #5
 8007744:	693a      	ldr	r2, [r7, #16]
 8007746:	440a      	add	r2, r1
 8007748:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800774c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007750:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8007752:	683b      	ldr	r3, [r7, #0]
 8007754:	781b      	ldrb	r3, [r3, #0]
 8007756:	015a      	lsls	r2, r3, #5
 8007758:	693b      	ldr	r3, [r7, #16]
 800775a:	4413      	add	r3, r2
 800775c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	683a      	ldr	r2, [r7, #0]
 8007764:	7812      	ldrb	r2, [r2, #0]
 8007766:	0151      	lsls	r1, r2, #5
 8007768:	693a      	ldr	r2, [r7, #16]
 800776a:	440a      	add	r2, r1
 800776c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007770:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007774:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	3301      	adds	r3, #1
 800777a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8007782:	4293      	cmp	r3, r2
 8007784:	d902      	bls.n	800778c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8007786:	2301      	movs	r3, #1
 8007788:	75fb      	strb	r3, [r7, #23]
          break;
 800778a:	e056      	b.n	800783a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800778c:	683b      	ldr	r3, [r7, #0]
 800778e:	781b      	ldrb	r3, [r3, #0]
 8007790:	015a      	lsls	r2, r3, #5
 8007792:	693b      	ldr	r3, [r7, #16]
 8007794:	4413      	add	r3, r2
 8007796:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80077a0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80077a4:	d0e7      	beq.n	8007776 <USB_EPStopXfer+0x82>
 80077a6:	e048      	b.n	800783a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80077a8:	683b      	ldr	r3, [r7, #0]
 80077aa:	781b      	ldrb	r3, [r3, #0]
 80077ac:	015a      	lsls	r2, r3, #5
 80077ae:	693b      	ldr	r3, [r7, #16]
 80077b0:	4413      	add	r3, r2
 80077b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80077bc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80077c0:	d13b      	bne.n	800783a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80077c2:	683b      	ldr	r3, [r7, #0]
 80077c4:	781b      	ldrb	r3, [r3, #0]
 80077c6:	015a      	lsls	r2, r3, #5
 80077c8:	693b      	ldr	r3, [r7, #16]
 80077ca:	4413      	add	r3, r2
 80077cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	683a      	ldr	r2, [r7, #0]
 80077d4:	7812      	ldrb	r2, [r2, #0]
 80077d6:	0151      	lsls	r1, r2, #5
 80077d8:	693a      	ldr	r2, [r7, #16]
 80077da:	440a      	add	r2, r1
 80077dc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80077e0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80077e4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80077e6:	683b      	ldr	r3, [r7, #0]
 80077e8:	781b      	ldrb	r3, [r3, #0]
 80077ea:	015a      	lsls	r2, r3, #5
 80077ec:	693b      	ldr	r3, [r7, #16]
 80077ee:	4413      	add	r3, r2
 80077f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	683a      	ldr	r2, [r7, #0]
 80077f8:	7812      	ldrb	r2, [r2, #0]
 80077fa:	0151      	lsls	r1, r2, #5
 80077fc:	693a      	ldr	r2, [r7, #16]
 80077fe:	440a      	add	r2, r1
 8007800:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007804:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007808:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	3301      	adds	r3, #1
 800780e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	f242 7210 	movw	r2, #10000	@ 0x2710
 8007816:	4293      	cmp	r3, r2
 8007818:	d902      	bls.n	8007820 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800781a:	2301      	movs	r3, #1
 800781c:	75fb      	strb	r3, [r7, #23]
          break;
 800781e:	e00c      	b.n	800783a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8007820:	683b      	ldr	r3, [r7, #0]
 8007822:	781b      	ldrb	r3, [r3, #0]
 8007824:	015a      	lsls	r2, r3, #5
 8007826:	693b      	ldr	r3, [r7, #16]
 8007828:	4413      	add	r3, r2
 800782a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007834:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007838:	d0e7      	beq.n	800780a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800783a:	7dfb      	ldrb	r3, [r7, #23]
}
 800783c:	4618      	mov	r0, r3
 800783e:	371c      	adds	r7, #28
 8007840:	46bd      	mov	sp, r7
 8007842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007846:	4770      	bx	lr

08007848 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007848:	b480      	push	{r7}
 800784a:	b089      	sub	sp, #36	@ 0x24
 800784c:	af00      	add	r7, sp, #0
 800784e:	60f8      	str	r0, [r7, #12]
 8007850:	60b9      	str	r1, [r7, #8]
 8007852:	4611      	mov	r1, r2
 8007854:	461a      	mov	r2, r3
 8007856:	460b      	mov	r3, r1
 8007858:	71fb      	strb	r3, [r7, #7]
 800785a:	4613      	mov	r3, r2
 800785c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007862:	68bb      	ldr	r3, [r7, #8]
 8007864:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007866:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800786a:	2b00      	cmp	r3, #0
 800786c:	d123      	bne.n	80078b6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800786e:	88bb      	ldrh	r3, [r7, #4]
 8007870:	3303      	adds	r3, #3
 8007872:	089b      	lsrs	r3, r3, #2
 8007874:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007876:	2300      	movs	r3, #0
 8007878:	61bb      	str	r3, [r7, #24]
 800787a:	e018      	b.n	80078ae <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800787c:	79fb      	ldrb	r3, [r7, #7]
 800787e:	031a      	lsls	r2, r3, #12
 8007880:	697b      	ldr	r3, [r7, #20]
 8007882:	4413      	add	r3, r2
 8007884:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007888:	461a      	mov	r2, r3
 800788a:	69fb      	ldr	r3, [r7, #28]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007890:	69fb      	ldr	r3, [r7, #28]
 8007892:	3301      	adds	r3, #1
 8007894:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007896:	69fb      	ldr	r3, [r7, #28]
 8007898:	3301      	adds	r3, #1
 800789a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800789c:	69fb      	ldr	r3, [r7, #28]
 800789e:	3301      	adds	r3, #1
 80078a0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80078a2:	69fb      	ldr	r3, [r7, #28]
 80078a4:	3301      	adds	r3, #1
 80078a6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80078a8:	69bb      	ldr	r3, [r7, #24]
 80078aa:	3301      	adds	r3, #1
 80078ac:	61bb      	str	r3, [r7, #24]
 80078ae:	69ba      	ldr	r2, [r7, #24]
 80078b0:	693b      	ldr	r3, [r7, #16]
 80078b2:	429a      	cmp	r2, r3
 80078b4:	d3e2      	bcc.n	800787c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80078b6:	2300      	movs	r3, #0
}
 80078b8:	4618      	mov	r0, r3
 80078ba:	3724      	adds	r7, #36	@ 0x24
 80078bc:	46bd      	mov	sp, r7
 80078be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c2:	4770      	bx	lr

080078c4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80078c4:	b480      	push	{r7}
 80078c6:	b08b      	sub	sp, #44	@ 0x2c
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	60f8      	str	r0, [r7, #12]
 80078cc:	60b9      	str	r1, [r7, #8]
 80078ce:	4613      	mov	r3, r2
 80078d0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80078d6:	68bb      	ldr	r3, [r7, #8]
 80078d8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80078da:	88fb      	ldrh	r3, [r7, #6]
 80078dc:	089b      	lsrs	r3, r3, #2
 80078de:	b29b      	uxth	r3, r3
 80078e0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80078e2:	88fb      	ldrh	r3, [r7, #6]
 80078e4:	f003 0303 	and.w	r3, r3, #3
 80078e8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80078ea:	2300      	movs	r3, #0
 80078ec:	623b      	str	r3, [r7, #32]
 80078ee:	e014      	b.n	800791a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80078f0:	69bb      	ldr	r3, [r7, #24]
 80078f2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80078f6:	681a      	ldr	r2, [r3, #0]
 80078f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078fa:	601a      	str	r2, [r3, #0]
    pDest++;
 80078fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078fe:	3301      	adds	r3, #1
 8007900:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007904:	3301      	adds	r3, #1
 8007906:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007908:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800790a:	3301      	adds	r3, #1
 800790c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800790e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007910:	3301      	adds	r3, #1
 8007912:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8007914:	6a3b      	ldr	r3, [r7, #32]
 8007916:	3301      	adds	r3, #1
 8007918:	623b      	str	r3, [r7, #32]
 800791a:	6a3a      	ldr	r2, [r7, #32]
 800791c:	697b      	ldr	r3, [r7, #20]
 800791e:	429a      	cmp	r2, r3
 8007920:	d3e6      	bcc.n	80078f0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007922:	8bfb      	ldrh	r3, [r7, #30]
 8007924:	2b00      	cmp	r3, #0
 8007926:	d01e      	beq.n	8007966 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007928:	2300      	movs	r3, #0
 800792a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800792c:	69bb      	ldr	r3, [r7, #24]
 800792e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007932:	461a      	mov	r2, r3
 8007934:	f107 0310 	add.w	r3, r7, #16
 8007938:	6812      	ldr	r2, [r2, #0]
 800793a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800793c:	693a      	ldr	r2, [r7, #16]
 800793e:	6a3b      	ldr	r3, [r7, #32]
 8007940:	b2db      	uxtb	r3, r3
 8007942:	00db      	lsls	r3, r3, #3
 8007944:	fa22 f303 	lsr.w	r3, r2, r3
 8007948:	b2da      	uxtb	r2, r3
 800794a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800794c:	701a      	strb	r2, [r3, #0]
      i++;
 800794e:	6a3b      	ldr	r3, [r7, #32]
 8007950:	3301      	adds	r3, #1
 8007952:	623b      	str	r3, [r7, #32]
      pDest++;
 8007954:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007956:	3301      	adds	r3, #1
 8007958:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800795a:	8bfb      	ldrh	r3, [r7, #30]
 800795c:	3b01      	subs	r3, #1
 800795e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007960:	8bfb      	ldrh	r3, [r7, #30]
 8007962:	2b00      	cmp	r3, #0
 8007964:	d1ea      	bne.n	800793c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007966:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007968:	4618      	mov	r0, r3
 800796a:	372c      	adds	r7, #44	@ 0x2c
 800796c:	46bd      	mov	sp, r7
 800796e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007972:	4770      	bx	lr

08007974 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007974:	b480      	push	{r7}
 8007976:	b085      	sub	sp, #20
 8007978:	af00      	add	r7, sp, #0
 800797a:	6078      	str	r0, [r7, #4]
 800797c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007982:	683b      	ldr	r3, [r7, #0]
 8007984:	781b      	ldrb	r3, [r3, #0]
 8007986:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007988:	683b      	ldr	r3, [r7, #0]
 800798a:	785b      	ldrb	r3, [r3, #1]
 800798c:	2b01      	cmp	r3, #1
 800798e:	d12c      	bne.n	80079ea <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007990:	68bb      	ldr	r3, [r7, #8]
 8007992:	015a      	lsls	r2, r3, #5
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	4413      	add	r3, r2
 8007998:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	db12      	blt.n	80079c8 <USB_EPSetStall+0x54>
 80079a2:	68bb      	ldr	r3, [r7, #8]
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d00f      	beq.n	80079c8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80079a8:	68bb      	ldr	r3, [r7, #8]
 80079aa:	015a      	lsls	r2, r3, #5
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	4413      	add	r3, r2
 80079b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	68ba      	ldr	r2, [r7, #8]
 80079b8:	0151      	lsls	r1, r2, #5
 80079ba:	68fa      	ldr	r2, [r7, #12]
 80079bc:	440a      	add	r2, r1
 80079be:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80079c2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80079c6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80079c8:	68bb      	ldr	r3, [r7, #8]
 80079ca:	015a      	lsls	r2, r3, #5
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	4413      	add	r3, r2
 80079d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	68ba      	ldr	r2, [r7, #8]
 80079d8:	0151      	lsls	r1, r2, #5
 80079da:	68fa      	ldr	r2, [r7, #12]
 80079dc:	440a      	add	r2, r1
 80079de:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80079e2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80079e6:	6013      	str	r3, [r2, #0]
 80079e8:	e02b      	b.n	8007a42 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80079ea:	68bb      	ldr	r3, [r7, #8]
 80079ec:	015a      	lsls	r2, r3, #5
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	4413      	add	r3, r2
 80079f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	db12      	blt.n	8007a22 <USB_EPSetStall+0xae>
 80079fc:	68bb      	ldr	r3, [r7, #8]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d00f      	beq.n	8007a22 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007a02:	68bb      	ldr	r3, [r7, #8]
 8007a04:	015a      	lsls	r2, r3, #5
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	4413      	add	r3, r2
 8007a0a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	68ba      	ldr	r2, [r7, #8]
 8007a12:	0151      	lsls	r1, r2, #5
 8007a14:	68fa      	ldr	r2, [r7, #12]
 8007a16:	440a      	add	r2, r1
 8007a18:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007a1c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007a20:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007a22:	68bb      	ldr	r3, [r7, #8]
 8007a24:	015a      	lsls	r2, r3, #5
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	4413      	add	r3, r2
 8007a2a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	68ba      	ldr	r2, [r7, #8]
 8007a32:	0151      	lsls	r1, r2, #5
 8007a34:	68fa      	ldr	r2, [r7, #12]
 8007a36:	440a      	add	r2, r1
 8007a38:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007a3c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007a40:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007a42:	2300      	movs	r3, #0
}
 8007a44:	4618      	mov	r0, r3
 8007a46:	3714      	adds	r7, #20
 8007a48:	46bd      	mov	sp, r7
 8007a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a4e:	4770      	bx	lr

08007a50 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007a50:	b480      	push	{r7}
 8007a52:	b085      	sub	sp, #20
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	6078      	str	r0, [r7, #4]
 8007a58:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007a5e:	683b      	ldr	r3, [r7, #0]
 8007a60:	781b      	ldrb	r3, [r3, #0]
 8007a62:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007a64:	683b      	ldr	r3, [r7, #0]
 8007a66:	785b      	ldrb	r3, [r3, #1]
 8007a68:	2b01      	cmp	r3, #1
 8007a6a:	d128      	bne.n	8007abe <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007a6c:	68bb      	ldr	r3, [r7, #8]
 8007a6e:	015a      	lsls	r2, r3, #5
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	4413      	add	r3, r2
 8007a74:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	68ba      	ldr	r2, [r7, #8]
 8007a7c:	0151      	lsls	r1, r2, #5
 8007a7e:	68fa      	ldr	r2, [r7, #12]
 8007a80:	440a      	add	r2, r1
 8007a82:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007a86:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007a8a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007a8c:	683b      	ldr	r3, [r7, #0]
 8007a8e:	791b      	ldrb	r3, [r3, #4]
 8007a90:	2b03      	cmp	r3, #3
 8007a92:	d003      	beq.n	8007a9c <USB_EPClearStall+0x4c>
 8007a94:	683b      	ldr	r3, [r7, #0]
 8007a96:	791b      	ldrb	r3, [r3, #4]
 8007a98:	2b02      	cmp	r3, #2
 8007a9a:	d138      	bne.n	8007b0e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007a9c:	68bb      	ldr	r3, [r7, #8]
 8007a9e:	015a      	lsls	r2, r3, #5
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	4413      	add	r3, r2
 8007aa4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	68ba      	ldr	r2, [r7, #8]
 8007aac:	0151      	lsls	r1, r2, #5
 8007aae:	68fa      	ldr	r2, [r7, #12]
 8007ab0:	440a      	add	r2, r1
 8007ab2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007ab6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007aba:	6013      	str	r3, [r2, #0]
 8007abc:	e027      	b.n	8007b0e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007abe:	68bb      	ldr	r3, [r7, #8]
 8007ac0:	015a      	lsls	r2, r3, #5
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	4413      	add	r3, r2
 8007ac6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	68ba      	ldr	r2, [r7, #8]
 8007ace:	0151      	lsls	r1, r2, #5
 8007ad0:	68fa      	ldr	r2, [r7, #12]
 8007ad2:	440a      	add	r2, r1
 8007ad4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007ad8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007adc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007ade:	683b      	ldr	r3, [r7, #0]
 8007ae0:	791b      	ldrb	r3, [r3, #4]
 8007ae2:	2b03      	cmp	r3, #3
 8007ae4:	d003      	beq.n	8007aee <USB_EPClearStall+0x9e>
 8007ae6:	683b      	ldr	r3, [r7, #0]
 8007ae8:	791b      	ldrb	r3, [r3, #4]
 8007aea:	2b02      	cmp	r3, #2
 8007aec:	d10f      	bne.n	8007b0e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007aee:	68bb      	ldr	r3, [r7, #8]
 8007af0:	015a      	lsls	r2, r3, #5
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	4413      	add	r3, r2
 8007af6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	68ba      	ldr	r2, [r7, #8]
 8007afe:	0151      	lsls	r1, r2, #5
 8007b00:	68fa      	ldr	r2, [r7, #12]
 8007b02:	440a      	add	r2, r1
 8007b04:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007b08:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007b0c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007b0e:	2300      	movs	r3, #0
}
 8007b10:	4618      	mov	r0, r3
 8007b12:	3714      	adds	r7, #20
 8007b14:	46bd      	mov	sp, r7
 8007b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1a:	4770      	bx	lr

08007b1c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007b1c:	b480      	push	{r7}
 8007b1e:	b085      	sub	sp, #20
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	6078      	str	r0, [r7, #4]
 8007b24:	460b      	mov	r3, r1
 8007b26:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	68fa      	ldr	r2, [r7, #12]
 8007b36:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007b3a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8007b3e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007b46:	681a      	ldr	r2, [r3, #0]
 8007b48:	78fb      	ldrb	r3, [r7, #3]
 8007b4a:	011b      	lsls	r3, r3, #4
 8007b4c:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8007b50:	68f9      	ldr	r1, [r7, #12]
 8007b52:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007b56:	4313      	orrs	r3, r2
 8007b58:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007b5a:	2300      	movs	r3, #0
}
 8007b5c:	4618      	mov	r0, r3
 8007b5e:	3714      	adds	r7, #20
 8007b60:	46bd      	mov	sp, r7
 8007b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b66:	4770      	bx	lr

08007b68 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007b68:	b480      	push	{r7}
 8007b6a:	b085      	sub	sp, #20
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	68fa      	ldr	r2, [r7, #12]
 8007b7e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007b82:	f023 0303 	bic.w	r3, r3, #3
 8007b86:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007b8e:	685b      	ldr	r3, [r3, #4]
 8007b90:	68fa      	ldr	r2, [r7, #12]
 8007b92:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007b96:	f023 0302 	bic.w	r3, r3, #2
 8007b9a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007b9c:	2300      	movs	r3, #0
}
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	3714      	adds	r7, #20
 8007ba2:	46bd      	mov	sp, r7
 8007ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba8:	4770      	bx	lr

08007baa <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007baa:	b480      	push	{r7}
 8007bac:	b085      	sub	sp, #20
 8007bae:	af00      	add	r7, sp, #0
 8007bb0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	68fa      	ldr	r2, [r7, #12]
 8007bc0:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007bc4:	f023 0303 	bic.w	r3, r3, #3
 8007bc8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007bd0:	685b      	ldr	r3, [r3, #4]
 8007bd2:	68fa      	ldr	r2, [r7, #12]
 8007bd4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007bd8:	f043 0302 	orr.w	r3, r3, #2
 8007bdc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007bde:	2300      	movs	r3, #0
}
 8007be0:	4618      	mov	r0, r3
 8007be2:	3714      	adds	r7, #20
 8007be4:	46bd      	mov	sp, r7
 8007be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bea:	4770      	bx	lr

08007bec <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8007bec:	b480      	push	{r7}
 8007bee:	b085      	sub	sp, #20
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	695b      	ldr	r3, [r3, #20]
 8007bf8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	699b      	ldr	r3, [r3, #24]
 8007bfe:	68fa      	ldr	r2, [r7, #12]
 8007c00:	4013      	ands	r3, r2
 8007c02:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007c04:	68fb      	ldr	r3, [r7, #12]
}
 8007c06:	4618      	mov	r0, r3
 8007c08:	3714      	adds	r7, #20
 8007c0a:	46bd      	mov	sp, r7
 8007c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c10:	4770      	bx	lr

08007c12 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8007c12:	b480      	push	{r7}
 8007c14:	b085      	sub	sp, #20
 8007c16:	af00      	add	r7, sp, #0
 8007c18:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007c24:	699b      	ldr	r3, [r3, #24]
 8007c26:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007c2e:	69db      	ldr	r3, [r3, #28]
 8007c30:	68ba      	ldr	r2, [r7, #8]
 8007c32:	4013      	ands	r3, r2
 8007c34:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007c36:	68bb      	ldr	r3, [r7, #8]
 8007c38:	0c1b      	lsrs	r3, r3, #16
}
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	3714      	adds	r7, #20
 8007c3e:	46bd      	mov	sp, r7
 8007c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c44:	4770      	bx	lr

08007c46 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8007c46:	b480      	push	{r7}
 8007c48:	b085      	sub	sp, #20
 8007c4a:	af00      	add	r7, sp, #0
 8007c4c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007c58:	699b      	ldr	r3, [r3, #24]
 8007c5a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007c62:	69db      	ldr	r3, [r3, #28]
 8007c64:	68ba      	ldr	r2, [r7, #8]
 8007c66:	4013      	ands	r3, r2
 8007c68:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007c6a:	68bb      	ldr	r3, [r7, #8]
 8007c6c:	b29b      	uxth	r3, r3
}
 8007c6e:	4618      	mov	r0, r3
 8007c70:	3714      	adds	r7, #20
 8007c72:	46bd      	mov	sp, r7
 8007c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c78:	4770      	bx	lr

08007c7a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007c7a:	b480      	push	{r7}
 8007c7c:	b085      	sub	sp, #20
 8007c7e:	af00      	add	r7, sp, #0
 8007c80:	6078      	str	r0, [r7, #4]
 8007c82:	460b      	mov	r3, r1
 8007c84:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007c8a:	78fb      	ldrb	r3, [r7, #3]
 8007c8c:	015a      	lsls	r2, r3, #5
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	4413      	add	r3, r2
 8007c92:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007c96:	689b      	ldr	r3, [r3, #8]
 8007c98:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007ca0:	695b      	ldr	r3, [r3, #20]
 8007ca2:	68ba      	ldr	r2, [r7, #8]
 8007ca4:	4013      	ands	r3, r2
 8007ca6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007ca8:	68bb      	ldr	r3, [r7, #8]
}
 8007caa:	4618      	mov	r0, r3
 8007cac:	3714      	adds	r7, #20
 8007cae:	46bd      	mov	sp, r7
 8007cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb4:	4770      	bx	lr

08007cb6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007cb6:	b480      	push	{r7}
 8007cb8:	b087      	sub	sp, #28
 8007cba:	af00      	add	r7, sp, #0
 8007cbc:	6078      	str	r0, [r7, #4]
 8007cbe:	460b      	mov	r3, r1
 8007cc0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007cc6:	697b      	ldr	r3, [r7, #20]
 8007cc8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007ccc:	691b      	ldr	r3, [r3, #16]
 8007cce:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007cd0:	697b      	ldr	r3, [r7, #20]
 8007cd2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007cd6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007cd8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007cda:	78fb      	ldrb	r3, [r7, #3]
 8007cdc:	f003 030f 	and.w	r3, r3, #15
 8007ce0:	68fa      	ldr	r2, [r7, #12]
 8007ce2:	fa22 f303 	lsr.w	r3, r2, r3
 8007ce6:	01db      	lsls	r3, r3, #7
 8007ce8:	b2db      	uxtb	r3, r3
 8007cea:	693a      	ldr	r2, [r7, #16]
 8007cec:	4313      	orrs	r3, r2
 8007cee:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007cf0:	78fb      	ldrb	r3, [r7, #3]
 8007cf2:	015a      	lsls	r2, r3, #5
 8007cf4:	697b      	ldr	r3, [r7, #20]
 8007cf6:	4413      	add	r3, r2
 8007cf8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007cfc:	689b      	ldr	r3, [r3, #8]
 8007cfe:	693a      	ldr	r2, [r7, #16]
 8007d00:	4013      	ands	r3, r2
 8007d02:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007d04:	68bb      	ldr	r3, [r7, #8]
}
 8007d06:	4618      	mov	r0, r3
 8007d08:	371c      	adds	r7, #28
 8007d0a:	46bd      	mov	sp, r7
 8007d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d10:	4770      	bx	lr

08007d12 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8007d12:	b480      	push	{r7}
 8007d14:	b083      	sub	sp, #12
 8007d16:	af00      	add	r7, sp, #0
 8007d18:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	695b      	ldr	r3, [r3, #20]
 8007d1e:	f003 0301 	and.w	r3, r3, #1
}
 8007d22:	4618      	mov	r0, r3
 8007d24:	370c      	adds	r7, #12
 8007d26:	46bd      	mov	sp, r7
 8007d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2c:	4770      	bx	lr

08007d2e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8007d2e:	b480      	push	{r7}
 8007d30:	b085      	sub	sp, #20
 8007d32:	af00      	add	r7, sp, #0
 8007d34:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	68fa      	ldr	r2, [r7, #12]
 8007d44:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007d48:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8007d4c:	f023 0307 	bic.w	r3, r3, #7
 8007d50:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007d58:	685b      	ldr	r3, [r3, #4]
 8007d5a:	68fa      	ldr	r2, [r7, #12]
 8007d5c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007d60:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007d64:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007d66:	2300      	movs	r3, #0
}
 8007d68:	4618      	mov	r0, r3
 8007d6a:	3714      	adds	r7, #20
 8007d6c:	46bd      	mov	sp, r7
 8007d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d72:	4770      	bx	lr

08007d74 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8007d74:	b480      	push	{r7}
 8007d76:	b087      	sub	sp, #28
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	60f8      	str	r0, [r7, #12]
 8007d7c:	460b      	mov	r3, r1
 8007d7e:	607a      	str	r2, [r7, #4]
 8007d80:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	333c      	adds	r3, #60	@ 0x3c
 8007d8a:	3304      	adds	r3, #4
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007d90:	693b      	ldr	r3, [r7, #16]
 8007d92:	4a26      	ldr	r2, [pc, #152]	@ (8007e2c <USB_EP0_OutStart+0xb8>)
 8007d94:	4293      	cmp	r3, r2
 8007d96:	d90a      	bls.n	8007dae <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007d98:	697b      	ldr	r3, [r7, #20]
 8007d9a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007da4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007da8:	d101      	bne.n	8007dae <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8007daa:	2300      	movs	r3, #0
 8007dac:	e037      	b.n	8007e1e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007dae:	697b      	ldr	r3, [r7, #20]
 8007db0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007db4:	461a      	mov	r2, r3
 8007db6:	2300      	movs	r3, #0
 8007db8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007dba:	697b      	ldr	r3, [r7, #20]
 8007dbc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007dc0:	691b      	ldr	r3, [r3, #16]
 8007dc2:	697a      	ldr	r2, [r7, #20]
 8007dc4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007dc8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007dcc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007dce:	697b      	ldr	r3, [r7, #20]
 8007dd0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007dd4:	691b      	ldr	r3, [r3, #16]
 8007dd6:	697a      	ldr	r2, [r7, #20]
 8007dd8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007ddc:	f043 0318 	orr.w	r3, r3, #24
 8007de0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007de2:	697b      	ldr	r3, [r7, #20]
 8007de4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007de8:	691b      	ldr	r3, [r3, #16]
 8007dea:	697a      	ldr	r2, [r7, #20]
 8007dec:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007df0:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8007df4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007df6:	7afb      	ldrb	r3, [r7, #11]
 8007df8:	2b01      	cmp	r3, #1
 8007dfa:	d10f      	bne.n	8007e1c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007dfc:	697b      	ldr	r3, [r7, #20]
 8007dfe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e02:	461a      	mov	r2, r3
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007e08:	697b      	ldr	r3, [r7, #20]
 8007e0a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	697a      	ldr	r2, [r7, #20]
 8007e12:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007e16:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8007e1a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007e1c:	2300      	movs	r3, #0
}
 8007e1e:	4618      	mov	r0, r3
 8007e20:	371c      	adds	r7, #28
 8007e22:	46bd      	mov	sp, r7
 8007e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e28:	4770      	bx	lr
 8007e2a:	bf00      	nop
 8007e2c:	4f54300a 	.word	0x4f54300a

08007e30 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007e30:	b480      	push	{r7}
 8007e32:	b085      	sub	sp, #20
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007e38:	2300      	movs	r3, #0
 8007e3a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	3301      	adds	r3, #1
 8007e40:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007e48:	d901      	bls.n	8007e4e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007e4a:	2303      	movs	r3, #3
 8007e4c:	e01b      	b.n	8007e86 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	691b      	ldr	r3, [r3, #16]
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	daf2      	bge.n	8007e3c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007e56:	2300      	movs	r3, #0
 8007e58:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	691b      	ldr	r3, [r3, #16]
 8007e5e:	f043 0201 	orr.w	r2, r3, #1
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	3301      	adds	r3, #1
 8007e6a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007e72:	d901      	bls.n	8007e78 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007e74:	2303      	movs	r3, #3
 8007e76:	e006      	b.n	8007e86 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	691b      	ldr	r3, [r3, #16]
 8007e7c:	f003 0301 	and.w	r3, r3, #1
 8007e80:	2b01      	cmp	r3, #1
 8007e82:	d0f0      	beq.n	8007e66 <USB_CoreReset+0x36>

  return HAL_OK;
 8007e84:	2300      	movs	r3, #0
}
 8007e86:	4618      	mov	r0, r3
 8007e88:	3714      	adds	r7, #20
 8007e8a:	46bd      	mov	sp, r7
 8007e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e90:	4770      	bx	lr
	...

08007e94 <MY_FLASH_EraseSector>:
static uint8_t MY_SectorNum;

//functions definitions
//1. Erase Sector
static void MY_FLASH_EraseSector(void)
{
 8007e94:	b580      	push	{r7, lr}
 8007e96:	af00      	add	r7, sp, #0
	HAL_FLASH_Unlock();
 8007e98:	f7fa ff6c 	bl	8002d74 <HAL_FLASH_Unlock>
	//Erase the required Flash sector
	FLASH_Erase_Sector(MY_SectorNum, FLASH_VOLTAGE_RANGE_3);
 8007e9c:	4b04      	ldr	r3, [pc, #16]	@ (8007eb0 <MY_FLASH_EraseSector+0x1c>)
 8007e9e:	781b      	ldrb	r3, [r3, #0]
 8007ea0:	2102      	movs	r1, #2
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	f7fb f8c8 	bl	8003038 <FLASH_Erase_Sector>
	HAL_FLASH_Lock();
 8007ea8:	f7fa ff86 	bl	8002db8 <HAL_FLASH_Lock>
}
 8007eac:	bf00      	nop
 8007eae:	bd80      	pop	{r7, pc}
 8007eb0:	200002e0 	.word	0x200002e0

08007eb4 <MY_FLASH_SetSectorAddrs>:

//2. Set Sector Adress
void MY_FLASH_SetSectorAddrs(uint8_t sector, uint32_t addrs)
{
 8007eb4:	b480      	push	{r7}
 8007eb6:	b083      	sub	sp, #12
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	4603      	mov	r3, r0
 8007ebc:	6039      	str	r1, [r7, #0]
 8007ebe:	71fb      	strb	r3, [r7, #7]
	MY_SectorNum = sector;
 8007ec0:	4a05      	ldr	r2, [pc, #20]	@ (8007ed8 <MY_FLASH_SetSectorAddrs+0x24>)
 8007ec2:	79fb      	ldrb	r3, [r7, #7]
 8007ec4:	7013      	strb	r3, [r2, #0]
	MY_SectorAddrs = addrs;
 8007ec6:	4a05      	ldr	r2, [pc, #20]	@ (8007edc <MY_FLASH_SetSectorAddrs+0x28>)
 8007ec8:	683b      	ldr	r3, [r7, #0]
 8007eca:	6013      	str	r3, [r2, #0]
}
 8007ecc:	bf00      	nop
 8007ece:	370c      	adds	r7, #12
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed6:	4770      	bx	lr
 8007ed8:	200002e0 	.word	0x200002e0
 8007edc:	200002dc 	.word	0x200002dc

08007ee0 <MY_FLASH_WriteN>:

//3. Write Flash
void MY_FLASH_WriteN(uint32_t idx, void *wrBuf, uint32_t Nsize, DataTypeDef dataType)
{
 8007ee0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007ee4:	b088      	sub	sp, #32
 8007ee6:	af00      	add	r7, sp, #0
 8007ee8:	60f8      	str	r0, [r7, #12]
 8007eea:	60b9      	str	r1, [r7, #8]
 8007eec:	607a      	str	r2, [r7, #4]
 8007eee:	70fb      	strb	r3, [r7, #3]
	uint32_t flashAddress = MY_SectorAddrs + idx;
 8007ef0:	4b37      	ldr	r3, [pc, #220]	@ (8007fd0 <MY_FLASH_WriteN+0xf0>)
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	68fa      	ldr	r2, [r7, #12]
 8007ef6:	4413      	add	r3, r2
 8007ef8:	61fb      	str	r3, [r7, #28]
	
	//Erase sector before write
	MY_FLASH_EraseSector();
 8007efa:	f7ff ffcb 	bl	8007e94 <MY_FLASH_EraseSector>
	
	//Unlock Flash
	HAL_FLASH_Unlock();
 8007efe:	f7fa ff39 	bl	8002d74 <HAL_FLASH_Unlock>
	//Write to Flash
	switch(dataType)
 8007f02:	78fb      	ldrb	r3, [r7, #3]
 8007f04:	2b02      	cmp	r3, #2
 8007f06:	d03f      	beq.n	8007f88 <MY_FLASH_WriteN+0xa8>
 8007f08:	2b02      	cmp	r3, #2
 8007f0a:	dc59      	bgt.n	8007fc0 <MY_FLASH_WriteN+0xe0>
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d002      	beq.n	8007f16 <MY_FLASH_WriteN+0x36>
 8007f10:	2b01      	cmp	r3, #1
 8007f12:	d01c      	beq.n	8007f4e <MY_FLASH_WriteN+0x6e>
 8007f14:	e054      	b.n	8007fc0 <MY_FLASH_WriteN+0xe0>
	{
		case DATA_TYPE_8:
				for(uint32_t i=0; i<Nsize; i++)
 8007f16:	2300      	movs	r3, #0
 8007f18:	61bb      	str	r3, [r7, #24]
 8007f1a:	e013      	b.n	8007f44 <MY_FLASH_WriteN+0x64>
				{
					HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, flashAddress , ((uint8_t *)wrBuf)[i]);
 8007f1c:	68ba      	ldr	r2, [r7, #8]
 8007f1e:	69bb      	ldr	r3, [r7, #24]
 8007f20:	4413      	add	r3, r2
 8007f22:	781b      	ldrb	r3, [r3, #0]
 8007f24:	b2db      	uxtb	r3, r3
 8007f26:	2200      	movs	r2, #0
 8007f28:	469a      	mov	sl, r3
 8007f2a:	4693      	mov	fp, r2
 8007f2c:	4652      	mov	r2, sl
 8007f2e:	465b      	mov	r3, fp
 8007f30:	69f9      	ldr	r1, [r7, #28]
 8007f32:	2000      	movs	r0, #0
 8007f34:	f7fa feca 	bl	8002ccc <HAL_FLASH_Program>
					flashAddress++;
 8007f38:	69fb      	ldr	r3, [r7, #28]
 8007f3a:	3301      	adds	r3, #1
 8007f3c:	61fb      	str	r3, [r7, #28]
				for(uint32_t i=0; i<Nsize; i++)
 8007f3e:	69bb      	ldr	r3, [r7, #24]
 8007f40:	3301      	adds	r3, #1
 8007f42:	61bb      	str	r3, [r7, #24]
 8007f44:	69ba      	ldr	r2, [r7, #24]
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	429a      	cmp	r2, r3
 8007f4a:	d3e7      	bcc.n	8007f1c <MY_FLASH_WriteN+0x3c>
				}
			break;
 8007f4c:	e038      	b.n	8007fc0 <MY_FLASH_WriteN+0xe0>
		
		case DATA_TYPE_16:
				for(uint32_t i=0; i<Nsize; i++)
 8007f4e:	2300      	movs	r3, #0
 8007f50:	617b      	str	r3, [r7, #20]
 8007f52:	e014      	b.n	8007f7e <MY_FLASH_WriteN+0x9e>
				{
					HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, flashAddress , ((uint16_t *)wrBuf)[i]);
 8007f54:	697b      	ldr	r3, [r7, #20]
 8007f56:	005b      	lsls	r3, r3, #1
 8007f58:	68ba      	ldr	r2, [r7, #8]
 8007f5a:	4413      	add	r3, r2
 8007f5c:	881b      	ldrh	r3, [r3, #0]
 8007f5e:	b29b      	uxth	r3, r3
 8007f60:	2200      	movs	r2, #0
 8007f62:	4698      	mov	r8, r3
 8007f64:	4691      	mov	r9, r2
 8007f66:	4642      	mov	r2, r8
 8007f68:	464b      	mov	r3, r9
 8007f6a:	69f9      	ldr	r1, [r7, #28]
 8007f6c:	2001      	movs	r0, #1
 8007f6e:	f7fa fead 	bl	8002ccc <HAL_FLASH_Program>
					flashAddress+=2;
 8007f72:	69fb      	ldr	r3, [r7, #28]
 8007f74:	3302      	adds	r3, #2
 8007f76:	61fb      	str	r3, [r7, #28]
				for(uint32_t i=0; i<Nsize; i++)
 8007f78:	697b      	ldr	r3, [r7, #20]
 8007f7a:	3301      	adds	r3, #1
 8007f7c:	617b      	str	r3, [r7, #20]
 8007f7e:	697a      	ldr	r2, [r7, #20]
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	429a      	cmp	r2, r3
 8007f84:	d3e6      	bcc.n	8007f54 <MY_FLASH_WriteN+0x74>
				}
			break;
 8007f86:	e01b      	b.n	8007fc0 <MY_FLASH_WriteN+0xe0>
		
		case DATA_TYPE_32:
				for(uint32_t i=0; i<Nsize; i++)
 8007f88:	2300      	movs	r3, #0
 8007f8a:	613b      	str	r3, [r7, #16]
 8007f8c:	e013      	b.n	8007fb6 <MY_FLASH_WriteN+0xd6>
				{
					HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, flashAddress , ((uint32_t *)wrBuf)[i]);
 8007f8e:	693b      	ldr	r3, [r7, #16]
 8007f90:	009b      	lsls	r3, r3, #2
 8007f92:	68ba      	ldr	r2, [r7, #8]
 8007f94:	4413      	add	r3, r2
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	2200      	movs	r2, #0
 8007f9a:	461c      	mov	r4, r3
 8007f9c:	4615      	mov	r5, r2
 8007f9e:	4622      	mov	r2, r4
 8007fa0:	462b      	mov	r3, r5
 8007fa2:	69f9      	ldr	r1, [r7, #28]
 8007fa4:	2002      	movs	r0, #2
 8007fa6:	f7fa fe91 	bl	8002ccc <HAL_FLASH_Program>
					flashAddress+=4;
 8007faa:	69fb      	ldr	r3, [r7, #28]
 8007fac:	3304      	adds	r3, #4
 8007fae:	61fb      	str	r3, [r7, #28]
				for(uint32_t i=0; i<Nsize; i++)
 8007fb0:	693b      	ldr	r3, [r7, #16]
 8007fb2:	3301      	adds	r3, #1
 8007fb4:	613b      	str	r3, [r7, #16]
 8007fb6:	693a      	ldr	r2, [r7, #16]
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	429a      	cmp	r2, r3
 8007fbc:	d3e7      	bcc.n	8007f8e <MY_FLASH_WriteN+0xae>
				}
			break;
 8007fbe:	bf00      	nop
	}
	//Lock the Flash space
	HAL_FLASH_Lock();
 8007fc0:	f7fa fefa 	bl	8002db8 <HAL_FLASH_Lock>
}
 8007fc4:	bf00      	nop
 8007fc6:	3720      	adds	r7, #32
 8007fc8:	46bd      	mov	sp, r7
 8007fca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007fce:	bf00      	nop
 8007fd0:	200002dc 	.word	0x200002dc

08007fd4 <MY_FLASH_ReadN>:
//4. Read Flash
void MY_FLASH_ReadN(uint32_t idx, void *rdBuf, uint32_t Nsize, DataTypeDef dataType)
{
 8007fd4:	b480      	push	{r7}
 8007fd6:	b089      	sub	sp, #36	@ 0x24
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	60f8      	str	r0, [r7, #12]
 8007fdc:	60b9      	str	r1, [r7, #8]
 8007fde:	607a      	str	r2, [r7, #4]
 8007fe0:	70fb      	strb	r3, [r7, #3]
	uint32_t flashAddress = MY_SectorAddrs + idx;
 8007fe2:	4b29      	ldr	r3, [pc, #164]	@ (8008088 <MY_FLASH_ReadN+0xb4>)
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	68fa      	ldr	r2, [r7, #12]
 8007fe8:	4413      	add	r3, r2
 8007fea:	61fb      	str	r3, [r7, #28]
	
	switch(dataType)
 8007fec:	78fb      	ldrb	r3, [r7, #3]
 8007fee:	2b02      	cmp	r3, #2
 8007ff0:	d02f      	beq.n	8008052 <MY_FLASH_ReadN+0x7e>
 8007ff2:	2b02      	cmp	r3, #2
 8007ff4:	dc42      	bgt.n	800807c <MY_FLASH_ReadN+0xa8>
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d002      	beq.n	8008000 <MY_FLASH_ReadN+0x2c>
 8007ffa:	2b01      	cmp	r3, #1
 8007ffc:	d014      	beq.n	8008028 <MY_FLASH_ReadN+0x54>
					*((uint32_t *)rdBuf + i) = *(uint32_t *)flashAddress;
					flashAddress+=4;
				}
			break;
	}
}
 8007ffe:	e03d      	b.n	800807c <MY_FLASH_ReadN+0xa8>
				for(uint32_t i=0; i<Nsize; i++)
 8008000:	2300      	movs	r3, #0
 8008002:	61bb      	str	r3, [r7, #24]
 8008004:	e00b      	b.n	800801e <MY_FLASH_ReadN+0x4a>
					*((uint8_t *)rdBuf + i) = *(uint8_t *)flashAddress;
 8008006:	69fa      	ldr	r2, [r7, #28]
 8008008:	68b9      	ldr	r1, [r7, #8]
 800800a:	69bb      	ldr	r3, [r7, #24]
 800800c:	440b      	add	r3, r1
 800800e:	7812      	ldrb	r2, [r2, #0]
 8008010:	701a      	strb	r2, [r3, #0]
					flashAddress++;
 8008012:	69fb      	ldr	r3, [r7, #28]
 8008014:	3301      	adds	r3, #1
 8008016:	61fb      	str	r3, [r7, #28]
				for(uint32_t i=0; i<Nsize; i++)
 8008018:	69bb      	ldr	r3, [r7, #24]
 800801a:	3301      	adds	r3, #1
 800801c:	61bb      	str	r3, [r7, #24]
 800801e:	69ba      	ldr	r2, [r7, #24]
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	429a      	cmp	r2, r3
 8008024:	d3ef      	bcc.n	8008006 <MY_FLASH_ReadN+0x32>
			break;
 8008026:	e029      	b.n	800807c <MY_FLASH_ReadN+0xa8>
				for(uint32_t i=0; i<Nsize; i++)
 8008028:	2300      	movs	r3, #0
 800802a:	617b      	str	r3, [r7, #20]
 800802c:	e00c      	b.n	8008048 <MY_FLASH_ReadN+0x74>
					*((uint16_t *)rdBuf + i) = *(uint16_t *)flashAddress;
 800802e:	69fa      	ldr	r2, [r7, #28]
 8008030:	697b      	ldr	r3, [r7, #20]
 8008032:	005b      	lsls	r3, r3, #1
 8008034:	68b9      	ldr	r1, [r7, #8]
 8008036:	440b      	add	r3, r1
 8008038:	8812      	ldrh	r2, [r2, #0]
 800803a:	801a      	strh	r2, [r3, #0]
					flashAddress+=2;
 800803c:	69fb      	ldr	r3, [r7, #28]
 800803e:	3302      	adds	r3, #2
 8008040:	61fb      	str	r3, [r7, #28]
				for(uint32_t i=0; i<Nsize; i++)
 8008042:	697b      	ldr	r3, [r7, #20]
 8008044:	3301      	adds	r3, #1
 8008046:	617b      	str	r3, [r7, #20]
 8008048:	697a      	ldr	r2, [r7, #20]
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	429a      	cmp	r2, r3
 800804e:	d3ee      	bcc.n	800802e <MY_FLASH_ReadN+0x5a>
			break;
 8008050:	e014      	b.n	800807c <MY_FLASH_ReadN+0xa8>
				for(uint32_t i=0; i<Nsize; i++)
 8008052:	2300      	movs	r3, #0
 8008054:	613b      	str	r3, [r7, #16]
 8008056:	e00c      	b.n	8008072 <MY_FLASH_ReadN+0x9e>
					*((uint32_t *)rdBuf + i) = *(uint32_t *)flashAddress;
 8008058:	69fa      	ldr	r2, [r7, #28]
 800805a:	693b      	ldr	r3, [r7, #16]
 800805c:	009b      	lsls	r3, r3, #2
 800805e:	68b9      	ldr	r1, [r7, #8]
 8008060:	440b      	add	r3, r1
 8008062:	6812      	ldr	r2, [r2, #0]
 8008064:	601a      	str	r2, [r3, #0]
					flashAddress+=4;
 8008066:	69fb      	ldr	r3, [r7, #28]
 8008068:	3304      	adds	r3, #4
 800806a:	61fb      	str	r3, [r7, #28]
				for(uint32_t i=0; i<Nsize; i++)
 800806c:	693b      	ldr	r3, [r7, #16]
 800806e:	3301      	adds	r3, #1
 8008070:	613b      	str	r3, [r7, #16]
 8008072:	693a      	ldr	r2, [r7, #16]
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	429a      	cmp	r2, r3
 8008078:	d3ee      	bcc.n	8008058 <MY_FLASH_ReadN+0x84>
			break;
 800807a:	bf00      	nop
}
 800807c:	bf00      	nop
 800807e:	3724      	adds	r7, #36	@ 0x24
 8008080:	46bd      	mov	sp, r7
 8008082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008086:	4770      	bx	lr
 8008088:	200002dc 	.word	0x200002dc

0800808c <write_flash>:
void write_flash(uint32_t idx, uint8_t *wrBuf, uint32_t Nsize){
 800808c:	b580      	push	{r7, lr}
 800808e:	f5ad 6d80 	sub.w	sp, sp, #1024	@ 0x400
 8008092:	af00      	add	r7, sp, #0
 8008094:	f507 6380 	add.w	r3, r7, #1024	@ 0x400
 8008098:	f5a3 737d 	sub.w	r3, r3, #1012	@ 0x3f4
 800809c:	6018      	str	r0, [r3, #0]
 800809e:	f507 6380 	add.w	r3, r7, #1024	@ 0x400
 80080a2:	f5a3 737e 	sub.w	r3, r3, #1016	@ 0x3f8
 80080a6:	6019      	str	r1, [r3, #0]
 80080a8:	f507 6380 	add.w	r3, r7, #1024	@ 0x400
 80080ac:	f5a3 737f 	sub.w	r3, r3, #1020	@ 0x3fc
 80080b0:	601a      	str	r2, [r3, #0]
	uint8_t temp_mem[1000];
	MY_FLASH_ReadN(0,temp_mem,500,DATA_TYPE_8);
 80080b2:	f107 0114 	add.w	r1, r7, #20
 80080b6:	2300      	movs	r3, #0
 80080b8:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80080bc:	2000      	movs	r0, #0
 80080be:	f7ff ff89 	bl	8007fd4 <MY_FLASH_ReadN>
	for (int i=0;i<Nsize;i++){
 80080c2:	2300      	movs	r3, #0
 80080c4:	f8c7 33fc 	str.w	r3, [r7, #1020]	@ 0x3fc
 80080c8:	e01a      	b.n	8008100 <write_flash+0x74>
		temp_mem[idx+i] = wrBuf[i];
 80080ca:	f8d7 33fc 	ldr.w	r3, [r7, #1020]	@ 0x3fc
 80080ce:	f507 6280 	add.w	r2, r7, #1024	@ 0x400
 80080d2:	f5a2 727e 	sub.w	r2, r2, #1016	@ 0x3f8
 80080d6:	6812      	ldr	r2, [r2, #0]
 80080d8:	441a      	add	r2, r3
 80080da:	f8d7 13fc 	ldr.w	r1, [r7, #1020]	@ 0x3fc
 80080de:	f507 6380 	add.w	r3, r7, #1024	@ 0x400
 80080e2:	f5a3 737d 	sub.w	r3, r3, #1012	@ 0x3f4
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	440b      	add	r3, r1
 80080ea:	7811      	ldrb	r1, [r2, #0]
 80080ec:	f507 6280 	add.w	r2, r7, #1024	@ 0x400
 80080f0:	f5a2 727b 	sub.w	r2, r2, #1004	@ 0x3ec
 80080f4:	54d1      	strb	r1, [r2, r3]
	for (int i=0;i<Nsize;i++){
 80080f6:	f8d7 33fc 	ldr.w	r3, [r7, #1020]	@ 0x3fc
 80080fa:	3301      	adds	r3, #1
 80080fc:	f8c7 33fc 	str.w	r3, [r7, #1020]	@ 0x3fc
 8008100:	f8d7 33fc 	ldr.w	r3, [r7, #1020]	@ 0x3fc
 8008104:	f507 6280 	add.w	r2, r7, #1024	@ 0x400
 8008108:	f5a2 727f 	sub.w	r2, r2, #1020	@ 0x3fc
 800810c:	6812      	ldr	r2, [r2, #0]
 800810e:	429a      	cmp	r2, r3
 8008110:	d8db      	bhi.n	80080ca <write_flash+0x3e>
	}
	MY_FLASH_WriteN(0,temp_mem,500,DATA_TYPE_8);
 8008112:	f107 0114 	add.w	r1, r7, #20
 8008116:	2300      	movs	r3, #0
 8008118:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800811c:	2000      	movs	r0, #0
 800811e:	f7ff fedf 	bl	8007ee0 <MY_FLASH_WriteN>
}
 8008122:	bf00      	nop
 8008124:	f507 6780 	add.w	r7, r7, #1024	@ 0x400
 8008128:	46bd      	mov	sp, r7
 800812a:	bd80      	pop	{r7, pc}

0800812c <ssd1306_clear>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_clear(void){
 800812c:	b580      	push	{r7, lr}
 800812e:	af00      	add	r7, sp, #0
  ssd1306_Fill(Black);
 8008130:	2000      	movs	r0, #0
 8008132:	f000 f8a7 	bl	8008284 <ssd1306_Fill>
  ssd1306_UpdateScreen();
 8008136:	f000 f8bd 	bl	80082b4 <ssd1306_UpdateScreen>
}
 800813a:	bf00      	nop
 800813c:	bd80      	pop	{r7, pc}

0800813e <ssd1306_Reset>:
void ssd1306_Reset(void) {
 800813e:	b480      	push	{r7}
 8008140:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8008142:	bf00      	nop
 8008144:	46bd      	mov	sp, r7
 8008146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800814a:	4770      	bx	lr

0800814c <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 800814c:	b580      	push	{r7, lr}
 800814e:	b086      	sub	sp, #24
 8008150:	af04      	add	r7, sp, #16
 8008152:	4603      	mov	r3, r0
 8008154:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8008156:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800815a:	9302      	str	r3, [sp, #8]
 800815c:	2301      	movs	r3, #1
 800815e:	9301      	str	r3, [sp, #4]
 8008160:	1dfb      	adds	r3, r7, #7
 8008162:	9300      	str	r3, [sp, #0]
 8008164:	2301      	movs	r3, #1
 8008166:	2200      	movs	r2, #0
 8008168:	2178      	movs	r1, #120	@ 0x78
 800816a:	4803      	ldr	r0, [pc, #12]	@ (8008178 <ssd1306_WriteCommand+0x2c>)
 800816c:	f7fb faa4 	bl	80036b8 <HAL_I2C_Mem_Write>
}
 8008170:	bf00      	nop
 8008172:	3708      	adds	r7, #8
 8008174:	46bd      	mov	sp, r7
 8008176:	bd80      	pop	{r7, pc}
 8008178:	20000184 	.word	0x20000184

0800817c <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 800817c:	b580      	push	{r7, lr}
 800817e:	b086      	sub	sp, #24
 8008180:	af04      	add	r7, sp, #16
 8008182:	6078      	str	r0, [r7, #4]
 8008184:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8008186:	683b      	ldr	r3, [r7, #0]
 8008188:	b29b      	uxth	r3, r3
 800818a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800818e:	9202      	str	r2, [sp, #8]
 8008190:	9301      	str	r3, [sp, #4]
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	9300      	str	r3, [sp, #0]
 8008196:	2301      	movs	r3, #1
 8008198:	2240      	movs	r2, #64	@ 0x40
 800819a:	2178      	movs	r1, #120	@ 0x78
 800819c:	4803      	ldr	r0, [pc, #12]	@ (80081ac <ssd1306_WriteData+0x30>)
 800819e:	f7fb fa8b 	bl	80036b8 <HAL_I2C_Mem_Write>
}
 80081a2:	bf00      	nop
 80081a4:	3708      	adds	r7, #8
 80081a6:	46bd      	mov	sp, r7
 80081a8:	bd80      	pop	{r7, pc}
 80081aa:	bf00      	nop
 80081ac:	20000184 	.word	0x20000184

080081b0 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 80081b0:	b580      	push	{r7, lr}
 80081b2:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 80081b4:	f7ff ffc3 	bl	800813e <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 80081b8:	2064      	movs	r0, #100	@ 0x64
 80081ba:	f7fa fc35 	bl	8002a28 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 80081be:	2000      	movs	r0, #0
 80081c0:	f000 fa90 	bl	80086e4 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 80081c4:	2020      	movs	r0, #32
 80081c6:	f7ff ffc1 	bl	800814c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 80081ca:	2000      	movs	r0, #0
 80081cc:	f7ff ffbe 	bl	800814c <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80081d0:	20b0      	movs	r0, #176	@ 0xb0
 80081d2:	f7ff ffbb 	bl	800814c <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 80081d6:	20c8      	movs	r0, #200	@ 0xc8
 80081d8:	f7ff ffb8 	bl	800814c <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 80081dc:	2000      	movs	r0, #0
 80081de:	f7ff ffb5 	bl	800814c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 80081e2:	2010      	movs	r0, #16
 80081e4:	f7ff ffb2 	bl	800814c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 80081e8:	2040      	movs	r0, #64	@ 0x40
 80081ea:	f7ff ffaf 	bl	800814c <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 80081ee:	20ff      	movs	r0, #255	@ 0xff
 80081f0:	f000 fa64 	bl	80086bc <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 80081f4:	20a1      	movs	r0, #161	@ 0xa1
 80081f6:	f7ff ffa9 	bl	800814c <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 80081fa:	20a6      	movs	r0, #166	@ 0xa6
 80081fc:	f7ff ffa6 	bl	800814c <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8008200:	20a8      	movs	r0, #168	@ 0xa8
 8008202:	f7ff ffa3 	bl	800814c <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
 8008206:	201f      	movs	r0, #31
 8008208:	f7ff ffa0 	bl	800814c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800820c:	20a4      	movs	r0, #164	@ 0xa4
 800820e:	f7ff ff9d 	bl	800814c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8008212:	20d3      	movs	r0, #211	@ 0xd3
 8008214:	f7ff ff9a 	bl	800814c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8008218:	2000      	movs	r0, #0
 800821a:	f7ff ff97 	bl	800814c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 800821e:	20d5      	movs	r0, #213	@ 0xd5
 8008220:	f7ff ff94 	bl	800814c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8008224:	20f0      	movs	r0, #240	@ 0xf0
 8008226:	f7ff ff91 	bl	800814c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 800822a:	20d9      	movs	r0, #217	@ 0xd9
 800822c:	f7ff ff8e 	bl	800814c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8008230:	2022      	movs	r0, #34	@ 0x22
 8008232:	f7ff ff8b 	bl	800814c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8008236:	20da      	movs	r0, #218	@ 0xda
 8008238:	f7ff ff88 	bl	800814c <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
 800823c:	2002      	movs	r0, #2
 800823e:	f7ff ff85 	bl	800814c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8008242:	20db      	movs	r0, #219	@ 0xdb
 8008244:	f7ff ff82 	bl	800814c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8008248:	2020      	movs	r0, #32
 800824a:	f7ff ff7f 	bl	800814c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 800824e:	208d      	movs	r0, #141	@ 0x8d
 8008250:	f7ff ff7c 	bl	800814c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8008254:	2014      	movs	r0, #20
 8008256:	f7ff ff79 	bl	800814c <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 800825a:	2001      	movs	r0, #1
 800825c:	f000 fa42 	bl	80086e4 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8008260:	2000      	movs	r0, #0
 8008262:	f000 f80f 	bl	8008284 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8008266:	f000 f825 	bl	80082b4 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 800826a:	4b05      	ldr	r3, [pc, #20]	@ (8008280 <ssd1306_Init+0xd0>)
 800826c:	2200      	movs	r2, #0
 800826e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8008270:	4b03      	ldr	r3, [pc, #12]	@ (8008280 <ssd1306_Init+0xd0>)
 8008272:	2200      	movs	r2, #0
 8008274:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8008276:	4b02      	ldr	r3, [pc, #8]	@ (8008280 <ssd1306_Init+0xd0>)
 8008278:	2201      	movs	r2, #1
 800827a:	711a      	strb	r2, [r3, #4]
}
 800827c:	bf00      	nop
 800827e:	bd80      	pop	{r7, pc}
 8008280:	200004e4 	.word	0x200004e4

08008284 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8008284:	b580      	push	{r7, lr}
 8008286:	b082      	sub	sp, #8
 8008288:	af00      	add	r7, sp, #0
 800828a:	4603      	mov	r3, r0
 800828c:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800828e:	79fb      	ldrb	r3, [r7, #7]
 8008290:	2b00      	cmp	r3, #0
 8008292:	d101      	bne.n	8008298 <ssd1306_Fill+0x14>
 8008294:	2300      	movs	r3, #0
 8008296:	e000      	b.n	800829a <ssd1306_Fill+0x16>
 8008298:	23ff      	movs	r3, #255	@ 0xff
 800829a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800829e:	4619      	mov	r1, r3
 80082a0:	4803      	ldr	r0, [pc, #12]	@ (80082b0 <ssd1306_Fill+0x2c>)
 80082a2:	f004 fb03 	bl	800c8ac <memset>
}
 80082a6:	bf00      	nop
 80082a8:	3708      	adds	r7, #8
 80082aa:	46bd      	mov	sp, r7
 80082ac:	bd80      	pop	{r7, pc}
 80082ae:	bf00      	nop
 80082b0:	200002e4 	.word	0x200002e4

080082b4 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 80082b4:	b580      	push	{r7, lr}
 80082b6:	b082      	sub	sp, #8
 80082b8:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80082ba:	2300      	movs	r3, #0
 80082bc:	71fb      	strb	r3, [r7, #7]
 80082be:	e016      	b.n	80082ee <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 80082c0:	79fb      	ldrb	r3, [r7, #7]
 80082c2:	3b50      	subs	r3, #80	@ 0x50
 80082c4:	b2db      	uxtb	r3, r3
 80082c6:	4618      	mov	r0, r3
 80082c8:	f7ff ff40 	bl	800814c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 80082cc:	2000      	movs	r0, #0
 80082ce:	f7ff ff3d 	bl	800814c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 80082d2:	2010      	movs	r0, #16
 80082d4:	f7ff ff3a 	bl	800814c <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 80082d8:	79fb      	ldrb	r3, [r7, #7]
 80082da:	01db      	lsls	r3, r3, #7
 80082dc:	4a08      	ldr	r2, [pc, #32]	@ (8008300 <ssd1306_UpdateScreen+0x4c>)
 80082de:	4413      	add	r3, r2
 80082e0:	2180      	movs	r1, #128	@ 0x80
 80082e2:	4618      	mov	r0, r3
 80082e4:	f7ff ff4a 	bl	800817c <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80082e8:	79fb      	ldrb	r3, [r7, #7]
 80082ea:	3301      	adds	r3, #1
 80082ec:	71fb      	strb	r3, [r7, #7]
 80082ee:	79fb      	ldrb	r3, [r7, #7]
 80082f0:	2b03      	cmp	r3, #3
 80082f2:	d9e5      	bls.n	80082c0 <ssd1306_UpdateScreen+0xc>
    }
}
 80082f4:	bf00      	nop
 80082f6:	bf00      	nop
 80082f8:	3708      	adds	r7, #8
 80082fa:	46bd      	mov	sp, r7
 80082fc:	bd80      	pop	{r7, pc}
 80082fe:	bf00      	nop
 8008300:	200002e4 	.word	0x200002e4

08008304 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8008304:	b480      	push	{r7}
 8008306:	b083      	sub	sp, #12
 8008308:	af00      	add	r7, sp, #0
 800830a:	4603      	mov	r3, r0
 800830c:	71fb      	strb	r3, [r7, #7]
 800830e:	460b      	mov	r3, r1
 8008310:	71bb      	strb	r3, [r7, #6]
 8008312:	4613      	mov	r3, r2
 8008314:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8008316:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800831a:	2b00      	cmp	r3, #0
 800831c:	db3d      	blt.n	800839a <ssd1306_DrawPixel+0x96>
 800831e:	79bb      	ldrb	r3, [r7, #6]
 8008320:	2b1f      	cmp	r3, #31
 8008322:	d83a      	bhi.n	800839a <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8008324:	797b      	ldrb	r3, [r7, #5]
 8008326:	2b01      	cmp	r3, #1
 8008328:	d11a      	bne.n	8008360 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800832a:	79fa      	ldrb	r2, [r7, #7]
 800832c:	79bb      	ldrb	r3, [r7, #6]
 800832e:	08db      	lsrs	r3, r3, #3
 8008330:	b2d8      	uxtb	r0, r3
 8008332:	4603      	mov	r3, r0
 8008334:	01db      	lsls	r3, r3, #7
 8008336:	4413      	add	r3, r2
 8008338:	4a1b      	ldr	r2, [pc, #108]	@ (80083a8 <ssd1306_DrawPixel+0xa4>)
 800833a:	5cd3      	ldrb	r3, [r2, r3]
 800833c:	b25a      	sxtb	r2, r3
 800833e:	79bb      	ldrb	r3, [r7, #6]
 8008340:	f003 0307 	and.w	r3, r3, #7
 8008344:	2101      	movs	r1, #1
 8008346:	fa01 f303 	lsl.w	r3, r1, r3
 800834a:	b25b      	sxtb	r3, r3
 800834c:	4313      	orrs	r3, r2
 800834e:	b259      	sxtb	r1, r3
 8008350:	79fa      	ldrb	r2, [r7, #7]
 8008352:	4603      	mov	r3, r0
 8008354:	01db      	lsls	r3, r3, #7
 8008356:	4413      	add	r3, r2
 8008358:	b2c9      	uxtb	r1, r1
 800835a:	4a13      	ldr	r2, [pc, #76]	@ (80083a8 <ssd1306_DrawPixel+0xa4>)
 800835c:	54d1      	strb	r1, [r2, r3]
 800835e:	e01d      	b.n	800839c <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8008360:	79fa      	ldrb	r2, [r7, #7]
 8008362:	79bb      	ldrb	r3, [r7, #6]
 8008364:	08db      	lsrs	r3, r3, #3
 8008366:	b2d8      	uxtb	r0, r3
 8008368:	4603      	mov	r3, r0
 800836a:	01db      	lsls	r3, r3, #7
 800836c:	4413      	add	r3, r2
 800836e:	4a0e      	ldr	r2, [pc, #56]	@ (80083a8 <ssd1306_DrawPixel+0xa4>)
 8008370:	5cd3      	ldrb	r3, [r2, r3]
 8008372:	b25a      	sxtb	r2, r3
 8008374:	79bb      	ldrb	r3, [r7, #6]
 8008376:	f003 0307 	and.w	r3, r3, #7
 800837a:	2101      	movs	r1, #1
 800837c:	fa01 f303 	lsl.w	r3, r1, r3
 8008380:	b25b      	sxtb	r3, r3
 8008382:	43db      	mvns	r3, r3
 8008384:	b25b      	sxtb	r3, r3
 8008386:	4013      	ands	r3, r2
 8008388:	b259      	sxtb	r1, r3
 800838a:	79fa      	ldrb	r2, [r7, #7]
 800838c:	4603      	mov	r3, r0
 800838e:	01db      	lsls	r3, r3, #7
 8008390:	4413      	add	r3, r2
 8008392:	b2c9      	uxtb	r1, r1
 8008394:	4a04      	ldr	r2, [pc, #16]	@ (80083a8 <ssd1306_DrawPixel+0xa4>)
 8008396:	54d1      	strb	r1, [r2, r3]
 8008398:	e000      	b.n	800839c <ssd1306_DrawPixel+0x98>
        return;
 800839a:	bf00      	nop
    }
}
 800839c:	370c      	adds	r7, #12
 800839e:	46bd      	mov	sp, r7
 80083a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a4:	4770      	bx	lr
 80083a6:	bf00      	nop
 80083a8:	200002e4 	.word	0x200002e4

080083ac <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 80083ac:	b590      	push	{r4, r7, lr}
 80083ae:	b089      	sub	sp, #36	@ 0x24
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	4604      	mov	r4, r0
 80083b4:	4638      	mov	r0, r7
 80083b6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 80083ba:	4623      	mov	r3, r4
 80083bc:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 80083be:	7bfb      	ldrb	r3, [r7, #15]
 80083c0:	2b1f      	cmp	r3, #31
 80083c2:	d902      	bls.n	80083ca <ssd1306_WriteChar+0x1e>
 80083c4:	7bfb      	ldrb	r3, [r7, #15]
 80083c6:	2b7e      	cmp	r3, #126	@ 0x7e
 80083c8:	d901      	bls.n	80083ce <ssd1306_WriteChar+0x22>
        return 0;
 80083ca:	2300      	movs	r3, #0
 80083cc:	e077      	b.n	80084be <ssd1306_WriteChar+0x112>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 80083ce:	4b3e      	ldr	r3, [pc, #248]	@ (80084c8 <ssd1306_WriteChar+0x11c>)
 80083d0:	881b      	ldrh	r3, [r3, #0]
 80083d2:	461a      	mov	r2, r3
 80083d4:	783b      	ldrb	r3, [r7, #0]
 80083d6:	4413      	add	r3, r2
 80083d8:	2b80      	cmp	r3, #128	@ 0x80
 80083da:	dc06      	bgt.n	80083ea <ssd1306_WriteChar+0x3e>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 80083dc:	4b3a      	ldr	r3, [pc, #232]	@ (80084c8 <ssd1306_WriteChar+0x11c>)
 80083de:	885b      	ldrh	r3, [r3, #2]
 80083e0:	461a      	mov	r2, r3
 80083e2:	787b      	ldrb	r3, [r7, #1]
 80083e4:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 80083e6:	2b20      	cmp	r3, #32
 80083e8:	dd01      	ble.n	80083ee <ssd1306_WriteChar+0x42>
    {
        // Not enough space on current line
        return 0;
 80083ea:	2300      	movs	r3, #0
 80083ec:	e067      	b.n	80084be <ssd1306_WriteChar+0x112>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 80083ee:	2300      	movs	r3, #0
 80083f0:	61fb      	str	r3, [r7, #28]
 80083f2:	e04e      	b.n	8008492 <ssd1306_WriteChar+0xe6>
        b = Font.data[(ch - 32) * Font.height + i];
 80083f4:	687a      	ldr	r2, [r7, #4]
 80083f6:	7bfb      	ldrb	r3, [r7, #15]
 80083f8:	3b20      	subs	r3, #32
 80083fa:	7879      	ldrb	r1, [r7, #1]
 80083fc:	fb01 f303 	mul.w	r3, r1, r3
 8008400:	4619      	mov	r1, r3
 8008402:	69fb      	ldr	r3, [r7, #28]
 8008404:	440b      	add	r3, r1
 8008406:	005b      	lsls	r3, r3, #1
 8008408:	4413      	add	r3, r2
 800840a:	881b      	ldrh	r3, [r3, #0]
 800840c:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.width; j++) {
 800840e:	2300      	movs	r3, #0
 8008410:	61bb      	str	r3, [r7, #24]
 8008412:	e036      	b.n	8008482 <ssd1306_WriteChar+0xd6>
            if((b << j) & 0x8000)  {
 8008414:	697a      	ldr	r2, [r7, #20]
 8008416:	69bb      	ldr	r3, [r7, #24]
 8008418:	fa02 f303 	lsl.w	r3, r2, r3
 800841c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008420:	2b00      	cmp	r3, #0
 8008422:	d013      	beq.n	800844c <ssd1306_WriteChar+0xa0>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8008424:	4b28      	ldr	r3, [pc, #160]	@ (80084c8 <ssd1306_WriteChar+0x11c>)
 8008426:	881b      	ldrh	r3, [r3, #0]
 8008428:	b2da      	uxtb	r2, r3
 800842a:	69bb      	ldr	r3, [r7, #24]
 800842c:	b2db      	uxtb	r3, r3
 800842e:	4413      	add	r3, r2
 8008430:	b2d8      	uxtb	r0, r3
 8008432:	4b25      	ldr	r3, [pc, #148]	@ (80084c8 <ssd1306_WriteChar+0x11c>)
 8008434:	885b      	ldrh	r3, [r3, #2]
 8008436:	b2da      	uxtb	r2, r3
 8008438:	69fb      	ldr	r3, [r7, #28]
 800843a:	b2db      	uxtb	r3, r3
 800843c:	4413      	add	r3, r2
 800843e:	b2db      	uxtb	r3, r3
 8008440:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8008444:	4619      	mov	r1, r3
 8008446:	f7ff ff5d 	bl	8008304 <ssd1306_DrawPixel>
 800844a:	e017      	b.n	800847c <ssd1306_WriteChar+0xd0>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 800844c:	4b1e      	ldr	r3, [pc, #120]	@ (80084c8 <ssd1306_WriteChar+0x11c>)
 800844e:	881b      	ldrh	r3, [r3, #0]
 8008450:	b2da      	uxtb	r2, r3
 8008452:	69bb      	ldr	r3, [r7, #24]
 8008454:	b2db      	uxtb	r3, r3
 8008456:	4413      	add	r3, r2
 8008458:	b2d8      	uxtb	r0, r3
 800845a:	4b1b      	ldr	r3, [pc, #108]	@ (80084c8 <ssd1306_WriteChar+0x11c>)
 800845c:	885b      	ldrh	r3, [r3, #2]
 800845e:	b2da      	uxtb	r2, r3
 8008460:	69fb      	ldr	r3, [r7, #28]
 8008462:	b2db      	uxtb	r3, r3
 8008464:	4413      	add	r3, r2
 8008466:	b2d9      	uxtb	r1, r3
 8008468:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800846c:	2b00      	cmp	r3, #0
 800846e:	bf0c      	ite	eq
 8008470:	2301      	moveq	r3, #1
 8008472:	2300      	movne	r3, #0
 8008474:	b2db      	uxtb	r3, r3
 8008476:	461a      	mov	r2, r3
 8008478:	f7ff ff44 	bl	8008304 <ssd1306_DrawPixel>
        for(j = 0; j < Font.width; j++) {
 800847c:	69bb      	ldr	r3, [r7, #24]
 800847e:	3301      	adds	r3, #1
 8008480:	61bb      	str	r3, [r7, #24]
 8008482:	783b      	ldrb	r3, [r7, #0]
 8008484:	461a      	mov	r2, r3
 8008486:	69bb      	ldr	r3, [r7, #24]
 8008488:	4293      	cmp	r3, r2
 800848a:	d3c3      	bcc.n	8008414 <ssd1306_WriteChar+0x68>
    for(i = 0; i < Font.height; i++) {
 800848c:	69fb      	ldr	r3, [r7, #28]
 800848e:	3301      	adds	r3, #1
 8008490:	61fb      	str	r3, [r7, #28]
 8008492:	787b      	ldrb	r3, [r7, #1]
 8008494:	461a      	mov	r2, r3
 8008496:	69fb      	ldr	r3, [r7, #28]
 8008498:	4293      	cmp	r3, r2
 800849a:	d3ab      	bcc.n	80083f4 <ssd1306_WriteChar+0x48>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.char_width ? Font.char_width[ch - 32] : Font.width;
 800849c:	4b0a      	ldr	r3, [pc, #40]	@ (80084c8 <ssd1306_WriteChar+0x11c>)
 800849e:	881b      	ldrh	r3, [r3, #0]
 80084a0:	68ba      	ldr	r2, [r7, #8]
 80084a2:	2a00      	cmp	r2, #0
 80084a4:	d005      	beq.n	80084b2 <ssd1306_WriteChar+0x106>
 80084a6:	68b9      	ldr	r1, [r7, #8]
 80084a8:	7bfa      	ldrb	r2, [r7, #15]
 80084aa:	3a20      	subs	r2, #32
 80084ac:	440a      	add	r2, r1
 80084ae:	7812      	ldrb	r2, [r2, #0]
 80084b0:	e000      	b.n	80084b4 <ssd1306_WriteChar+0x108>
 80084b2:	783a      	ldrb	r2, [r7, #0]
 80084b4:	4413      	add	r3, r2
 80084b6:	b29a      	uxth	r2, r3
 80084b8:	4b03      	ldr	r3, [pc, #12]	@ (80084c8 <ssd1306_WriteChar+0x11c>)
 80084ba:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 80084bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80084be:	4618      	mov	r0, r3
 80084c0:	3724      	adds	r7, #36	@ 0x24
 80084c2:	46bd      	mov	sp, r7
 80084c4:	bd90      	pop	{r4, r7, pc}
 80084c6:	bf00      	nop
 80084c8:	200004e4 	.word	0x200004e4

080084cc <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 80084cc:	b580      	push	{r7, lr}
 80084ce:	b086      	sub	sp, #24
 80084d0:	af02      	add	r7, sp, #8
 80084d2:	60f8      	str	r0, [r7, #12]
 80084d4:	4638      	mov	r0, r7
 80084d6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 80084da:	e013      	b.n	8008504 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	7818      	ldrb	r0, [r3, #0]
 80084e0:	7e3b      	ldrb	r3, [r7, #24]
 80084e2:	9300      	str	r3, [sp, #0]
 80084e4:	463b      	mov	r3, r7
 80084e6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80084e8:	f7ff ff60 	bl	80083ac <ssd1306_WriteChar>
 80084ec:	4603      	mov	r3, r0
 80084ee:	461a      	mov	r2, r3
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	781b      	ldrb	r3, [r3, #0]
 80084f4:	429a      	cmp	r2, r3
 80084f6:	d002      	beq.n	80084fe <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	781b      	ldrb	r3, [r3, #0]
 80084fc:	e008      	b.n	8008510 <ssd1306_WriteString+0x44>
        }
        str++;
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	3301      	adds	r3, #1
 8008502:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	781b      	ldrb	r3, [r3, #0]
 8008508:	2b00      	cmp	r3, #0
 800850a:	d1e7      	bne.n	80084dc <ssd1306_WriteString+0x10>
    }
    
    // Everything ok
    return *str;
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	781b      	ldrb	r3, [r3, #0]
}
 8008510:	4618      	mov	r0, r3
 8008512:	3710      	adds	r7, #16
 8008514:	46bd      	mov	sp, r7
 8008516:	bd80      	pop	{r7, pc}

08008518 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8008518:	b480      	push	{r7}
 800851a:	b083      	sub	sp, #12
 800851c:	af00      	add	r7, sp, #0
 800851e:	4603      	mov	r3, r0
 8008520:	460a      	mov	r2, r1
 8008522:	71fb      	strb	r3, [r7, #7]
 8008524:	4613      	mov	r3, r2
 8008526:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8008528:	79fb      	ldrb	r3, [r7, #7]
 800852a:	b29a      	uxth	r2, r3
 800852c:	4b05      	ldr	r3, [pc, #20]	@ (8008544 <ssd1306_SetCursor+0x2c>)
 800852e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8008530:	79bb      	ldrb	r3, [r7, #6]
 8008532:	b29a      	uxth	r2, r3
 8008534:	4b03      	ldr	r3, [pc, #12]	@ (8008544 <ssd1306_SetCursor+0x2c>)
 8008536:	805a      	strh	r2, [r3, #2]
}
 8008538:	bf00      	nop
 800853a:	370c      	adds	r7, #12
 800853c:	46bd      	mov	sp, r7
 800853e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008542:	4770      	bx	lr
 8008544:	200004e4 	.word	0x200004e4

08008548 <ssd1306_Line>:

/* Draw line by Bresenhem's algorithm */
void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8008548:	b590      	push	{r4, r7, lr}
 800854a:	b089      	sub	sp, #36	@ 0x24
 800854c:	af00      	add	r7, sp, #0
 800854e:	4604      	mov	r4, r0
 8008550:	4608      	mov	r0, r1
 8008552:	4611      	mov	r1, r2
 8008554:	461a      	mov	r2, r3
 8008556:	4623      	mov	r3, r4
 8008558:	71fb      	strb	r3, [r7, #7]
 800855a:	4603      	mov	r3, r0
 800855c:	71bb      	strb	r3, [r7, #6]
 800855e:	460b      	mov	r3, r1
 8008560:	717b      	strb	r3, [r7, #5]
 8008562:	4613      	mov	r3, r2
 8008564:	713b      	strb	r3, [r7, #4]
    int32_t deltaX = abs(x2 - x1);
 8008566:	797a      	ldrb	r2, [r7, #5]
 8008568:	79fb      	ldrb	r3, [r7, #7]
 800856a:	1ad3      	subs	r3, r2, r3
 800856c:	2b00      	cmp	r3, #0
 800856e:	bfb8      	it	lt
 8008570:	425b      	neglt	r3, r3
 8008572:	61bb      	str	r3, [r7, #24]
    int32_t deltaY = abs(y2 - y1);
 8008574:	793a      	ldrb	r2, [r7, #4]
 8008576:	79bb      	ldrb	r3, [r7, #6]
 8008578:	1ad3      	subs	r3, r2, r3
 800857a:	2b00      	cmp	r3, #0
 800857c:	bfb8      	it	lt
 800857e:	425b      	neglt	r3, r3
 8008580:	617b      	str	r3, [r7, #20]
    int32_t signX = ((x1 < x2) ? 1 : -1);
 8008582:	79fa      	ldrb	r2, [r7, #7]
 8008584:	797b      	ldrb	r3, [r7, #5]
 8008586:	429a      	cmp	r2, r3
 8008588:	d201      	bcs.n	800858e <ssd1306_Line+0x46>
 800858a:	2301      	movs	r3, #1
 800858c:	e001      	b.n	8008592 <ssd1306_Line+0x4a>
 800858e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008592:	613b      	str	r3, [r7, #16]
    int32_t signY = ((y1 < y2) ? 1 : -1);
 8008594:	79ba      	ldrb	r2, [r7, #6]
 8008596:	793b      	ldrb	r3, [r7, #4]
 8008598:	429a      	cmp	r2, r3
 800859a:	d201      	bcs.n	80085a0 <ssd1306_Line+0x58>
 800859c:	2301      	movs	r3, #1
 800859e:	e001      	b.n	80085a4 <ssd1306_Line+0x5c>
 80085a0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80085a4:	60fb      	str	r3, [r7, #12]
    int32_t error = deltaX - deltaY;
 80085a6:	69ba      	ldr	r2, [r7, #24]
 80085a8:	697b      	ldr	r3, [r7, #20]
 80085aa:	1ad3      	subs	r3, r2, r3
 80085ac:	61fb      	str	r3, [r7, #28]
    int32_t error2;
    
    ssd1306_DrawPixel(x2, y2, color);
 80085ae:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 80085b2:	7939      	ldrb	r1, [r7, #4]
 80085b4:	797b      	ldrb	r3, [r7, #5]
 80085b6:	4618      	mov	r0, r3
 80085b8:	f7ff fea4 	bl	8008304 <ssd1306_DrawPixel>

    while((x1 != x2) || (y1 != y2)) {
 80085bc:	e024      	b.n	8008608 <ssd1306_Line+0xc0>
        ssd1306_DrawPixel(x1, y1, color);
 80085be:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 80085c2:	79b9      	ldrb	r1, [r7, #6]
 80085c4:	79fb      	ldrb	r3, [r7, #7]
 80085c6:	4618      	mov	r0, r3
 80085c8:	f7ff fe9c 	bl	8008304 <ssd1306_DrawPixel>
        error2 = error * 2;
 80085cc:	69fb      	ldr	r3, [r7, #28]
 80085ce:	005b      	lsls	r3, r3, #1
 80085d0:	60bb      	str	r3, [r7, #8]
        if(error2 > -deltaY) {
 80085d2:	697b      	ldr	r3, [r7, #20]
 80085d4:	425b      	negs	r3, r3
 80085d6:	68ba      	ldr	r2, [r7, #8]
 80085d8:	429a      	cmp	r2, r3
 80085da:	dd08      	ble.n	80085ee <ssd1306_Line+0xa6>
            error -= deltaY;
 80085dc:	69fa      	ldr	r2, [r7, #28]
 80085de:	697b      	ldr	r3, [r7, #20]
 80085e0:	1ad3      	subs	r3, r2, r3
 80085e2:	61fb      	str	r3, [r7, #28]
            x1 += signX;
 80085e4:	693b      	ldr	r3, [r7, #16]
 80085e6:	b2da      	uxtb	r2, r3
 80085e8:	79fb      	ldrb	r3, [r7, #7]
 80085ea:	4413      	add	r3, r2
 80085ec:	71fb      	strb	r3, [r7, #7]
        }
        
        if(error2 < deltaX) {
 80085ee:	68ba      	ldr	r2, [r7, #8]
 80085f0:	69bb      	ldr	r3, [r7, #24]
 80085f2:	429a      	cmp	r2, r3
 80085f4:	da08      	bge.n	8008608 <ssd1306_Line+0xc0>
            error += deltaX;
 80085f6:	69fa      	ldr	r2, [r7, #28]
 80085f8:	69bb      	ldr	r3, [r7, #24]
 80085fa:	4413      	add	r3, r2
 80085fc:	61fb      	str	r3, [r7, #28]
            y1 += signY;
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	b2da      	uxtb	r2, r3
 8008602:	79bb      	ldrb	r3, [r7, #6]
 8008604:	4413      	add	r3, r2
 8008606:	71bb      	strb	r3, [r7, #6]
    while((x1 != x2) || (y1 != y2)) {
 8008608:	79fa      	ldrb	r2, [r7, #7]
 800860a:	797b      	ldrb	r3, [r7, #5]
 800860c:	429a      	cmp	r2, r3
 800860e:	d1d6      	bne.n	80085be <ssd1306_Line+0x76>
 8008610:	79ba      	ldrb	r2, [r7, #6]
 8008612:	793b      	ldrb	r3, [r7, #4]
 8008614:	429a      	cmp	r2, r3
 8008616:	d1d2      	bne.n	80085be <ssd1306_Line+0x76>
        }
    }
    return;
 8008618:	bf00      	nop
}
 800861a:	3724      	adds	r7, #36	@ 0x24
 800861c:	46bd      	mov	sp, r7
 800861e:	bd90      	pop	{r4, r7, pc}

08008620 <ssd1306_FillRectangle>:

    return;
}

/* Draw a filled rectangle */
void ssd1306_FillRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8008620:	b590      	push	{r4, r7, lr}
 8008622:	b085      	sub	sp, #20
 8008624:	af00      	add	r7, sp, #0
 8008626:	4604      	mov	r4, r0
 8008628:	4608      	mov	r0, r1
 800862a:	4611      	mov	r1, r2
 800862c:	461a      	mov	r2, r3
 800862e:	4623      	mov	r3, r4
 8008630:	71fb      	strb	r3, [r7, #7]
 8008632:	4603      	mov	r3, r0
 8008634:	71bb      	strb	r3, [r7, #6]
 8008636:	460b      	mov	r3, r1
 8008638:	717b      	strb	r3, [r7, #5]
 800863a:	4613      	mov	r3, r2
 800863c:	713b      	strb	r3, [r7, #4]
    uint8_t x_start = ((x1<=x2) ? x1 : x2);
 800863e:	79fa      	ldrb	r2, [r7, #7]
 8008640:	797b      	ldrb	r3, [r7, #5]
 8008642:	4293      	cmp	r3, r2
 8008644:	bf28      	it	cs
 8008646:	4613      	movcs	r3, r2
 8008648:	737b      	strb	r3, [r7, #13]
    uint8_t x_end   = ((x1<=x2) ? x2 : x1);
 800864a:	797a      	ldrb	r2, [r7, #5]
 800864c:	79fb      	ldrb	r3, [r7, #7]
 800864e:	4293      	cmp	r3, r2
 8008650:	bf38      	it	cc
 8008652:	4613      	movcc	r3, r2
 8008654:	733b      	strb	r3, [r7, #12]
    uint8_t y_start = ((y1<=y2) ? y1 : y2);
 8008656:	79ba      	ldrb	r2, [r7, #6]
 8008658:	793b      	ldrb	r3, [r7, #4]
 800865a:	4293      	cmp	r3, r2
 800865c:	bf28      	it	cs
 800865e:	4613      	movcs	r3, r2
 8008660:	72fb      	strb	r3, [r7, #11]
    uint8_t y_end   = ((y1<=y2) ? y2 : y1);
 8008662:	793a      	ldrb	r2, [r7, #4]
 8008664:	79bb      	ldrb	r3, [r7, #6]
 8008666:	4293      	cmp	r3, r2
 8008668:	bf38      	it	cc
 800866a:	4613      	movcc	r3, r2
 800866c:	72bb      	strb	r3, [r7, #10]

    for (uint8_t y= y_start; (y<= y_end)&&(y<SSD1306_HEIGHT); y++) {
 800866e:	7afb      	ldrb	r3, [r7, #11]
 8008670:	73fb      	strb	r3, [r7, #15]
 8008672:	e017      	b.n	80086a4 <ssd1306_FillRectangle+0x84>
        for (uint8_t x= x_start; (x<= x_end)&&(x<SSD1306_WIDTH); x++) {
 8008674:	7b7b      	ldrb	r3, [r7, #13]
 8008676:	73bb      	strb	r3, [r7, #14]
 8008678:	e009      	b.n	800868e <ssd1306_FillRectangle+0x6e>
            ssd1306_DrawPixel(x, y, color);
 800867a:	f897 2020 	ldrb.w	r2, [r7, #32]
 800867e:	7bf9      	ldrb	r1, [r7, #15]
 8008680:	7bbb      	ldrb	r3, [r7, #14]
 8008682:	4618      	mov	r0, r3
 8008684:	f7ff fe3e 	bl	8008304 <ssd1306_DrawPixel>
        for (uint8_t x= x_start; (x<= x_end)&&(x<SSD1306_WIDTH); x++) {
 8008688:	7bbb      	ldrb	r3, [r7, #14]
 800868a:	3301      	adds	r3, #1
 800868c:	73bb      	strb	r3, [r7, #14]
 800868e:	7bba      	ldrb	r2, [r7, #14]
 8008690:	7b3b      	ldrb	r3, [r7, #12]
 8008692:	429a      	cmp	r2, r3
 8008694:	d803      	bhi.n	800869e <ssd1306_FillRectangle+0x7e>
 8008696:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800869a:	2b00      	cmp	r3, #0
 800869c:	daed      	bge.n	800867a <ssd1306_FillRectangle+0x5a>
    for (uint8_t y= y_start; (y<= y_end)&&(y<SSD1306_HEIGHT); y++) {
 800869e:	7bfb      	ldrb	r3, [r7, #15]
 80086a0:	3301      	adds	r3, #1
 80086a2:	73fb      	strb	r3, [r7, #15]
 80086a4:	7bfa      	ldrb	r2, [r7, #15]
 80086a6:	7abb      	ldrb	r3, [r7, #10]
 80086a8:	429a      	cmp	r2, r3
 80086aa:	d803      	bhi.n	80086b4 <ssd1306_FillRectangle+0x94>
 80086ac:	7bfb      	ldrb	r3, [r7, #15]
 80086ae:	2b1f      	cmp	r3, #31
 80086b0:	d9e0      	bls.n	8008674 <ssd1306_FillRectangle+0x54>
        }
    }
    return;
 80086b2:	bf00      	nop
 80086b4:	bf00      	nop
}
 80086b6:	3714      	adds	r7, #20
 80086b8:	46bd      	mov	sp, r7
 80086ba:	bd90      	pop	{r4, r7, pc}

080086bc <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 80086bc:	b580      	push	{r7, lr}
 80086be:	b084      	sub	sp, #16
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	4603      	mov	r3, r0
 80086c4:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 80086c6:	2381      	movs	r3, #129	@ 0x81
 80086c8:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 80086ca:	7bfb      	ldrb	r3, [r7, #15]
 80086cc:	4618      	mov	r0, r3
 80086ce:	f7ff fd3d 	bl	800814c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 80086d2:	79fb      	ldrb	r3, [r7, #7]
 80086d4:	4618      	mov	r0, r3
 80086d6:	f7ff fd39 	bl	800814c <ssd1306_WriteCommand>
}
 80086da:	bf00      	nop
 80086dc:	3710      	adds	r7, #16
 80086de:	46bd      	mov	sp, r7
 80086e0:	bd80      	pop	{r7, pc}
	...

080086e4 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 80086e4:	b580      	push	{r7, lr}
 80086e6:	b084      	sub	sp, #16
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	4603      	mov	r3, r0
 80086ec:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 80086ee:	79fb      	ldrb	r3, [r7, #7]
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d005      	beq.n	8008700 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 80086f4:	23af      	movs	r3, #175	@ 0xaf
 80086f6:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 80086f8:	4b08      	ldr	r3, [pc, #32]	@ (800871c <ssd1306_SetDisplayOn+0x38>)
 80086fa:	2201      	movs	r2, #1
 80086fc:	715a      	strb	r2, [r3, #5]
 80086fe:	e004      	b.n	800870a <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8008700:	23ae      	movs	r3, #174	@ 0xae
 8008702:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8008704:	4b05      	ldr	r3, [pc, #20]	@ (800871c <ssd1306_SetDisplayOn+0x38>)
 8008706:	2200      	movs	r2, #0
 8008708:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 800870a:	7bfb      	ldrb	r3, [r7, #15]
 800870c:	4618      	mov	r0, r3
 800870e:	f7ff fd1d 	bl	800814c <ssd1306_WriteCommand>
}
 8008712:	bf00      	nop
 8008714:	3710      	adds	r7, #16
 8008716:	46bd      	mov	sp, r7
 8008718:	bd80      	pop	{r7, pc}
 800871a:	bf00      	nop
 800871c:	200004e4 	.word	0x200004e4

08008720 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008720:	b580      	push	{r7, lr}
 8008722:	b084      	sub	sp, #16
 8008724:	af00      	add	r7, sp, #0
 8008726:	6078      	str	r0, [r7, #4]
 8008728:	460b      	mov	r3, r1
 800872a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800872c:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8008730:	f002 fca4 	bl	800b07c <USBD_static_malloc>
 8008734:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	2b00      	cmp	r3, #0
 800873a:	d109      	bne.n	8008750 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	32b0      	adds	r2, #176	@ 0xb0
 8008746:	2100      	movs	r1, #0
 8008748:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800874c:	2302      	movs	r3, #2
 800874e:	e0d4      	b.n	80088fa <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8008750:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8008754:	2100      	movs	r1, #0
 8008756:	68f8      	ldr	r0, [r7, #12]
 8008758:	f004 f8a8 	bl	800c8ac <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	32b0      	adds	r2, #176	@ 0xb0
 8008766:	68f9      	ldr	r1, [r7, #12]
 8008768:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	32b0      	adds	r2, #176	@ 0xb0
 8008776:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	7c1b      	ldrb	r3, [r3, #16]
 8008784:	2b00      	cmp	r3, #0
 8008786:	d138      	bne.n	80087fa <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008788:	4b5e      	ldr	r3, [pc, #376]	@ (8008904 <USBD_CDC_Init+0x1e4>)
 800878a:	7819      	ldrb	r1, [r3, #0]
 800878c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008790:	2202      	movs	r2, #2
 8008792:	6878      	ldr	r0, [r7, #4]
 8008794:	f002 fb4f 	bl	800ae36 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008798:	4b5a      	ldr	r3, [pc, #360]	@ (8008904 <USBD_CDC_Init+0x1e4>)
 800879a:	781b      	ldrb	r3, [r3, #0]
 800879c:	f003 020f 	and.w	r2, r3, #15
 80087a0:	6879      	ldr	r1, [r7, #4]
 80087a2:	4613      	mov	r3, r2
 80087a4:	009b      	lsls	r3, r3, #2
 80087a6:	4413      	add	r3, r2
 80087a8:	009b      	lsls	r3, r3, #2
 80087aa:	440b      	add	r3, r1
 80087ac:	3324      	adds	r3, #36	@ 0x24
 80087ae:	2201      	movs	r2, #1
 80087b0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80087b2:	4b55      	ldr	r3, [pc, #340]	@ (8008908 <USBD_CDC_Init+0x1e8>)
 80087b4:	7819      	ldrb	r1, [r3, #0]
 80087b6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80087ba:	2202      	movs	r2, #2
 80087bc:	6878      	ldr	r0, [r7, #4]
 80087be:	f002 fb3a 	bl	800ae36 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80087c2:	4b51      	ldr	r3, [pc, #324]	@ (8008908 <USBD_CDC_Init+0x1e8>)
 80087c4:	781b      	ldrb	r3, [r3, #0]
 80087c6:	f003 020f 	and.w	r2, r3, #15
 80087ca:	6879      	ldr	r1, [r7, #4]
 80087cc:	4613      	mov	r3, r2
 80087ce:	009b      	lsls	r3, r3, #2
 80087d0:	4413      	add	r3, r2
 80087d2:	009b      	lsls	r3, r3, #2
 80087d4:	440b      	add	r3, r1
 80087d6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80087da:	2201      	movs	r2, #1
 80087dc:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80087de:	4b4b      	ldr	r3, [pc, #300]	@ (800890c <USBD_CDC_Init+0x1ec>)
 80087e0:	781b      	ldrb	r3, [r3, #0]
 80087e2:	f003 020f 	and.w	r2, r3, #15
 80087e6:	6879      	ldr	r1, [r7, #4]
 80087e8:	4613      	mov	r3, r2
 80087ea:	009b      	lsls	r3, r3, #2
 80087ec:	4413      	add	r3, r2
 80087ee:	009b      	lsls	r3, r3, #2
 80087f0:	440b      	add	r3, r1
 80087f2:	3326      	adds	r3, #38	@ 0x26
 80087f4:	2210      	movs	r2, #16
 80087f6:	801a      	strh	r2, [r3, #0]
 80087f8:	e035      	b.n	8008866 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80087fa:	4b42      	ldr	r3, [pc, #264]	@ (8008904 <USBD_CDC_Init+0x1e4>)
 80087fc:	7819      	ldrb	r1, [r3, #0]
 80087fe:	2340      	movs	r3, #64	@ 0x40
 8008800:	2202      	movs	r2, #2
 8008802:	6878      	ldr	r0, [r7, #4]
 8008804:	f002 fb17 	bl	800ae36 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008808:	4b3e      	ldr	r3, [pc, #248]	@ (8008904 <USBD_CDC_Init+0x1e4>)
 800880a:	781b      	ldrb	r3, [r3, #0]
 800880c:	f003 020f 	and.w	r2, r3, #15
 8008810:	6879      	ldr	r1, [r7, #4]
 8008812:	4613      	mov	r3, r2
 8008814:	009b      	lsls	r3, r3, #2
 8008816:	4413      	add	r3, r2
 8008818:	009b      	lsls	r3, r3, #2
 800881a:	440b      	add	r3, r1
 800881c:	3324      	adds	r3, #36	@ 0x24
 800881e:	2201      	movs	r2, #1
 8008820:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8008822:	4b39      	ldr	r3, [pc, #228]	@ (8008908 <USBD_CDC_Init+0x1e8>)
 8008824:	7819      	ldrb	r1, [r3, #0]
 8008826:	2340      	movs	r3, #64	@ 0x40
 8008828:	2202      	movs	r2, #2
 800882a:	6878      	ldr	r0, [r7, #4]
 800882c:	f002 fb03 	bl	800ae36 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8008830:	4b35      	ldr	r3, [pc, #212]	@ (8008908 <USBD_CDC_Init+0x1e8>)
 8008832:	781b      	ldrb	r3, [r3, #0]
 8008834:	f003 020f 	and.w	r2, r3, #15
 8008838:	6879      	ldr	r1, [r7, #4]
 800883a:	4613      	mov	r3, r2
 800883c:	009b      	lsls	r3, r3, #2
 800883e:	4413      	add	r3, r2
 8008840:	009b      	lsls	r3, r3, #2
 8008842:	440b      	add	r3, r1
 8008844:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008848:	2201      	movs	r2, #1
 800884a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800884c:	4b2f      	ldr	r3, [pc, #188]	@ (800890c <USBD_CDC_Init+0x1ec>)
 800884e:	781b      	ldrb	r3, [r3, #0]
 8008850:	f003 020f 	and.w	r2, r3, #15
 8008854:	6879      	ldr	r1, [r7, #4]
 8008856:	4613      	mov	r3, r2
 8008858:	009b      	lsls	r3, r3, #2
 800885a:	4413      	add	r3, r2
 800885c:	009b      	lsls	r3, r3, #2
 800885e:	440b      	add	r3, r1
 8008860:	3326      	adds	r3, #38	@ 0x26
 8008862:	2210      	movs	r2, #16
 8008864:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008866:	4b29      	ldr	r3, [pc, #164]	@ (800890c <USBD_CDC_Init+0x1ec>)
 8008868:	7819      	ldrb	r1, [r3, #0]
 800886a:	2308      	movs	r3, #8
 800886c:	2203      	movs	r2, #3
 800886e:	6878      	ldr	r0, [r7, #4]
 8008870:	f002 fae1 	bl	800ae36 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8008874:	4b25      	ldr	r3, [pc, #148]	@ (800890c <USBD_CDC_Init+0x1ec>)
 8008876:	781b      	ldrb	r3, [r3, #0]
 8008878:	f003 020f 	and.w	r2, r3, #15
 800887c:	6879      	ldr	r1, [r7, #4]
 800887e:	4613      	mov	r3, r2
 8008880:	009b      	lsls	r3, r3, #2
 8008882:	4413      	add	r3, r2
 8008884:	009b      	lsls	r3, r3, #2
 8008886:	440b      	add	r3, r1
 8008888:	3324      	adds	r3, #36	@ 0x24
 800888a:	2201      	movs	r2, #1
 800888c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	2200      	movs	r2, #0
 8008892:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800889c:	687a      	ldr	r2, [r7, #4]
 800889e:	33b0      	adds	r3, #176	@ 0xb0
 80088a0:	009b      	lsls	r3, r3, #2
 80088a2:	4413      	add	r3, r2
 80088a4:	685b      	ldr	r3, [r3, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	2200      	movs	r2, #0
 80088ae:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	2200      	movs	r2, #0
 80088b6:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d101      	bne.n	80088c8 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80088c4:	2302      	movs	r3, #2
 80088c6:	e018      	b.n	80088fa <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	7c1b      	ldrb	r3, [r3, #16]
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d10a      	bne.n	80088e6 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80088d0:	4b0d      	ldr	r3, [pc, #52]	@ (8008908 <USBD_CDC_Init+0x1e8>)
 80088d2:	7819      	ldrb	r1, [r3, #0]
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80088da:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80088de:	6878      	ldr	r0, [r7, #4]
 80088e0:	f002 fb98 	bl	800b014 <USBD_LL_PrepareReceive>
 80088e4:	e008      	b.n	80088f8 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80088e6:	4b08      	ldr	r3, [pc, #32]	@ (8008908 <USBD_CDC_Init+0x1e8>)
 80088e8:	7819      	ldrb	r1, [r3, #0]
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80088f0:	2340      	movs	r3, #64	@ 0x40
 80088f2:	6878      	ldr	r0, [r7, #4]
 80088f4:	f002 fb8e 	bl	800b014 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80088f8:	2300      	movs	r3, #0
}
 80088fa:	4618      	mov	r0, r3
 80088fc:	3710      	adds	r7, #16
 80088fe:	46bd      	mov	sp, r7
 8008900:	bd80      	pop	{r7, pc}
 8008902:	bf00      	nop
 8008904:	20000093 	.word	0x20000093
 8008908:	20000094 	.word	0x20000094
 800890c:	20000095 	.word	0x20000095

08008910 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008910:	b580      	push	{r7, lr}
 8008912:	b082      	sub	sp, #8
 8008914:	af00      	add	r7, sp, #0
 8008916:	6078      	str	r0, [r7, #4]
 8008918:	460b      	mov	r3, r1
 800891a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800891c:	4b3a      	ldr	r3, [pc, #232]	@ (8008a08 <USBD_CDC_DeInit+0xf8>)
 800891e:	781b      	ldrb	r3, [r3, #0]
 8008920:	4619      	mov	r1, r3
 8008922:	6878      	ldr	r0, [r7, #4]
 8008924:	f002 faad 	bl	800ae82 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8008928:	4b37      	ldr	r3, [pc, #220]	@ (8008a08 <USBD_CDC_DeInit+0xf8>)
 800892a:	781b      	ldrb	r3, [r3, #0]
 800892c:	f003 020f 	and.w	r2, r3, #15
 8008930:	6879      	ldr	r1, [r7, #4]
 8008932:	4613      	mov	r3, r2
 8008934:	009b      	lsls	r3, r3, #2
 8008936:	4413      	add	r3, r2
 8008938:	009b      	lsls	r3, r3, #2
 800893a:	440b      	add	r3, r1
 800893c:	3324      	adds	r3, #36	@ 0x24
 800893e:	2200      	movs	r2, #0
 8008940:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8008942:	4b32      	ldr	r3, [pc, #200]	@ (8008a0c <USBD_CDC_DeInit+0xfc>)
 8008944:	781b      	ldrb	r3, [r3, #0]
 8008946:	4619      	mov	r1, r3
 8008948:	6878      	ldr	r0, [r7, #4]
 800894a:	f002 fa9a 	bl	800ae82 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800894e:	4b2f      	ldr	r3, [pc, #188]	@ (8008a0c <USBD_CDC_DeInit+0xfc>)
 8008950:	781b      	ldrb	r3, [r3, #0]
 8008952:	f003 020f 	and.w	r2, r3, #15
 8008956:	6879      	ldr	r1, [r7, #4]
 8008958:	4613      	mov	r3, r2
 800895a:	009b      	lsls	r3, r3, #2
 800895c:	4413      	add	r3, r2
 800895e:	009b      	lsls	r3, r3, #2
 8008960:	440b      	add	r3, r1
 8008962:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008966:	2200      	movs	r2, #0
 8008968:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800896a:	4b29      	ldr	r3, [pc, #164]	@ (8008a10 <USBD_CDC_DeInit+0x100>)
 800896c:	781b      	ldrb	r3, [r3, #0]
 800896e:	4619      	mov	r1, r3
 8008970:	6878      	ldr	r0, [r7, #4]
 8008972:	f002 fa86 	bl	800ae82 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8008976:	4b26      	ldr	r3, [pc, #152]	@ (8008a10 <USBD_CDC_DeInit+0x100>)
 8008978:	781b      	ldrb	r3, [r3, #0]
 800897a:	f003 020f 	and.w	r2, r3, #15
 800897e:	6879      	ldr	r1, [r7, #4]
 8008980:	4613      	mov	r3, r2
 8008982:	009b      	lsls	r3, r3, #2
 8008984:	4413      	add	r3, r2
 8008986:	009b      	lsls	r3, r3, #2
 8008988:	440b      	add	r3, r1
 800898a:	3324      	adds	r3, #36	@ 0x24
 800898c:	2200      	movs	r2, #0
 800898e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8008990:	4b1f      	ldr	r3, [pc, #124]	@ (8008a10 <USBD_CDC_DeInit+0x100>)
 8008992:	781b      	ldrb	r3, [r3, #0]
 8008994:	f003 020f 	and.w	r2, r3, #15
 8008998:	6879      	ldr	r1, [r7, #4]
 800899a:	4613      	mov	r3, r2
 800899c:	009b      	lsls	r3, r3, #2
 800899e:	4413      	add	r3, r2
 80089a0:	009b      	lsls	r3, r3, #2
 80089a2:	440b      	add	r3, r1
 80089a4:	3326      	adds	r3, #38	@ 0x26
 80089a6:	2200      	movs	r2, #0
 80089a8:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	32b0      	adds	r2, #176	@ 0xb0
 80089b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d01f      	beq.n	80089fc <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80089c2:	687a      	ldr	r2, [r7, #4]
 80089c4:	33b0      	adds	r3, #176	@ 0xb0
 80089c6:	009b      	lsls	r3, r3, #2
 80089c8:	4413      	add	r3, r2
 80089ca:	685b      	ldr	r3, [r3, #4]
 80089cc:	685b      	ldr	r3, [r3, #4]
 80089ce:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	32b0      	adds	r2, #176	@ 0xb0
 80089da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80089de:	4618      	mov	r0, r3
 80089e0:	f002 fb5a 	bl	800b098 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	32b0      	adds	r2, #176	@ 0xb0
 80089ee:	2100      	movs	r1, #0
 80089f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	2200      	movs	r2, #0
 80089f8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 80089fc:	2300      	movs	r3, #0
}
 80089fe:	4618      	mov	r0, r3
 8008a00:	3708      	adds	r7, #8
 8008a02:	46bd      	mov	sp, r7
 8008a04:	bd80      	pop	{r7, pc}
 8008a06:	bf00      	nop
 8008a08:	20000093 	.word	0x20000093
 8008a0c:	20000094 	.word	0x20000094
 8008a10:	20000095 	.word	0x20000095

08008a14 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8008a14:	b580      	push	{r7, lr}
 8008a16:	b086      	sub	sp, #24
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	6078      	str	r0, [r7, #4]
 8008a1c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	32b0      	adds	r2, #176	@ 0xb0
 8008a28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a2c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8008a2e:	2300      	movs	r3, #0
 8008a30:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8008a32:	2300      	movs	r3, #0
 8008a34:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8008a36:	2300      	movs	r3, #0
 8008a38:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8008a3a:	693b      	ldr	r3, [r7, #16]
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d101      	bne.n	8008a44 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8008a40:	2303      	movs	r3, #3
 8008a42:	e0bf      	b.n	8008bc4 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008a44:	683b      	ldr	r3, [r7, #0]
 8008a46:	781b      	ldrb	r3, [r3, #0]
 8008a48:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d050      	beq.n	8008af2 <USBD_CDC_Setup+0xde>
 8008a50:	2b20      	cmp	r3, #32
 8008a52:	f040 80af 	bne.w	8008bb4 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8008a56:	683b      	ldr	r3, [r7, #0]
 8008a58:	88db      	ldrh	r3, [r3, #6]
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d03a      	beq.n	8008ad4 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8008a5e:	683b      	ldr	r3, [r7, #0]
 8008a60:	781b      	ldrb	r3, [r3, #0]
 8008a62:	b25b      	sxtb	r3, r3
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	da1b      	bge.n	8008aa0 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008a6e:	687a      	ldr	r2, [r7, #4]
 8008a70:	33b0      	adds	r3, #176	@ 0xb0
 8008a72:	009b      	lsls	r3, r3, #2
 8008a74:	4413      	add	r3, r2
 8008a76:	685b      	ldr	r3, [r3, #4]
 8008a78:	689b      	ldr	r3, [r3, #8]
 8008a7a:	683a      	ldr	r2, [r7, #0]
 8008a7c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8008a7e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008a80:	683a      	ldr	r2, [r7, #0]
 8008a82:	88d2      	ldrh	r2, [r2, #6]
 8008a84:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8008a86:	683b      	ldr	r3, [r7, #0]
 8008a88:	88db      	ldrh	r3, [r3, #6]
 8008a8a:	2b07      	cmp	r3, #7
 8008a8c:	bf28      	it	cs
 8008a8e:	2307      	movcs	r3, #7
 8008a90:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8008a92:	693b      	ldr	r3, [r7, #16]
 8008a94:	89fa      	ldrh	r2, [r7, #14]
 8008a96:	4619      	mov	r1, r3
 8008a98:	6878      	ldr	r0, [r7, #4]
 8008a9a:	f001 fd93 	bl	800a5c4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8008a9e:	e090      	b.n	8008bc2 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8008aa0:	683b      	ldr	r3, [r7, #0]
 8008aa2:	785a      	ldrb	r2, [r3, #1]
 8008aa4:	693b      	ldr	r3, [r7, #16]
 8008aa6:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8008aaa:	683b      	ldr	r3, [r7, #0]
 8008aac:	88db      	ldrh	r3, [r3, #6]
 8008aae:	2b3f      	cmp	r3, #63	@ 0x3f
 8008ab0:	d803      	bhi.n	8008aba <USBD_CDC_Setup+0xa6>
 8008ab2:	683b      	ldr	r3, [r7, #0]
 8008ab4:	88db      	ldrh	r3, [r3, #6]
 8008ab6:	b2da      	uxtb	r2, r3
 8008ab8:	e000      	b.n	8008abc <USBD_CDC_Setup+0xa8>
 8008aba:	2240      	movs	r2, #64	@ 0x40
 8008abc:	693b      	ldr	r3, [r7, #16]
 8008abe:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8008ac2:	6939      	ldr	r1, [r7, #16]
 8008ac4:	693b      	ldr	r3, [r7, #16]
 8008ac6:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8008aca:	461a      	mov	r2, r3
 8008acc:	6878      	ldr	r0, [r7, #4]
 8008ace:	f001 fda5 	bl	800a61c <USBD_CtlPrepareRx>
      break;
 8008ad2:	e076      	b.n	8008bc2 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008ada:	687a      	ldr	r2, [r7, #4]
 8008adc:	33b0      	adds	r3, #176	@ 0xb0
 8008ade:	009b      	lsls	r3, r3, #2
 8008ae0:	4413      	add	r3, r2
 8008ae2:	685b      	ldr	r3, [r3, #4]
 8008ae4:	689b      	ldr	r3, [r3, #8]
 8008ae6:	683a      	ldr	r2, [r7, #0]
 8008ae8:	7850      	ldrb	r0, [r2, #1]
 8008aea:	2200      	movs	r2, #0
 8008aec:	6839      	ldr	r1, [r7, #0]
 8008aee:	4798      	blx	r3
      break;
 8008af0:	e067      	b.n	8008bc2 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008af2:	683b      	ldr	r3, [r7, #0]
 8008af4:	785b      	ldrb	r3, [r3, #1]
 8008af6:	2b0b      	cmp	r3, #11
 8008af8:	d851      	bhi.n	8008b9e <USBD_CDC_Setup+0x18a>
 8008afa:	a201      	add	r2, pc, #4	@ (adr r2, 8008b00 <USBD_CDC_Setup+0xec>)
 8008afc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b00:	08008b31 	.word	0x08008b31
 8008b04:	08008bad 	.word	0x08008bad
 8008b08:	08008b9f 	.word	0x08008b9f
 8008b0c:	08008b9f 	.word	0x08008b9f
 8008b10:	08008b9f 	.word	0x08008b9f
 8008b14:	08008b9f 	.word	0x08008b9f
 8008b18:	08008b9f 	.word	0x08008b9f
 8008b1c:	08008b9f 	.word	0x08008b9f
 8008b20:	08008b9f 	.word	0x08008b9f
 8008b24:	08008b9f 	.word	0x08008b9f
 8008b28:	08008b5b 	.word	0x08008b5b
 8008b2c:	08008b85 	.word	0x08008b85
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008b36:	b2db      	uxtb	r3, r3
 8008b38:	2b03      	cmp	r3, #3
 8008b3a:	d107      	bne.n	8008b4c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008b3c:	f107 030a 	add.w	r3, r7, #10
 8008b40:	2202      	movs	r2, #2
 8008b42:	4619      	mov	r1, r3
 8008b44:	6878      	ldr	r0, [r7, #4]
 8008b46:	f001 fd3d 	bl	800a5c4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008b4a:	e032      	b.n	8008bb2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008b4c:	6839      	ldr	r1, [r7, #0]
 8008b4e:	6878      	ldr	r0, [r7, #4]
 8008b50:	f001 fcbb 	bl	800a4ca <USBD_CtlError>
            ret = USBD_FAIL;
 8008b54:	2303      	movs	r3, #3
 8008b56:	75fb      	strb	r3, [r7, #23]
          break;
 8008b58:	e02b      	b.n	8008bb2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008b60:	b2db      	uxtb	r3, r3
 8008b62:	2b03      	cmp	r3, #3
 8008b64:	d107      	bne.n	8008b76 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8008b66:	f107 030d 	add.w	r3, r7, #13
 8008b6a:	2201      	movs	r2, #1
 8008b6c:	4619      	mov	r1, r3
 8008b6e:	6878      	ldr	r0, [r7, #4]
 8008b70:	f001 fd28 	bl	800a5c4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008b74:	e01d      	b.n	8008bb2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008b76:	6839      	ldr	r1, [r7, #0]
 8008b78:	6878      	ldr	r0, [r7, #4]
 8008b7a:	f001 fca6 	bl	800a4ca <USBD_CtlError>
            ret = USBD_FAIL;
 8008b7e:	2303      	movs	r3, #3
 8008b80:	75fb      	strb	r3, [r7, #23]
          break;
 8008b82:	e016      	b.n	8008bb2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008b8a:	b2db      	uxtb	r3, r3
 8008b8c:	2b03      	cmp	r3, #3
 8008b8e:	d00f      	beq.n	8008bb0 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8008b90:	6839      	ldr	r1, [r7, #0]
 8008b92:	6878      	ldr	r0, [r7, #4]
 8008b94:	f001 fc99 	bl	800a4ca <USBD_CtlError>
            ret = USBD_FAIL;
 8008b98:	2303      	movs	r3, #3
 8008b9a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008b9c:	e008      	b.n	8008bb0 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8008b9e:	6839      	ldr	r1, [r7, #0]
 8008ba0:	6878      	ldr	r0, [r7, #4]
 8008ba2:	f001 fc92 	bl	800a4ca <USBD_CtlError>
          ret = USBD_FAIL;
 8008ba6:	2303      	movs	r3, #3
 8008ba8:	75fb      	strb	r3, [r7, #23]
          break;
 8008baa:	e002      	b.n	8008bb2 <USBD_CDC_Setup+0x19e>
          break;
 8008bac:	bf00      	nop
 8008bae:	e008      	b.n	8008bc2 <USBD_CDC_Setup+0x1ae>
          break;
 8008bb0:	bf00      	nop
      }
      break;
 8008bb2:	e006      	b.n	8008bc2 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8008bb4:	6839      	ldr	r1, [r7, #0]
 8008bb6:	6878      	ldr	r0, [r7, #4]
 8008bb8:	f001 fc87 	bl	800a4ca <USBD_CtlError>
      ret = USBD_FAIL;
 8008bbc:	2303      	movs	r3, #3
 8008bbe:	75fb      	strb	r3, [r7, #23]
      break;
 8008bc0:	bf00      	nop
  }

  return (uint8_t)ret;
 8008bc2:	7dfb      	ldrb	r3, [r7, #23]
}
 8008bc4:	4618      	mov	r0, r3
 8008bc6:	3718      	adds	r7, #24
 8008bc8:	46bd      	mov	sp, r7
 8008bca:	bd80      	pop	{r7, pc}

08008bcc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008bcc:	b580      	push	{r7, lr}
 8008bce:	b084      	sub	sp, #16
 8008bd0:	af00      	add	r7, sp, #0
 8008bd2:	6078      	str	r0, [r7, #4]
 8008bd4:	460b      	mov	r3, r1
 8008bd6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008bde:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	32b0      	adds	r2, #176	@ 0xb0
 8008bea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d101      	bne.n	8008bf6 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8008bf2:	2303      	movs	r3, #3
 8008bf4:	e065      	b.n	8008cc2 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	32b0      	adds	r2, #176	@ 0xb0
 8008c00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c04:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008c06:	78fb      	ldrb	r3, [r7, #3]
 8008c08:	f003 020f 	and.w	r2, r3, #15
 8008c0c:	6879      	ldr	r1, [r7, #4]
 8008c0e:	4613      	mov	r3, r2
 8008c10:	009b      	lsls	r3, r3, #2
 8008c12:	4413      	add	r3, r2
 8008c14:	009b      	lsls	r3, r3, #2
 8008c16:	440b      	add	r3, r1
 8008c18:	3318      	adds	r3, #24
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d02f      	beq.n	8008c80 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8008c20:	78fb      	ldrb	r3, [r7, #3]
 8008c22:	f003 020f 	and.w	r2, r3, #15
 8008c26:	6879      	ldr	r1, [r7, #4]
 8008c28:	4613      	mov	r3, r2
 8008c2a:	009b      	lsls	r3, r3, #2
 8008c2c:	4413      	add	r3, r2
 8008c2e:	009b      	lsls	r3, r3, #2
 8008c30:	440b      	add	r3, r1
 8008c32:	3318      	adds	r3, #24
 8008c34:	681a      	ldr	r2, [r3, #0]
 8008c36:	78fb      	ldrb	r3, [r7, #3]
 8008c38:	f003 010f 	and.w	r1, r3, #15
 8008c3c:	68f8      	ldr	r0, [r7, #12]
 8008c3e:	460b      	mov	r3, r1
 8008c40:	00db      	lsls	r3, r3, #3
 8008c42:	440b      	add	r3, r1
 8008c44:	009b      	lsls	r3, r3, #2
 8008c46:	4403      	add	r3, r0
 8008c48:	331c      	adds	r3, #28
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	fbb2 f1f3 	udiv	r1, r2, r3
 8008c50:	fb01 f303 	mul.w	r3, r1, r3
 8008c54:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d112      	bne.n	8008c80 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8008c5a:	78fb      	ldrb	r3, [r7, #3]
 8008c5c:	f003 020f 	and.w	r2, r3, #15
 8008c60:	6879      	ldr	r1, [r7, #4]
 8008c62:	4613      	mov	r3, r2
 8008c64:	009b      	lsls	r3, r3, #2
 8008c66:	4413      	add	r3, r2
 8008c68:	009b      	lsls	r3, r3, #2
 8008c6a:	440b      	add	r3, r1
 8008c6c:	3318      	adds	r3, #24
 8008c6e:	2200      	movs	r2, #0
 8008c70:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008c72:	78f9      	ldrb	r1, [r7, #3]
 8008c74:	2300      	movs	r3, #0
 8008c76:	2200      	movs	r2, #0
 8008c78:	6878      	ldr	r0, [r7, #4]
 8008c7a:	f002 f9aa 	bl	800afd2 <USBD_LL_Transmit>
 8008c7e:	e01f      	b.n	8008cc0 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8008c80:	68bb      	ldr	r3, [r7, #8]
 8008c82:	2200      	movs	r2, #0
 8008c84:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008c8e:	687a      	ldr	r2, [r7, #4]
 8008c90:	33b0      	adds	r3, #176	@ 0xb0
 8008c92:	009b      	lsls	r3, r3, #2
 8008c94:	4413      	add	r3, r2
 8008c96:	685b      	ldr	r3, [r3, #4]
 8008c98:	691b      	ldr	r3, [r3, #16]
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d010      	beq.n	8008cc0 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008ca4:	687a      	ldr	r2, [r7, #4]
 8008ca6:	33b0      	adds	r3, #176	@ 0xb0
 8008ca8:	009b      	lsls	r3, r3, #2
 8008caa:	4413      	add	r3, r2
 8008cac:	685b      	ldr	r3, [r3, #4]
 8008cae:	691b      	ldr	r3, [r3, #16]
 8008cb0:	68ba      	ldr	r2, [r7, #8]
 8008cb2:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8008cb6:	68ba      	ldr	r2, [r7, #8]
 8008cb8:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8008cbc:	78fa      	ldrb	r2, [r7, #3]
 8008cbe:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8008cc0:	2300      	movs	r3, #0
}
 8008cc2:	4618      	mov	r0, r3
 8008cc4:	3710      	adds	r7, #16
 8008cc6:	46bd      	mov	sp, r7
 8008cc8:	bd80      	pop	{r7, pc}

08008cca <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008cca:	b580      	push	{r7, lr}
 8008ccc:	b084      	sub	sp, #16
 8008cce:	af00      	add	r7, sp, #0
 8008cd0:	6078      	str	r0, [r7, #4]
 8008cd2:	460b      	mov	r3, r1
 8008cd4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	32b0      	adds	r2, #176	@ 0xb0
 8008ce0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ce4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	32b0      	adds	r2, #176	@ 0xb0
 8008cf0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d101      	bne.n	8008cfc <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8008cf8:	2303      	movs	r3, #3
 8008cfa:	e01a      	b.n	8008d32 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008cfc:	78fb      	ldrb	r3, [r7, #3]
 8008cfe:	4619      	mov	r1, r3
 8008d00:	6878      	ldr	r0, [r7, #4]
 8008d02:	f002 f9a8 	bl	800b056 <USBD_LL_GetRxDataSize>
 8008d06:	4602      	mov	r2, r0
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008d14:	687a      	ldr	r2, [r7, #4]
 8008d16:	33b0      	adds	r3, #176	@ 0xb0
 8008d18:	009b      	lsls	r3, r3, #2
 8008d1a:	4413      	add	r3, r2
 8008d1c:	685b      	ldr	r3, [r3, #4]
 8008d1e:	68db      	ldr	r3, [r3, #12]
 8008d20:	68fa      	ldr	r2, [r7, #12]
 8008d22:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8008d26:	68fa      	ldr	r2, [r7, #12]
 8008d28:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8008d2c:	4611      	mov	r1, r2
 8008d2e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8008d30:	2300      	movs	r3, #0
}
 8008d32:	4618      	mov	r0, r3
 8008d34:	3710      	adds	r7, #16
 8008d36:	46bd      	mov	sp, r7
 8008d38:	bd80      	pop	{r7, pc}

08008d3a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008d3a:	b580      	push	{r7, lr}
 8008d3c:	b084      	sub	sp, #16
 8008d3e:	af00      	add	r7, sp, #0
 8008d40:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	32b0      	adds	r2, #176	@ 0xb0
 8008d4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d50:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d101      	bne.n	8008d5c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008d58:	2303      	movs	r3, #3
 8008d5a:	e024      	b.n	8008da6 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008d62:	687a      	ldr	r2, [r7, #4]
 8008d64:	33b0      	adds	r3, #176	@ 0xb0
 8008d66:	009b      	lsls	r3, r3, #2
 8008d68:	4413      	add	r3, r2
 8008d6a:	685b      	ldr	r3, [r3, #4]
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d019      	beq.n	8008da4 <USBD_CDC_EP0_RxReady+0x6a>
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8008d76:	2bff      	cmp	r3, #255	@ 0xff
 8008d78:	d014      	beq.n	8008da4 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008d80:	687a      	ldr	r2, [r7, #4]
 8008d82:	33b0      	adds	r3, #176	@ 0xb0
 8008d84:	009b      	lsls	r3, r3, #2
 8008d86:	4413      	add	r3, r2
 8008d88:	685b      	ldr	r3, [r3, #4]
 8008d8a:	689b      	ldr	r3, [r3, #8]
 8008d8c:	68fa      	ldr	r2, [r7, #12]
 8008d8e:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8008d92:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8008d94:	68fa      	ldr	r2, [r7, #12]
 8008d96:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008d9a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	22ff      	movs	r2, #255	@ 0xff
 8008da0:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8008da4:	2300      	movs	r3, #0
}
 8008da6:	4618      	mov	r0, r3
 8008da8:	3710      	adds	r7, #16
 8008daa:	46bd      	mov	sp, r7
 8008dac:	bd80      	pop	{r7, pc}
	...

08008db0 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008db0:	b580      	push	{r7, lr}
 8008db2:	b086      	sub	sp, #24
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008db8:	2182      	movs	r1, #130	@ 0x82
 8008dba:	4818      	ldr	r0, [pc, #96]	@ (8008e1c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008dbc:	f000 fd4f 	bl	800985e <USBD_GetEpDesc>
 8008dc0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008dc2:	2101      	movs	r1, #1
 8008dc4:	4815      	ldr	r0, [pc, #84]	@ (8008e1c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008dc6:	f000 fd4a 	bl	800985e <USBD_GetEpDesc>
 8008dca:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008dcc:	2181      	movs	r1, #129	@ 0x81
 8008dce:	4813      	ldr	r0, [pc, #76]	@ (8008e1c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008dd0:	f000 fd45 	bl	800985e <USBD_GetEpDesc>
 8008dd4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008dd6:	697b      	ldr	r3, [r7, #20]
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d002      	beq.n	8008de2 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008ddc:	697b      	ldr	r3, [r7, #20]
 8008dde:	2210      	movs	r2, #16
 8008de0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008de2:	693b      	ldr	r3, [r7, #16]
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d006      	beq.n	8008df6 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008de8:	693b      	ldr	r3, [r7, #16]
 8008dea:	2200      	movs	r2, #0
 8008dec:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008df0:	711a      	strb	r2, [r3, #4]
 8008df2:	2200      	movs	r2, #0
 8008df4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d006      	beq.n	8008e0a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	2200      	movs	r2, #0
 8008e00:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008e04:	711a      	strb	r2, [r3, #4]
 8008e06:	2200      	movs	r2, #0
 8008e08:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	2243      	movs	r2, #67	@ 0x43
 8008e0e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008e10:	4b02      	ldr	r3, [pc, #8]	@ (8008e1c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8008e12:	4618      	mov	r0, r3
 8008e14:	3718      	adds	r7, #24
 8008e16:	46bd      	mov	sp, r7
 8008e18:	bd80      	pop	{r7, pc}
 8008e1a:	bf00      	nop
 8008e1c:	20000050 	.word	0x20000050

08008e20 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008e20:	b580      	push	{r7, lr}
 8008e22:	b086      	sub	sp, #24
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008e28:	2182      	movs	r1, #130	@ 0x82
 8008e2a:	4818      	ldr	r0, [pc, #96]	@ (8008e8c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008e2c:	f000 fd17 	bl	800985e <USBD_GetEpDesc>
 8008e30:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008e32:	2101      	movs	r1, #1
 8008e34:	4815      	ldr	r0, [pc, #84]	@ (8008e8c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008e36:	f000 fd12 	bl	800985e <USBD_GetEpDesc>
 8008e3a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008e3c:	2181      	movs	r1, #129	@ 0x81
 8008e3e:	4813      	ldr	r0, [pc, #76]	@ (8008e8c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008e40:	f000 fd0d 	bl	800985e <USBD_GetEpDesc>
 8008e44:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008e46:	697b      	ldr	r3, [r7, #20]
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d002      	beq.n	8008e52 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8008e4c:	697b      	ldr	r3, [r7, #20]
 8008e4e:	2210      	movs	r2, #16
 8008e50:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008e52:	693b      	ldr	r3, [r7, #16]
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d006      	beq.n	8008e66 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008e58:	693b      	ldr	r3, [r7, #16]
 8008e5a:	2200      	movs	r2, #0
 8008e5c:	711a      	strb	r2, [r3, #4]
 8008e5e:	2200      	movs	r2, #0
 8008e60:	f042 0202 	orr.w	r2, r2, #2
 8008e64:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d006      	beq.n	8008e7a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	2200      	movs	r2, #0
 8008e70:	711a      	strb	r2, [r3, #4]
 8008e72:	2200      	movs	r2, #0
 8008e74:	f042 0202 	orr.w	r2, r2, #2
 8008e78:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	2243      	movs	r2, #67	@ 0x43
 8008e7e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008e80:	4b02      	ldr	r3, [pc, #8]	@ (8008e8c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8008e82:	4618      	mov	r0, r3
 8008e84:	3718      	adds	r7, #24
 8008e86:	46bd      	mov	sp, r7
 8008e88:	bd80      	pop	{r7, pc}
 8008e8a:	bf00      	nop
 8008e8c:	20000050 	.word	0x20000050

08008e90 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008e90:	b580      	push	{r7, lr}
 8008e92:	b086      	sub	sp, #24
 8008e94:	af00      	add	r7, sp, #0
 8008e96:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008e98:	2182      	movs	r1, #130	@ 0x82
 8008e9a:	4818      	ldr	r0, [pc, #96]	@ (8008efc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008e9c:	f000 fcdf 	bl	800985e <USBD_GetEpDesc>
 8008ea0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008ea2:	2101      	movs	r1, #1
 8008ea4:	4815      	ldr	r0, [pc, #84]	@ (8008efc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008ea6:	f000 fcda 	bl	800985e <USBD_GetEpDesc>
 8008eaa:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008eac:	2181      	movs	r1, #129	@ 0x81
 8008eae:	4813      	ldr	r0, [pc, #76]	@ (8008efc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008eb0:	f000 fcd5 	bl	800985e <USBD_GetEpDesc>
 8008eb4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008eb6:	697b      	ldr	r3, [r7, #20]
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d002      	beq.n	8008ec2 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008ebc:	697b      	ldr	r3, [r7, #20]
 8008ebe:	2210      	movs	r2, #16
 8008ec0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008ec2:	693b      	ldr	r3, [r7, #16]
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d006      	beq.n	8008ed6 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008ec8:	693b      	ldr	r3, [r7, #16]
 8008eca:	2200      	movs	r2, #0
 8008ecc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008ed0:	711a      	strb	r2, [r3, #4]
 8008ed2:	2200      	movs	r2, #0
 8008ed4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d006      	beq.n	8008eea <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	2200      	movs	r2, #0
 8008ee0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008ee4:	711a      	strb	r2, [r3, #4]
 8008ee6:	2200      	movs	r2, #0
 8008ee8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	2243      	movs	r2, #67	@ 0x43
 8008eee:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008ef0:	4b02      	ldr	r3, [pc, #8]	@ (8008efc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8008ef2:	4618      	mov	r0, r3
 8008ef4:	3718      	adds	r7, #24
 8008ef6:	46bd      	mov	sp, r7
 8008ef8:	bd80      	pop	{r7, pc}
 8008efa:	bf00      	nop
 8008efc:	20000050 	.word	0x20000050

08008f00 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008f00:	b480      	push	{r7}
 8008f02:	b083      	sub	sp, #12
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	220a      	movs	r2, #10
 8008f0c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8008f0e:	4b03      	ldr	r3, [pc, #12]	@ (8008f1c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008f10:	4618      	mov	r0, r3
 8008f12:	370c      	adds	r7, #12
 8008f14:	46bd      	mov	sp, r7
 8008f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f1a:	4770      	bx	lr
 8008f1c:	2000000c 	.word	0x2000000c

08008f20 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8008f20:	b480      	push	{r7}
 8008f22:	b083      	sub	sp, #12
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	6078      	str	r0, [r7, #4]
 8008f28:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8008f2a:	683b      	ldr	r3, [r7, #0]
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d101      	bne.n	8008f34 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008f30:	2303      	movs	r3, #3
 8008f32:	e009      	b.n	8008f48 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008f3a:	687a      	ldr	r2, [r7, #4]
 8008f3c:	33b0      	adds	r3, #176	@ 0xb0
 8008f3e:	009b      	lsls	r3, r3, #2
 8008f40:	4413      	add	r3, r2
 8008f42:	683a      	ldr	r2, [r7, #0]
 8008f44:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8008f46:	2300      	movs	r3, #0
}
 8008f48:	4618      	mov	r0, r3
 8008f4a:	370c      	adds	r7, #12
 8008f4c:	46bd      	mov	sp, r7
 8008f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f52:	4770      	bx	lr

08008f54 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8008f54:	b480      	push	{r7}
 8008f56:	b087      	sub	sp, #28
 8008f58:	af00      	add	r7, sp, #0
 8008f5a:	60f8      	str	r0, [r7, #12]
 8008f5c:	60b9      	str	r1, [r7, #8]
 8008f5e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	32b0      	adds	r2, #176	@ 0xb0
 8008f6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f6e:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8008f70:	697b      	ldr	r3, [r7, #20]
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d101      	bne.n	8008f7a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8008f76:	2303      	movs	r3, #3
 8008f78:	e008      	b.n	8008f8c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8008f7a:	697b      	ldr	r3, [r7, #20]
 8008f7c:	68ba      	ldr	r2, [r7, #8]
 8008f7e:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8008f82:	697b      	ldr	r3, [r7, #20]
 8008f84:	687a      	ldr	r2, [r7, #4]
 8008f86:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8008f8a:	2300      	movs	r3, #0
}
 8008f8c:	4618      	mov	r0, r3
 8008f8e:	371c      	adds	r7, #28
 8008f90:	46bd      	mov	sp, r7
 8008f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f96:	4770      	bx	lr

08008f98 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8008f98:	b480      	push	{r7}
 8008f9a:	b085      	sub	sp, #20
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	6078      	str	r0, [r7, #4]
 8008fa0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	32b0      	adds	r2, #176	@ 0xb0
 8008fac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008fb0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d101      	bne.n	8008fbc <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8008fb8:	2303      	movs	r3, #3
 8008fba:	e004      	b.n	8008fc6 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	683a      	ldr	r2, [r7, #0]
 8008fc0:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8008fc4:	2300      	movs	r3, #0
}
 8008fc6:	4618      	mov	r0, r3
 8008fc8:	3714      	adds	r7, #20
 8008fca:	46bd      	mov	sp, r7
 8008fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd0:	4770      	bx	lr
	...

08008fd4 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008fd4:	b580      	push	{r7, lr}
 8008fd6:	b084      	sub	sp, #16
 8008fd8:	af00      	add	r7, sp, #0
 8008fda:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	32b0      	adds	r2, #176	@ 0xb0
 8008fe6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008fea:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8008fec:	2301      	movs	r3, #1
 8008fee:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8008ff0:	68bb      	ldr	r3, [r7, #8]
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d101      	bne.n	8008ffa <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8008ff6:	2303      	movs	r3, #3
 8008ff8:	e025      	b.n	8009046 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8008ffa:	68bb      	ldr	r3, [r7, #8]
 8008ffc:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8009000:	2b00      	cmp	r3, #0
 8009002:	d11f      	bne.n	8009044 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8009004:	68bb      	ldr	r3, [r7, #8]
 8009006:	2201      	movs	r2, #1
 8009008:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800900c:	4b10      	ldr	r3, [pc, #64]	@ (8009050 <USBD_CDC_TransmitPacket+0x7c>)
 800900e:	781b      	ldrb	r3, [r3, #0]
 8009010:	f003 020f 	and.w	r2, r3, #15
 8009014:	68bb      	ldr	r3, [r7, #8]
 8009016:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800901a:	6878      	ldr	r0, [r7, #4]
 800901c:	4613      	mov	r3, r2
 800901e:	009b      	lsls	r3, r3, #2
 8009020:	4413      	add	r3, r2
 8009022:	009b      	lsls	r3, r3, #2
 8009024:	4403      	add	r3, r0
 8009026:	3318      	adds	r3, #24
 8009028:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800902a:	4b09      	ldr	r3, [pc, #36]	@ (8009050 <USBD_CDC_TransmitPacket+0x7c>)
 800902c:	7819      	ldrb	r1, [r3, #0]
 800902e:	68bb      	ldr	r3, [r7, #8]
 8009030:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8009034:	68bb      	ldr	r3, [r7, #8]
 8009036:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800903a:	6878      	ldr	r0, [r7, #4]
 800903c:	f001 ffc9 	bl	800afd2 <USBD_LL_Transmit>

    ret = USBD_OK;
 8009040:	2300      	movs	r3, #0
 8009042:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8009044:	7bfb      	ldrb	r3, [r7, #15]
}
 8009046:	4618      	mov	r0, r3
 8009048:	3710      	adds	r7, #16
 800904a:	46bd      	mov	sp, r7
 800904c:	bd80      	pop	{r7, pc}
 800904e:	bf00      	nop
 8009050:	20000093 	.word	0x20000093

08009054 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009054:	b580      	push	{r7, lr}
 8009056:	b084      	sub	sp, #16
 8009058:	af00      	add	r7, sp, #0
 800905a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	32b0      	adds	r2, #176	@ 0xb0
 8009066:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800906a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	32b0      	adds	r2, #176	@ 0xb0
 8009076:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800907a:	2b00      	cmp	r3, #0
 800907c:	d101      	bne.n	8009082 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800907e:	2303      	movs	r3, #3
 8009080:	e018      	b.n	80090b4 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	7c1b      	ldrb	r3, [r3, #16]
 8009086:	2b00      	cmp	r3, #0
 8009088:	d10a      	bne.n	80090a0 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800908a:	4b0c      	ldr	r3, [pc, #48]	@ (80090bc <USBD_CDC_ReceivePacket+0x68>)
 800908c:	7819      	ldrb	r1, [r3, #0]
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009094:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009098:	6878      	ldr	r0, [r7, #4]
 800909a:	f001 ffbb 	bl	800b014 <USBD_LL_PrepareReceive>
 800909e:	e008      	b.n	80090b2 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80090a0:	4b06      	ldr	r3, [pc, #24]	@ (80090bc <USBD_CDC_ReceivePacket+0x68>)
 80090a2:	7819      	ldrb	r1, [r3, #0]
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80090aa:	2340      	movs	r3, #64	@ 0x40
 80090ac:	6878      	ldr	r0, [r7, #4]
 80090ae:	f001 ffb1 	bl	800b014 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80090b2:	2300      	movs	r3, #0
}
 80090b4:	4618      	mov	r0, r3
 80090b6:	3710      	adds	r7, #16
 80090b8:	46bd      	mov	sp, r7
 80090ba:	bd80      	pop	{r7, pc}
 80090bc:	20000094 	.word	0x20000094

080090c0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80090c0:	b580      	push	{r7, lr}
 80090c2:	b086      	sub	sp, #24
 80090c4:	af00      	add	r7, sp, #0
 80090c6:	60f8      	str	r0, [r7, #12]
 80090c8:	60b9      	str	r1, [r7, #8]
 80090ca:	4613      	mov	r3, r2
 80090cc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d101      	bne.n	80090d8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80090d4:	2303      	movs	r3, #3
 80090d6:	e01f      	b.n	8009118 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	2200      	movs	r2, #0
 80090dc:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	2200      	movs	r2, #0
 80090e4:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	2200      	movs	r2, #0
 80090ec:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80090f0:	68bb      	ldr	r3, [r7, #8]
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d003      	beq.n	80090fe <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	68ba      	ldr	r2, [r7, #8]
 80090fa:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	2201      	movs	r2, #1
 8009102:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	79fa      	ldrb	r2, [r7, #7]
 800910a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800910c:	68f8      	ldr	r0, [r7, #12]
 800910e:	f001 fe2b 	bl	800ad68 <USBD_LL_Init>
 8009112:	4603      	mov	r3, r0
 8009114:	75fb      	strb	r3, [r7, #23]

  return ret;
 8009116:	7dfb      	ldrb	r3, [r7, #23]
}
 8009118:	4618      	mov	r0, r3
 800911a:	3718      	adds	r7, #24
 800911c:	46bd      	mov	sp, r7
 800911e:	bd80      	pop	{r7, pc}

08009120 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009120:	b580      	push	{r7, lr}
 8009122:	b084      	sub	sp, #16
 8009124:	af00      	add	r7, sp, #0
 8009126:	6078      	str	r0, [r7, #4]
 8009128:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800912a:	2300      	movs	r3, #0
 800912c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800912e:	683b      	ldr	r3, [r7, #0]
 8009130:	2b00      	cmp	r3, #0
 8009132:	d101      	bne.n	8009138 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009134:	2303      	movs	r3, #3
 8009136:	e025      	b.n	8009184 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	683a      	ldr	r2, [r7, #0]
 800913c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	32ae      	adds	r2, #174	@ 0xae
 800914a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800914e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009150:	2b00      	cmp	r3, #0
 8009152:	d00f      	beq.n	8009174 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	32ae      	adds	r2, #174	@ 0xae
 800915e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009162:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009164:	f107 020e 	add.w	r2, r7, #14
 8009168:	4610      	mov	r0, r2
 800916a:	4798      	blx	r3
 800916c:	4602      	mov	r2, r0
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800917a:	1c5a      	adds	r2, r3, #1
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8009182:	2300      	movs	r3, #0
}
 8009184:	4618      	mov	r0, r3
 8009186:	3710      	adds	r7, #16
 8009188:	46bd      	mov	sp, r7
 800918a:	bd80      	pop	{r7, pc}

0800918c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800918c:	b580      	push	{r7, lr}
 800918e:	b082      	sub	sp, #8
 8009190:	af00      	add	r7, sp, #0
 8009192:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8009194:	6878      	ldr	r0, [r7, #4]
 8009196:	f001 fe33 	bl	800ae00 <USBD_LL_Start>
 800919a:	4603      	mov	r3, r0
}
 800919c:	4618      	mov	r0, r3
 800919e:	3708      	adds	r7, #8
 80091a0:	46bd      	mov	sp, r7
 80091a2:	bd80      	pop	{r7, pc}

080091a4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80091a4:	b480      	push	{r7}
 80091a6:	b083      	sub	sp, #12
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80091ac:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80091ae:	4618      	mov	r0, r3
 80091b0:	370c      	adds	r7, #12
 80091b2:	46bd      	mov	sp, r7
 80091b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b8:	4770      	bx	lr

080091ba <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80091ba:	b580      	push	{r7, lr}
 80091bc:	b084      	sub	sp, #16
 80091be:	af00      	add	r7, sp, #0
 80091c0:	6078      	str	r0, [r7, #4]
 80091c2:	460b      	mov	r3, r1
 80091c4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80091c6:	2300      	movs	r3, #0
 80091c8:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d009      	beq.n	80091e8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	78fa      	ldrb	r2, [r7, #3]
 80091de:	4611      	mov	r1, r2
 80091e0:	6878      	ldr	r0, [r7, #4]
 80091e2:	4798      	blx	r3
 80091e4:	4603      	mov	r3, r0
 80091e6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80091e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80091ea:	4618      	mov	r0, r3
 80091ec:	3710      	adds	r7, #16
 80091ee:	46bd      	mov	sp, r7
 80091f0:	bd80      	pop	{r7, pc}

080091f2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80091f2:	b580      	push	{r7, lr}
 80091f4:	b084      	sub	sp, #16
 80091f6:	af00      	add	r7, sp, #0
 80091f8:	6078      	str	r0, [r7, #4]
 80091fa:	460b      	mov	r3, r1
 80091fc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80091fe:	2300      	movs	r3, #0
 8009200:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009208:	685b      	ldr	r3, [r3, #4]
 800920a:	78fa      	ldrb	r2, [r7, #3]
 800920c:	4611      	mov	r1, r2
 800920e:	6878      	ldr	r0, [r7, #4]
 8009210:	4798      	blx	r3
 8009212:	4603      	mov	r3, r0
 8009214:	2b00      	cmp	r3, #0
 8009216:	d001      	beq.n	800921c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8009218:	2303      	movs	r3, #3
 800921a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800921c:	7bfb      	ldrb	r3, [r7, #15]
}
 800921e:	4618      	mov	r0, r3
 8009220:	3710      	adds	r7, #16
 8009222:	46bd      	mov	sp, r7
 8009224:	bd80      	pop	{r7, pc}

08009226 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009226:	b580      	push	{r7, lr}
 8009228:	b084      	sub	sp, #16
 800922a:	af00      	add	r7, sp, #0
 800922c:	6078      	str	r0, [r7, #4]
 800922e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009236:	6839      	ldr	r1, [r7, #0]
 8009238:	4618      	mov	r0, r3
 800923a:	f001 f90c 	bl	800a456 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	2201      	movs	r2, #1
 8009242:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800924c:	461a      	mov	r2, r3
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800925a:	f003 031f 	and.w	r3, r3, #31
 800925e:	2b02      	cmp	r3, #2
 8009260:	d01a      	beq.n	8009298 <USBD_LL_SetupStage+0x72>
 8009262:	2b02      	cmp	r3, #2
 8009264:	d822      	bhi.n	80092ac <USBD_LL_SetupStage+0x86>
 8009266:	2b00      	cmp	r3, #0
 8009268:	d002      	beq.n	8009270 <USBD_LL_SetupStage+0x4a>
 800926a:	2b01      	cmp	r3, #1
 800926c:	d00a      	beq.n	8009284 <USBD_LL_SetupStage+0x5e>
 800926e:	e01d      	b.n	80092ac <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009276:	4619      	mov	r1, r3
 8009278:	6878      	ldr	r0, [r7, #4]
 800927a:	f000 fb63 	bl	8009944 <USBD_StdDevReq>
 800927e:	4603      	mov	r3, r0
 8009280:	73fb      	strb	r3, [r7, #15]
      break;
 8009282:	e020      	b.n	80092c6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800928a:	4619      	mov	r1, r3
 800928c:	6878      	ldr	r0, [r7, #4]
 800928e:	f000 fbcb 	bl	8009a28 <USBD_StdItfReq>
 8009292:	4603      	mov	r3, r0
 8009294:	73fb      	strb	r3, [r7, #15]
      break;
 8009296:	e016      	b.n	80092c6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800929e:	4619      	mov	r1, r3
 80092a0:	6878      	ldr	r0, [r7, #4]
 80092a2:	f000 fc2d 	bl	8009b00 <USBD_StdEPReq>
 80092a6:	4603      	mov	r3, r0
 80092a8:	73fb      	strb	r3, [r7, #15]
      break;
 80092aa:	e00c      	b.n	80092c6 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80092b2:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80092b6:	b2db      	uxtb	r3, r3
 80092b8:	4619      	mov	r1, r3
 80092ba:	6878      	ldr	r0, [r7, #4]
 80092bc:	f001 fe00 	bl	800aec0 <USBD_LL_StallEP>
 80092c0:	4603      	mov	r3, r0
 80092c2:	73fb      	strb	r3, [r7, #15]
      break;
 80092c4:	bf00      	nop
  }

  return ret;
 80092c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80092c8:	4618      	mov	r0, r3
 80092ca:	3710      	adds	r7, #16
 80092cc:	46bd      	mov	sp, r7
 80092ce:	bd80      	pop	{r7, pc}

080092d0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80092d0:	b580      	push	{r7, lr}
 80092d2:	b086      	sub	sp, #24
 80092d4:	af00      	add	r7, sp, #0
 80092d6:	60f8      	str	r0, [r7, #12]
 80092d8:	460b      	mov	r3, r1
 80092da:	607a      	str	r2, [r7, #4]
 80092dc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80092de:	2300      	movs	r3, #0
 80092e0:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80092e2:	7afb      	ldrb	r3, [r7, #11]
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d16e      	bne.n	80093c6 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80092ee:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80092f6:	2b03      	cmp	r3, #3
 80092f8:	f040 8098 	bne.w	800942c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80092fc:	693b      	ldr	r3, [r7, #16]
 80092fe:	689a      	ldr	r2, [r3, #8]
 8009300:	693b      	ldr	r3, [r7, #16]
 8009302:	68db      	ldr	r3, [r3, #12]
 8009304:	429a      	cmp	r2, r3
 8009306:	d913      	bls.n	8009330 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8009308:	693b      	ldr	r3, [r7, #16]
 800930a:	689a      	ldr	r2, [r3, #8]
 800930c:	693b      	ldr	r3, [r7, #16]
 800930e:	68db      	ldr	r3, [r3, #12]
 8009310:	1ad2      	subs	r2, r2, r3
 8009312:	693b      	ldr	r3, [r7, #16]
 8009314:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8009316:	693b      	ldr	r3, [r7, #16]
 8009318:	68da      	ldr	r2, [r3, #12]
 800931a:	693b      	ldr	r3, [r7, #16]
 800931c:	689b      	ldr	r3, [r3, #8]
 800931e:	4293      	cmp	r3, r2
 8009320:	bf28      	it	cs
 8009322:	4613      	movcs	r3, r2
 8009324:	461a      	mov	r2, r3
 8009326:	6879      	ldr	r1, [r7, #4]
 8009328:	68f8      	ldr	r0, [r7, #12]
 800932a:	f001 f994 	bl	800a656 <USBD_CtlContinueRx>
 800932e:	e07d      	b.n	800942c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8009336:	f003 031f 	and.w	r3, r3, #31
 800933a:	2b02      	cmp	r3, #2
 800933c:	d014      	beq.n	8009368 <USBD_LL_DataOutStage+0x98>
 800933e:	2b02      	cmp	r3, #2
 8009340:	d81d      	bhi.n	800937e <USBD_LL_DataOutStage+0xae>
 8009342:	2b00      	cmp	r3, #0
 8009344:	d002      	beq.n	800934c <USBD_LL_DataOutStage+0x7c>
 8009346:	2b01      	cmp	r3, #1
 8009348:	d003      	beq.n	8009352 <USBD_LL_DataOutStage+0x82>
 800934a:	e018      	b.n	800937e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800934c:	2300      	movs	r3, #0
 800934e:	75bb      	strb	r3, [r7, #22]
            break;
 8009350:	e018      	b.n	8009384 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8009358:	b2db      	uxtb	r3, r3
 800935a:	4619      	mov	r1, r3
 800935c:	68f8      	ldr	r0, [r7, #12]
 800935e:	f000 fa64 	bl	800982a <USBD_CoreFindIF>
 8009362:	4603      	mov	r3, r0
 8009364:	75bb      	strb	r3, [r7, #22]
            break;
 8009366:	e00d      	b.n	8009384 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800936e:	b2db      	uxtb	r3, r3
 8009370:	4619      	mov	r1, r3
 8009372:	68f8      	ldr	r0, [r7, #12]
 8009374:	f000 fa66 	bl	8009844 <USBD_CoreFindEP>
 8009378:	4603      	mov	r3, r0
 800937a:	75bb      	strb	r3, [r7, #22]
            break;
 800937c:	e002      	b.n	8009384 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800937e:	2300      	movs	r3, #0
 8009380:	75bb      	strb	r3, [r7, #22]
            break;
 8009382:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8009384:	7dbb      	ldrb	r3, [r7, #22]
 8009386:	2b00      	cmp	r3, #0
 8009388:	d119      	bne.n	80093be <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009390:	b2db      	uxtb	r3, r3
 8009392:	2b03      	cmp	r3, #3
 8009394:	d113      	bne.n	80093be <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8009396:	7dba      	ldrb	r2, [r7, #22]
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	32ae      	adds	r2, #174	@ 0xae
 800939c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80093a0:	691b      	ldr	r3, [r3, #16]
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d00b      	beq.n	80093be <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80093a6:	7dba      	ldrb	r2, [r7, #22]
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80093ae:	7dba      	ldrb	r2, [r7, #22]
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	32ae      	adds	r2, #174	@ 0xae
 80093b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80093b8:	691b      	ldr	r3, [r3, #16]
 80093ba:	68f8      	ldr	r0, [r7, #12]
 80093bc:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80093be:	68f8      	ldr	r0, [r7, #12]
 80093c0:	f001 f95a 	bl	800a678 <USBD_CtlSendStatus>
 80093c4:	e032      	b.n	800942c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80093c6:	7afb      	ldrb	r3, [r7, #11]
 80093c8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80093cc:	b2db      	uxtb	r3, r3
 80093ce:	4619      	mov	r1, r3
 80093d0:	68f8      	ldr	r0, [r7, #12]
 80093d2:	f000 fa37 	bl	8009844 <USBD_CoreFindEP>
 80093d6:	4603      	mov	r3, r0
 80093d8:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80093da:	7dbb      	ldrb	r3, [r7, #22]
 80093dc:	2bff      	cmp	r3, #255	@ 0xff
 80093de:	d025      	beq.n	800942c <USBD_LL_DataOutStage+0x15c>
 80093e0:	7dbb      	ldrb	r3, [r7, #22]
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d122      	bne.n	800942c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80093ec:	b2db      	uxtb	r3, r3
 80093ee:	2b03      	cmp	r3, #3
 80093f0:	d117      	bne.n	8009422 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80093f2:	7dba      	ldrb	r2, [r7, #22]
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	32ae      	adds	r2, #174	@ 0xae
 80093f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80093fc:	699b      	ldr	r3, [r3, #24]
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d00f      	beq.n	8009422 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8009402:	7dba      	ldrb	r2, [r7, #22]
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800940a:	7dba      	ldrb	r2, [r7, #22]
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	32ae      	adds	r2, #174	@ 0xae
 8009410:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009414:	699b      	ldr	r3, [r3, #24]
 8009416:	7afa      	ldrb	r2, [r7, #11]
 8009418:	4611      	mov	r1, r2
 800941a:	68f8      	ldr	r0, [r7, #12]
 800941c:	4798      	blx	r3
 800941e:	4603      	mov	r3, r0
 8009420:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8009422:	7dfb      	ldrb	r3, [r7, #23]
 8009424:	2b00      	cmp	r3, #0
 8009426:	d001      	beq.n	800942c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8009428:	7dfb      	ldrb	r3, [r7, #23]
 800942a:	e000      	b.n	800942e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800942c:	2300      	movs	r3, #0
}
 800942e:	4618      	mov	r0, r3
 8009430:	3718      	adds	r7, #24
 8009432:	46bd      	mov	sp, r7
 8009434:	bd80      	pop	{r7, pc}

08009436 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009436:	b580      	push	{r7, lr}
 8009438:	b086      	sub	sp, #24
 800943a:	af00      	add	r7, sp, #0
 800943c:	60f8      	str	r0, [r7, #12]
 800943e:	460b      	mov	r3, r1
 8009440:	607a      	str	r2, [r7, #4]
 8009442:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8009444:	7afb      	ldrb	r3, [r7, #11]
 8009446:	2b00      	cmp	r3, #0
 8009448:	d16f      	bne.n	800952a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	3314      	adds	r3, #20
 800944e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009456:	2b02      	cmp	r3, #2
 8009458:	d15a      	bne.n	8009510 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800945a:	693b      	ldr	r3, [r7, #16]
 800945c:	689a      	ldr	r2, [r3, #8]
 800945e:	693b      	ldr	r3, [r7, #16]
 8009460:	68db      	ldr	r3, [r3, #12]
 8009462:	429a      	cmp	r2, r3
 8009464:	d914      	bls.n	8009490 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009466:	693b      	ldr	r3, [r7, #16]
 8009468:	689a      	ldr	r2, [r3, #8]
 800946a:	693b      	ldr	r3, [r7, #16]
 800946c:	68db      	ldr	r3, [r3, #12]
 800946e:	1ad2      	subs	r2, r2, r3
 8009470:	693b      	ldr	r3, [r7, #16]
 8009472:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8009474:	693b      	ldr	r3, [r7, #16]
 8009476:	689b      	ldr	r3, [r3, #8]
 8009478:	461a      	mov	r2, r3
 800947a:	6879      	ldr	r1, [r7, #4]
 800947c:	68f8      	ldr	r0, [r7, #12]
 800947e:	f001 f8bc 	bl	800a5fa <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009482:	2300      	movs	r3, #0
 8009484:	2200      	movs	r2, #0
 8009486:	2100      	movs	r1, #0
 8009488:	68f8      	ldr	r0, [r7, #12]
 800948a:	f001 fdc3 	bl	800b014 <USBD_LL_PrepareReceive>
 800948e:	e03f      	b.n	8009510 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8009490:	693b      	ldr	r3, [r7, #16]
 8009492:	68da      	ldr	r2, [r3, #12]
 8009494:	693b      	ldr	r3, [r7, #16]
 8009496:	689b      	ldr	r3, [r3, #8]
 8009498:	429a      	cmp	r2, r3
 800949a:	d11c      	bne.n	80094d6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800949c:	693b      	ldr	r3, [r7, #16]
 800949e:	685a      	ldr	r2, [r3, #4]
 80094a0:	693b      	ldr	r3, [r7, #16]
 80094a2:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80094a4:	429a      	cmp	r2, r3
 80094a6:	d316      	bcc.n	80094d6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80094a8:	693b      	ldr	r3, [r7, #16]
 80094aa:	685a      	ldr	r2, [r3, #4]
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80094b2:	429a      	cmp	r2, r3
 80094b4:	d20f      	bcs.n	80094d6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80094b6:	2200      	movs	r2, #0
 80094b8:	2100      	movs	r1, #0
 80094ba:	68f8      	ldr	r0, [r7, #12]
 80094bc:	f001 f89d 	bl	800a5fa <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	2200      	movs	r2, #0
 80094c4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80094c8:	2300      	movs	r3, #0
 80094ca:	2200      	movs	r2, #0
 80094cc:	2100      	movs	r1, #0
 80094ce:	68f8      	ldr	r0, [r7, #12]
 80094d0:	f001 fda0 	bl	800b014 <USBD_LL_PrepareReceive>
 80094d4:	e01c      	b.n	8009510 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80094dc:	b2db      	uxtb	r3, r3
 80094de:	2b03      	cmp	r3, #3
 80094e0:	d10f      	bne.n	8009502 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80094e8:	68db      	ldr	r3, [r3, #12]
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d009      	beq.n	8009502 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	2200      	movs	r2, #0
 80094f2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80094fc:	68db      	ldr	r3, [r3, #12]
 80094fe:	68f8      	ldr	r0, [r7, #12]
 8009500:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8009502:	2180      	movs	r1, #128	@ 0x80
 8009504:	68f8      	ldr	r0, [r7, #12]
 8009506:	f001 fcdb 	bl	800aec0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800950a:	68f8      	ldr	r0, [r7, #12]
 800950c:	f001 f8c7 	bl	800a69e <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8009516:	2b00      	cmp	r3, #0
 8009518:	d03a      	beq.n	8009590 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800951a:	68f8      	ldr	r0, [r7, #12]
 800951c:	f7ff fe42 	bl	80091a4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	2200      	movs	r2, #0
 8009524:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8009528:	e032      	b.n	8009590 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800952a:	7afb      	ldrb	r3, [r7, #11]
 800952c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8009530:	b2db      	uxtb	r3, r3
 8009532:	4619      	mov	r1, r3
 8009534:	68f8      	ldr	r0, [r7, #12]
 8009536:	f000 f985 	bl	8009844 <USBD_CoreFindEP>
 800953a:	4603      	mov	r3, r0
 800953c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800953e:	7dfb      	ldrb	r3, [r7, #23]
 8009540:	2bff      	cmp	r3, #255	@ 0xff
 8009542:	d025      	beq.n	8009590 <USBD_LL_DataInStage+0x15a>
 8009544:	7dfb      	ldrb	r3, [r7, #23]
 8009546:	2b00      	cmp	r3, #0
 8009548:	d122      	bne.n	8009590 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009550:	b2db      	uxtb	r3, r3
 8009552:	2b03      	cmp	r3, #3
 8009554:	d11c      	bne.n	8009590 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8009556:	7dfa      	ldrb	r2, [r7, #23]
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	32ae      	adds	r2, #174	@ 0xae
 800955c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009560:	695b      	ldr	r3, [r3, #20]
 8009562:	2b00      	cmp	r3, #0
 8009564:	d014      	beq.n	8009590 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8009566:	7dfa      	ldrb	r2, [r7, #23]
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800956e:	7dfa      	ldrb	r2, [r7, #23]
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	32ae      	adds	r2, #174	@ 0xae
 8009574:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009578:	695b      	ldr	r3, [r3, #20]
 800957a:	7afa      	ldrb	r2, [r7, #11]
 800957c:	4611      	mov	r1, r2
 800957e:	68f8      	ldr	r0, [r7, #12]
 8009580:	4798      	blx	r3
 8009582:	4603      	mov	r3, r0
 8009584:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8009586:	7dbb      	ldrb	r3, [r7, #22]
 8009588:	2b00      	cmp	r3, #0
 800958a:	d001      	beq.n	8009590 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800958c:	7dbb      	ldrb	r3, [r7, #22]
 800958e:	e000      	b.n	8009592 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8009590:	2300      	movs	r3, #0
}
 8009592:	4618      	mov	r0, r3
 8009594:	3718      	adds	r7, #24
 8009596:	46bd      	mov	sp, r7
 8009598:	bd80      	pop	{r7, pc}

0800959a <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800959a:	b580      	push	{r7, lr}
 800959c:	b084      	sub	sp, #16
 800959e:	af00      	add	r7, sp, #0
 80095a0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80095a2:	2300      	movs	r3, #0
 80095a4:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	2201      	movs	r2, #1
 80095aa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	2200      	movs	r2, #0
 80095b2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	2200      	movs	r2, #0
 80095ba:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	2200      	movs	r2, #0
 80095c0:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	2200      	movs	r2, #0
 80095c8:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d014      	beq.n	8009600 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80095dc:	685b      	ldr	r3, [r3, #4]
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d00e      	beq.n	8009600 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80095e8:	685b      	ldr	r3, [r3, #4]
 80095ea:	687a      	ldr	r2, [r7, #4]
 80095ec:	6852      	ldr	r2, [r2, #4]
 80095ee:	b2d2      	uxtb	r2, r2
 80095f0:	4611      	mov	r1, r2
 80095f2:	6878      	ldr	r0, [r7, #4]
 80095f4:	4798      	blx	r3
 80095f6:	4603      	mov	r3, r0
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d001      	beq.n	8009600 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80095fc:	2303      	movs	r3, #3
 80095fe:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009600:	2340      	movs	r3, #64	@ 0x40
 8009602:	2200      	movs	r2, #0
 8009604:	2100      	movs	r1, #0
 8009606:	6878      	ldr	r0, [r7, #4]
 8009608:	f001 fc15 	bl	800ae36 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	2201      	movs	r2, #1
 8009610:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	2240      	movs	r2, #64	@ 0x40
 8009618:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800961c:	2340      	movs	r3, #64	@ 0x40
 800961e:	2200      	movs	r2, #0
 8009620:	2180      	movs	r1, #128	@ 0x80
 8009622:	6878      	ldr	r0, [r7, #4]
 8009624:	f001 fc07 	bl	800ae36 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	2201      	movs	r2, #1
 800962c:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	2240      	movs	r2, #64	@ 0x40
 8009632:	621a      	str	r2, [r3, #32]

  return ret;
 8009634:	7bfb      	ldrb	r3, [r7, #15]
}
 8009636:	4618      	mov	r0, r3
 8009638:	3710      	adds	r7, #16
 800963a:	46bd      	mov	sp, r7
 800963c:	bd80      	pop	{r7, pc}

0800963e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800963e:	b480      	push	{r7}
 8009640:	b083      	sub	sp, #12
 8009642:	af00      	add	r7, sp, #0
 8009644:	6078      	str	r0, [r7, #4]
 8009646:	460b      	mov	r3, r1
 8009648:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	78fa      	ldrb	r2, [r7, #3]
 800964e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009650:	2300      	movs	r3, #0
}
 8009652:	4618      	mov	r0, r3
 8009654:	370c      	adds	r7, #12
 8009656:	46bd      	mov	sp, r7
 8009658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800965c:	4770      	bx	lr

0800965e <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800965e:	b480      	push	{r7}
 8009660:	b083      	sub	sp, #12
 8009662:	af00      	add	r7, sp, #0
 8009664:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800966c:	b2db      	uxtb	r3, r3
 800966e:	2b04      	cmp	r3, #4
 8009670:	d006      	beq.n	8009680 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009678:	b2da      	uxtb	r2, r3
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	2204      	movs	r2, #4
 8009684:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8009688:	2300      	movs	r3, #0
}
 800968a:	4618      	mov	r0, r3
 800968c:	370c      	adds	r7, #12
 800968e:	46bd      	mov	sp, r7
 8009690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009694:	4770      	bx	lr

08009696 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009696:	b480      	push	{r7}
 8009698:	b083      	sub	sp, #12
 800969a:	af00      	add	r7, sp, #0
 800969c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80096a4:	b2db      	uxtb	r3, r3
 80096a6:	2b04      	cmp	r3, #4
 80096a8:	d106      	bne.n	80096b8 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 80096b0:	b2da      	uxtb	r2, r3
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80096b8:	2300      	movs	r3, #0
}
 80096ba:	4618      	mov	r0, r3
 80096bc:	370c      	adds	r7, #12
 80096be:	46bd      	mov	sp, r7
 80096c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c4:	4770      	bx	lr

080096c6 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80096c6:	b580      	push	{r7, lr}
 80096c8:	b082      	sub	sp, #8
 80096ca:	af00      	add	r7, sp, #0
 80096cc:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80096d4:	b2db      	uxtb	r3, r3
 80096d6:	2b03      	cmp	r3, #3
 80096d8:	d110      	bne.n	80096fc <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d00b      	beq.n	80096fc <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80096ea:	69db      	ldr	r3, [r3, #28]
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d005      	beq.n	80096fc <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80096f6:	69db      	ldr	r3, [r3, #28]
 80096f8:	6878      	ldr	r0, [r7, #4]
 80096fa:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80096fc:	2300      	movs	r3, #0
}
 80096fe:	4618      	mov	r0, r3
 8009700:	3708      	adds	r7, #8
 8009702:	46bd      	mov	sp, r7
 8009704:	bd80      	pop	{r7, pc}

08009706 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8009706:	b580      	push	{r7, lr}
 8009708:	b082      	sub	sp, #8
 800970a:	af00      	add	r7, sp, #0
 800970c:	6078      	str	r0, [r7, #4]
 800970e:	460b      	mov	r3, r1
 8009710:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	32ae      	adds	r2, #174	@ 0xae
 800971c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009720:	2b00      	cmp	r3, #0
 8009722:	d101      	bne.n	8009728 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8009724:	2303      	movs	r3, #3
 8009726:	e01c      	b.n	8009762 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800972e:	b2db      	uxtb	r3, r3
 8009730:	2b03      	cmp	r3, #3
 8009732:	d115      	bne.n	8009760 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	32ae      	adds	r2, #174	@ 0xae
 800973e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009742:	6a1b      	ldr	r3, [r3, #32]
 8009744:	2b00      	cmp	r3, #0
 8009746:	d00b      	beq.n	8009760 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	32ae      	adds	r2, #174	@ 0xae
 8009752:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009756:	6a1b      	ldr	r3, [r3, #32]
 8009758:	78fa      	ldrb	r2, [r7, #3]
 800975a:	4611      	mov	r1, r2
 800975c:	6878      	ldr	r0, [r7, #4]
 800975e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009760:	2300      	movs	r3, #0
}
 8009762:	4618      	mov	r0, r3
 8009764:	3708      	adds	r7, #8
 8009766:	46bd      	mov	sp, r7
 8009768:	bd80      	pop	{r7, pc}

0800976a <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800976a:	b580      	push	{r7, lr}
 800976c:	b082      	sub	sp, #8
 800976e:	af00      	add	r7, sp, #0
 8009770:	6078      	str	r0, [r7, #4]
 8009772:	460b      	mov	r3, r1
 8009774:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	32ae      	adds	r2, #174	@ 0xae
 8009780:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009784:	2b00      	cmp	r3, #0
 8009786:	d101      	bne.n	800978c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8009788:	2303      	movs	r3, #3
 800978a:	e01c      	b.n	80097c6 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009792:	b2db      	uxtb	r3, r3
 8009794:	2b03      	cmp	r3, #3
 8009796:	d115      	bne.n	80097c4 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	32ae      	adds	r2, #174	@ 0xae
 80097a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80097a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d00b      	beq.n	80097c4 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	32ae      	adds	r2, #174	@ 0xae
 80097b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80097ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80097bc:	78fa      	ldrb	r2, [r7, #3]
 80097be:	4611      	mov	r1, r2
 80097c0:	6878      	ldr	r0, [r7, #4]
 80097c2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80097c4:	2300      	movs	r3, #0
}
 80097c6:	4618      	mov	r0, r3
 80097c8:	3708      	adds	r7, #8
 80097ca:	46bd      	mov	sp, r7
 80097cc:	bd80      	pop	{r7, pc}

080097ce <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80097ce:	b480      	push	{r7}
 80097d0:	b083      	sub	sp, #12
 80097d2:	af00      	add	r7, sp, #0
 80097d4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80097d6:	2300      	movs	r3, #0
}
 80097d8:	4618      	mov	r0, r3
 80097da:	370c      	adds	r7, #12
 80097dc:	46bd      	mov	sp, r7
 80097de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e2:	4770      	bx	lr

080097e4 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80097e4:	b580      	push	{r7, lr}
 80097e6:	b084      	sub	sp, #16
 80097e8:	af00      	add	r7, sp, #0
 80097ea:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80097ec:	2300      	movs	r3, #0
 80097ee:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	2201      	movs	r2, #1
 80097f4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d00e      	beq.n	8009820 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009808:	685b      	ldr	r3, [r3, #4]
 800980a:	687a      	ldr	r2, [r7, #4]
 800980c:	6852      	ldr	r2, [r2, #4]
 800980e:	b2d2      	uxtb	r2, r2
 8009810:	4611      	mov	r1, r2
 8009812:	6878      	ldr	r0, [r7, #4]
 8009814:	4798      	blx	r3
 8009816:	4603      	mov	r3, r0
 8009818:	2b00      	cmp	r3, #0
 800981a:	d001      	beq.n	8009820 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800981c:	2303      	movs	r3, #3
 800981e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009820:	7bfb      	ldrb	r3, [r7, #15]
}
 8009822:	4618      	mov	r0, r3
 8009824:	3710      	adds	r7, #16
 8009826:	46bd      	mov	sp, r7
 8009828:	bd80      	pop	{r7, pc}

0800982a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800982a:	b480      	push	{r7}
 800982c:	b083      	sub	sp, #12
 800982e:	af00      	add	r7, sp, #0
 8009830:	6078      	str	r0, [r7, #4]
 8009832:	460b      	mov	r3, r1
 8009834:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009836:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009838:	4618      	mov	r0, r3
 800983a:	370c      	adds	r7, #12
 800983c:	46bd      	mov	sp, r7
 800983e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009842:	4770      	bx	lr

08009844 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009844:	b480      	push	{r7}
 8009846:	b083      	sub	sp, #12
 8009848:	af00      	add	r7, sp, #0
 800984a:	6078      	str	r0, [r7, #4]
 800984c:	460b      	mov	r3, r1
 800984e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009850:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009852:	4618      	mov	r0, r3
 8009854:	370c      	adds	r7, #12
 8009856:	46bd      	mov	sp, r7
 8009858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800985c:	4770      	bx	lr

0800985e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800985e:	b580      	push	{r7, lr}
 8009860:	b086      	sub	sp, #24
 8009862:	af00      	add	r7, sp, #0
 8009864:	6078      	str	r0, [r7, #4]
 8009866:	460b      	mov	r3, r1
 8009868:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8009872:	2300      	movs	r3, #0
 8009874:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	885b      	ldrh	r3, [r3, #2]
 800987a:	b29b      	uxth	r3, r3
 800987c:	68fa      	ldr	r2, [r7, #12]
 800987e:	7812      	ldrb	r2, [r2, #0]
 8009880:	4293      	cmp	r3, r2
 8009882:	d91f      	bls.n	80098c4 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	781b      	ldrb	r3, [r3, #0]
 8009888:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800988a:	e013      	b.n	80098b4 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800988c:	f107 030a 	add.w	r3, r7, #10
 8009890:	4619      	mov	r1, r3
 8009892:	6978      	ldr	r0, [r7, #20]
 8009894:	f000 f81b 	bl	80098ce <USBD_GetNextDesc>
 8009898:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800989a:	697b      	ldr	r3, [r7, #20]
 800989c:	785b      	ldrb	r3, [r3, #1]
 800989e:	2b05      	cmp	r3, #5
 80098a0:	d108      	bne.n	80098b4 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80098a2:	697b      	ldr	r3, [r7, #20]
 80098a4:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80098a6:	693b      	ldr	r3, [r7, #16]
 80098a8:	789b      	ldrb	r3, [r3, #2]
 80098aa:	78fa      	ldrb	r2, [r7, #3]
 80098ac:	429a      	cmp	r2, r3
 80098ae:	d008      	beq.n	80098c2 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80098b0:	2300      	movs	r3, #0
 80098b2:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	885b      	ldrh	r3, [r3, #2]
 80098b8:	b29a      	uxth	r2, r3
 80098ba:	897b      	ldrh	r3, [r7, #10]
 80098bc:	429a      	cmp	r2, r3
 80098be:	d8e5      	bhi.n	800988c <USBD_GetEpDesc+0x2e>
 80098c0:	e000      	b.n	80098c4 <USBD_GetEpDesc+0x66>
          break;
 80098c2:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80098c4:	693b      	ldr	r3, [r7, #16]
}
 80098c6:	4618      	mov	r0, r3
 80098c8:	3718      	adds	r7, #24
 80098ca:	46bd      	mov	sp, r7
 80098cc:	bd80      	pop	{r7, pc}

080098ce <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80098ce:	b480      	push	{r7}
 80098d0:	b085      	sub	sp, #20
 80098d2:	af00      	add	r7, sp, #0
 80098d4:	6078      	str	r0, [r7, #4]
 80098d6:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80098dc:	683b      	ldr	r3, [r7, #0]
 80098de:	881b      	ldrh	r3, [r3, #0]
 80098e0:	68fa      	ldr	r2, [r7, #12]
 80098e2:	7812      	ldrb	r2, [r2, #0]
 80098e4:	4413      	add	r3, r2
 80098e6:	b29a      	uxth	r2, r3
 80098e8:	683b      	ldr	r3, [r7, #0]
 80098ea:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	781b      	ldrb	r3, [r3, #0]
 80098f0:	461a      	mov	r2, r3
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	4413      	add	r3, r2
 80098f6:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80098f8:	68fb      	ldr	r3, [r7, #12]
}
 80098fa:	4618      	mov	r0, r3
 80098fc:	3714      	adds	r7, #20
 80098fe:	46bd      	mov	sp, r7
 8009900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009904:	4770      	bx	lr

08009906 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8009906:	b480      	push	{r7}
 8009908:	b087      	sub	sp, #28
 800990a:	af00      	add	r7, sp, #0
 800990c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8009912:	697b      	ldr	r3, [r7, #20]
 8009914:	781b      	ldrb	r3, [r3, #0]
 8009916:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8009918:	697b      	ldr	r3, [r7, #20]
 800991a:	3301      	adds	r3, #1
 800991c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800991e:	697b      	ldr	r3, [r7, #20]
 8009920:	781b      	ldrb	r3, [r3, #0]
 8009922:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8009924:	8a3b      	ldrh	r3, [r7, #16]
 8009926:	021b      	lsls	r3, r3, #8
 8009928:	b21a      	sxth	r2, r3
 800992a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800992e:	4313      	orrs	r3, r2
 8009930:	b21b      	sxth	r3, r3
 8009932:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8009934:	89fb      	ldrh	r3, [r7, #14]
}
 8009936:	4618      	mov	r0, r3
 8009938:	371c      	adds	r7, #28
 800993a:	46bd      	mov	sp, r7
 800993c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009940:	4770      	bx	lr
	...

08009944 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009944:	b580      	push	{r7, lr}
 8009946:	b084      	sub	sp, #16
 8009948:	af00      	add	r7, sp, #0
 800994a:	6078      	str	r0, [r7, #4]
 800994c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800994e:	2300      	movs	r3, #0
 8009950:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009952:	683b      	ldr	r3, [r7, #0]
 8009954:	781b      	ldrb	r3, [r3, #0]
 8009956:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800995a:	2b40      	cmp	r3, #64	@ 0x40
 800995c:	d005      	beq.n	800996a <USBD_StdDevReq+0x26>
 800995e:	2b40      	cmp	r3, #64	@ 0x40
 8009960:	d857      	bhi.n	8009a12 <USBD_StdDevReq+0xce>
 8009962:	2b00      	cmp	r3, #0
 8009964:	d00f      	beq.n	8009986 <USBD_StdDevReq+0x42>
 8009966:	2b20      	cmp	r3, #32
 8009968:	d153      	bne.n	8009a12 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	32ae      	adds	r2, #174	@ 0xae
 8009974:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009978:	689b      	ldr	r3, [r3, #8]
 800997a:	6839      	ldr	r1, [r7, #0]
 800997c:	6878      	ldr	r0, [r7, #4]
 800997e:	4798      	blx	r3
 8009980:	4603      	mov	r3, r0
 8009982:	73fb      	strb	r3, [r7, #15]
      break;
 8009984:	e04a      	b.n	8009a1c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009986:	683b      	ldr	r3, [r7, #0]
 8009988:	785b      	ldrb	r3, [r3, #1]
 800998a:	2b09      	cmp	r3, #9
 800998c:	d83b      	bhi.n	8009a06 <USBD_StdDevReq+0xc2>
 800998e:	a201      	add	r2, pc, #4	@ (adr r2, 8009994 <USBD_StdDevReq+0x50>)
 8009990:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009994:	080099e9 	.word	0x080099e9
 8009998:	080099fd 	.word	0x080099fd
 800999c:	08009a07 	.word	0x08009a07
 80099a0:	080099f3 	.word	0x080099f3
 80099a4:	08009a07 	.word	0x08009a07
 80099a8:	080099c7 	.word	0x080099c7
 80099ac:	080099bd 	.word	0x080099bd
 80099b0:	08009a07 	.word	0x08009a07
 80099b4:	080099df 	.word	0x080099df
 80099b8:	080099d1 	.word	0x080099d1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80099bc:	6839      	ldr	r1, [r7, #0]
 80099be:	6878      	ldr	r0, [r7, #4]
 80099c0:	f000 fa3c 	bl	8009e3c <USBD_GetDescriptor>
          break;
 80099c4:	e024      	b.n	8009a10 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80099c6:	6839      	ldr	r1, [r7, #0]
 80099c8:	6878      	ldr	r0, [r7, #4]
 80099ca:	f000 fba1 	bl	800a110 <USBD_SetAddress>
          break;
 80099ce:	e01f      	b.n	8009a10 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80099d0:	6839      	ldr	r1, [r7, #0]
 80099d2:	6878      	ldr	r0, [r7, #4]
 80099d4:	f000 fbe0 	bl	800a198 <USBD_SetConfig>
 80099d8:	4603      	mov	r3, r0
 80099da:	73fb      	strb	r3, [r7, #15]
          break;
 80099dc:	e018      	b.n	8009a10 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80099de:	6839      	ldr	r1, [r7, #0]
 80099e0:	6878      	ldr	r0, [r7, #4]
 80099e2:	f000 fc83 	bl	800a2ec <USBD_GetConfig>
          break;
 80099e6:	e013      	b.n	8009a10 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80099e8:	6839      	ldr	r1, [r7, #0]
 80099ea:	6878      	ldr	r0, [r7, #4]
 80099ec:	f000 fcb4 	bl	800a358 <USBD_GetStatus>
          break;
 80099f0:	e00e      	b.n	8009a10 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80099f2:	6839      	ldr	r1, [r7, #0]
 80099f4:	6878      	ldr	r0, [r7, #4]
 80099f6:	f000 fce3 	bl	800a3c0 <USBD_SetFeature>
          break;
 80099fa:	e009      	b.n	8009a10 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80099fc:	6839      	ldr	r1, [r7, #0]
 80099fe:	6878      	ldr	r0, [r7, #4]
 8009a00:	f000 fd07 	bl	800a412 <USBD_ClrFeature>
          break;
 8009a04:	e004      	b.n	8009a10 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8009a06:	6839      	ldr	r1, [r7, #0]
 8009a08:	6878      	ldr	r0, [r7, #4]
 8009a0a:	f000 fd5e 	bl	800a4ca <USBD_CtlError>
          break;
 8009a0e:	bf00      	nop
      }
      break;
 8009a10:	e004      	b.n	8009a1c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8009a12:	6839      	ldr	r1, [r7, #0]
 8009a14:	6878      	ldr	r0, [r7, #4]
 8009a16:	f000 fd58 	bl	800a4ca <USBD_CtlError>
      break;
 8009a1a:	bf00      	nop
  }

  return ret;
 8009a1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a1e:	4618      	mov	r0, r3
 8009a20:	3710      	adds	r7, #16
 8009a22:	46bd      	mov	sp, r7
 8009a24:	bd80      	pop	{r7, pc}
 8009a26:	bf00      	nop

08009a28 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009a28:	b580      	push	{r7, lr}
 8009a2a:	b084      	sub	sp, #16
 8009a2c:	af00      	add	r7, sp, #0
 8009a2e:	6078      	str	r0, [r7, #4]
 8009a30:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009a32:	2300      	movs	r3, #0
 8009a34:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009a36:	683b      	ldr	r3, [r7, #0]
 8009a38:	781b      	ldrb	r3, [r3, #0]
 8009a3a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009a3e:	2b40      	cmp	r3, #64	@ 0x40
 8009a40:	d005      	beq.n	8009a4e <USBD_StdItfReq+0x26>
 8009a42:	2b40      	cmp	r3, #64	@ 0x40
 8009a44:	d852      	bhi.n	8009aec <USBD_StdItfReq+0xc4>
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d001      	beq.n	8009a4e <USBD_StdItfReq+0x26>
 8009a4a:	2b20      	cmp	r3, #32
 8009a4c:	d14e      	bne.n	8009aec <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009a54:	b2db      	uxtb	r3, r3
 8009a56:	3b01      	subs	r3, #1
 8009a58:	2b02      	cmp	r3, #2
 8009a5a:	d840      	bhi.n	8009ade <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009a5c:	683b      	ldr	r3, [r7, #0]
 8009a5e:	889b      	ldrh	r3, [r3, #4]
 8009a60:	b2db      	uxtb	r3, r3
 8009a62:	2b01      	cmp	r3, #1
 8009a64:	d836      	bhi.n	8009ad4 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8009a66:	683b      	ldr	r3, [r7, #0]
 8009a68:	889b      	ldrh	r3, [r3, #4]
 8009a6a:	b2db      	uxtb	r3, r3
 8009a6c:	4619      	mov	r1, r3
 8009a6e:	6878      	ldr	r0, [r7, #4]
 8009a70:	f7ff fedb 	bl	800982a <USBD_CoreFindIF>
 8009a74:	4603      	mov	r3, r0
 8009a76:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009a78:	7bbb      	ldrb	r3, [r7, #14]
 8009a7a:	2bff      	cmp	r3, #255	@ 0xff
 8009a7c:	d01d      	beq.n	8009aba <USBD_StdItfReq+0x92>
 8009a7e:	7bbb      	ldrb	r3, [r7, #14]
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d11a      	bne.n	8009aba <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8009a84:	7bba      	ldrb	r2, [r7, #14]
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	32ae      	adds	r2, #174	@ 0xae
 8009a8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a8e:	689b      	ldr	r3, [r3, #8]
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d00f      	beq.n	8009ab4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8009a94:	7bba      	ldrb	r2, [r7, #14]
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009a9c:	7bba      	ldrb	r2, [r7, #14]
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	32ae      	adds	r2, #174	@ 0xae
 8009aa2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009aa6:	689b      	ldr	r3, [r3, #8]
 8009aa8:	6839      	ldr	r1, [r7, #0]
 8009aaa:	6878      	ldr	r0, [r7, #4]
 8009aac:	4798      	blx	r3
 8009aae:	4603      	mov	r3, r0
 8009ab0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009ab2:	e004      	b.n	8009abe <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8009ab4:	2303      	movs	r3, #3
 8009ab6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009ab8:	e001      	b.n	8009abe <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8009aba:	2303      	movs	r3, #3
 8009abc:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009abe:	683b      	ldr	r3, [r7, #0]
 8009ac0:	88db      	ldrh	r3, [r3, #6]
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d110      	bne.n	8009ae8 <USBD_StdItfReq+0xc0>
 8009ac6:	7bfb      	ldrb	r3, [r7, #15]
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d10d      	bne.n	8009ae8 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8009acc:	6878      	ldr	r0, [r7, #4]
 8009ace:	f000 fdd3 	bl	800a678 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009ad2:	e009      	b.n	8009ae8 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8009ad4:	6839      	ldr	r1, [r7, #0]
 8009ad6:	6878      	ldr	r0, [r7, #4]
 8009ad8:	f000 fcf7 	bl	800a4ca <USBD_CtlError>
          break;
 8009adc:	e004      	b.n	8009ae8 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8009ade:	6839      	ldr	r1, [r7, #0]
 8009ae0:	6878      	ldr	r0, [r7, #4]
 8009ae2:	f000 fcf2 	bl	800a4ca <USBD_CtlError>
          break;
 8009ae6:	e000      	b.n	8009aea <USBD_StdItfReq+0xc2>
          break;
 8009ae8:	bf00      	nop
      }
      break;
 8009aea:	e004      	b.n	8009af6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8009aec:	6839      	ldr	r1, [r7, #0]
 8009aee:	6878      	ldr	r0, [r7, #4]
 8009af0:	f000 fceb 	bl	800a4ca <USBD_CtlError>
      break;
 8009af4:	bf00      	nop
  }

  return ret;
 8009af6:	7bfb      	ldrb	r3, [r7, #15]
}
 8009af8:	4618      	mov	r0, r3
 8009afa:	3710      	adds	r7, #16
 8009afc:	46bd      	mov	sp, r7
 8009afe:	bd80      	pop	{r7, pc}

08009b00 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009b00:	b580      	push	{r7, lr}
 8009b02:	b084      	sub	sp, #16
 8009b04:	af00      	add	r7, sp, #0
 8009b06:	6078      	str	r0, [r7, #4]
 8009b08:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8009b0a:	2300      	movs	r3, #0
 8009b0c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8009b0e:	683b      	ldr	r3, [r7, #0]
 8009b10:	889b      	ldrh	r3, [r3, #4]
 8009b12:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009b14:	683b      	ldr	r3, [r7, #0]
 8009b16:	781b      	ldrb	r3, [r3, #0]
 8009b18:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009b1c:	2b40      	cmp	r3, #64	@ 0x40
 8009b1e:	d007      	beq.n	8009b30 <USBD_StdEPReq+0x30>
 8009b20:	2b40      	cmp	r3, #64	@ 0x40
 8009b22:	f200 817f 	bhi.w	8009e24 <USBD_StdEPReq+0x324>
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d02a      	beq.n	8009b80 <USBD_StdEPReq+0x80>
 8009b2a:	2b20      	cmp	r3, #32
 8009b2c:	f040 817a 	bne.w	8009e24 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8009b30:	7bbb      	ldrb	r3, [r7, #14]
 8009b32:	4619      	mov	r1, r3
 8009b34:	6878      	ldr	r0, [r7, #4]
 8009b36:	f7ff fe85 	bl	8009844 <USBD_CoreFindEP>
 8009b3a:	4603      	mov	r3, r0
 8009b3c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009b3e:	7b7b      	ldrb	r3, [r7, #13]
 8009b40:	2bff      	cmp	r3, #255	@ 0xff
 8009b42:	f000 8174 	beq.w	8009e2e <USBD_StdEPReq+0x32e>
 8009b46:	7b7b      	ldrb	r3, [r7, #13]
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	f040 8170 	bne.w	8009e2e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8009b4e:	7b7a      	ldrb	r2, [r7, #13]
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8009b56:	7b7a      	ldrb	r2, [r7, #13]
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	32ae      	adds	r2, #174	@ 0xae
 8009b5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b60:	689b      	ldr	r3, [r3, #8]
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	f000 8163 	beq.w	8009e2e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8009b68:	7b7a      	ldrb	r2, [r7, #13]
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	32ae      	adds	r2, #174	@ 0xae
 8009b6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b72:	689b      	ldr	r3, [r3, #8]
 8009b74:	6839      	ldr	r1, [r7, #0]
 8009b76:	6878      	ldr	r0, [r7, #4]
 8009b78:	4798      	blx	r3
 8009b7a:	4603      	mov	r3, r0
 8009b7c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8009b7e:	e156      	b.n	8009e2e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009b80:	683b      	ldr	r3, [r7, #0]
 8009b82:	785b      	ldrb	r3, [r3, #1]
 8009b84:	2b03      	cmp	r3, #3
 8009b86:	d008      	beq.n	8009b9a <USBD_StdEPReq+0x9a>
 8009b88:	2b03      	cmp	r3, #3
 8009b8a:	f300 8145 	bgt.w	8009e18 <USBD_StdEPReq+0x318>
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	f000 809b 	beq.w	8009cca <USBD_StdEPReq+0x1ca>
 8009b94:	2b01      	cmp	r3, #1
 8009b96:	d03c      	beq.n	8009c12 <USBD_StdEPReq+0x112>
 8009b98:	e13e      	b.n	8009e18 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009ba0:	b2db      	uxtb	r3, r3
 8009ba2:	2b02      	cmp	r3, #2
 8009ba4:	d002      	beq.n	8009bac <USBD_StdEPReq+0xac>
 8009ba6:	2b03      	cmp	r3, #3
 8009ba8:	d016      	beq.n	8009bd8 <USBD_StdEPReq+0xd8>
 8009baa:	e02c      	b.n	8009c06 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009bac:	7bbb      	ldrb	r3, [r7, #14]
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d00d      	beq.n	8009bce <USBD_StdEPReq+0xce>
 8009bb2:	7bbb      	ldrb	r3, [r7, #14]
 8009bb4:	2b80      	cmp	r3, #128	@ 0x80
 8009bb6:	d00a      	beq.n	8009bce <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009bb8:	7bbb      	ldrb	r3, [r7, #14]
 8009bba:	4619      	mov	r1, r3
 8009bbc:	6878      	ldr	r0, [r7, #4]
 8009bbe:	f001 f97f 	bl	800aec0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009bc2:	2180      	movs	r1, #128	@ 0x80
 8009bc4:	6878      	ldr	r0, [r7, #4]
 8009bc6:	f001 f97b 	bl	800aec0 <USBD_LL_StallEP>
 8009bca:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009bcc:	e020      	b.n	8009c10 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8009bce:	6839      	ldr	r1, [r7, #0]
 8009bd0:	6878      	ldr	r0, [r7, #4]
 8009bd2:	f000 fc7a 	bl	800a4ca <USBD_CtlError>
              break;
 8009bd6:	e01b      	b.n	8009c10 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009bd8:	683b      	ldr	r3, [r7, #0]
 8009bda:	885b      	ldrh	r3, [r3, #2]
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d10e      	bne.n	8009bfe <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009be0:	7bbb      	ldrb	r3, [r7, #14]
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d00b      	beq.n	8009bfe <USBD_StdEPReq+0xfe>
 8009be6:	7bbb      	ldrb	r3, [r7, #14]
 8009be8:	2b80      	cmp	r3, #128	@ 0x80
 8009bea:	d008      	beq.n	8009bfe <USBD_StdEPReq+0xfe>
 8009bec:	683b      	ldr	r3, [r7, #0]
 8009bee:	88db      	ldrh	r3, [r3, #6]
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d104      	bne.n	8009bfe <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009bf4:	7bbb      	ldrb	r3, [r7, #14]
 8009bf6:	4619      	mov	r1, r3
 8009bf8:	6878      	ldr	r0, [r7, #4]
 8009bfa:	f001 f961 	bl	800aec0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8009bfe:	6878      	ldr	r0, [r7, #4]
 8009c00:	f000 fd3a 	bl	800a678 <USBD_CtlSendStatus>

              break;
 8009c04:	e004      	b.n	8009c10 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8009c06:	6839      	ldr	r1, [r7, #0]
 8009c08:	6878      	ldr	r0, [r7, #4]
 8009c0a:	f000 fc5e 	bl	800a4ca <USBD_CtlError>
              break;
 8009c0e:	bf00      	nop
          }
          break;
 8009c10:	e107      	b.n	8009e22 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009c18:	b2db      	uxtb	r3, r3
 8009c1a:	2b02      	cmp	r3, #2
 8009c1c:	d002      	beq.n	8009c24 <USBD_StdEPReq+0x124>
 8009c1e:	2b03      	cmp	r3, #3
 8009c20:	d016      	beq.n	8009c50 <USBD_StdEPReq+0x150>
 8009c22:	e04b      	b.n	8009cbc <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009c24:	7bbb      	ldrb	r3, [r7, #14]
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d00d      	beq.n	8009c46 <USBD_StdEPReq+0x146>
 8009c2a:	7bbb      	ldrb	r3, [r7, #14]
 8009c2c:	2b80      	cmp	r3, #128	@ 0x80
 8009c2e:	d00a      	beq.n	8009c46 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009c30:	7bbb      	ldrb	r3, [r7, #14]
 8009c32:	4619      	mov	r1, r3
 8009c34:	6878      	ldr	r0, [r7, #4]
 8009c36:	f001 f943 	bl	800aec0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009c3a:	2180      	movs	r1, #128	@ 0x80
 8009c3c:	6878      	ldr	r0, [r7, #4]
 8009c3e:	f001 f93f 	bl	800aec0 <USBD_LL_StallEP>
 8009c42:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009c44:	e040      	b.n	8009cc8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8009c46:	6839      	ldr	r1, [r7, #0]
 8009c48:	6878      	ldr	r0, [r7, #4]
 8009c4a:	f000 fc3e 	bl	800a4ca <USBD_CtlError>
              break;
 8009c4e:	e03b      	b.n	8009cc8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009c50:	683b      	ldr	r3, [r7, #0]
 8009c52:	885b      	ldrh	r3, [r3, #2]
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d136      	bne.n	8009cc6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009c58:	7bbb      	ldrb	r3, [r7, #14]
 8009c5a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d004      	beq.n	8009c6c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009c62:	7bbb      	ldrb	r3, [r7, #14]
 8009c64:	4619      	mov	r1, r3
 8009c66:	6878      	ldr	r0, [r7, #4]
 8009c68:	f001 f949 	bl	800aefe <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009c6c:	6878      	ldr	r0, [r7, #4]
 8009c6e:	f000 fd03 	bl	800a678 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8009c72:	7bbb      	ldrb	r3, [r7, #14]
 8009c74:	4619      	mov	r1, r3
 8009c76:	6878      	ldr	r0, [r7, #4]
 8009c78:	f7ff fde4 	bl	8009844 <USBD_CoreFindEP>
 8009c7c:	4603      	mov	r3, r0
 8009c7e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009c80:	7b7b      	ldrb	r3, [r7, #13]
 8009c82:	2bff      	cmp	r3, #255	@ 0xff
 8009c84:	d01f      	beq.n	8009cc6 <USBD_StdEPReq+0x1c6>
 8009c86:	7b7b      	ldrb	r3, [r7, #13]
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d11c      	bne.n	8009cc6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8009c8c:	7b7a      	ldrb	r2, [r7, #13]
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8009c94:	7b7a      	ldrb	r2, [r7, #13]
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	32ae      	adds	r2, #174	@ 0xae
 8009c9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c9e:	689b      	ldr	r3, [r3, #8]
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d010      	beq.n	8009cc6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009ca4:	7b7a      	ldrb	r2, [r7, #13]
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	32ae      	adds	r2, #174	@ 0xae
 8009caa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009cae:	689b      	ldr	r3, [r3, #8]
 8009cb0:	6839      	ldr	r1, [r7, #0]
 8009cb2:	6878      	ldr	r0, [r7, #4]
 8009cb4:	4798      	blx	r3
 8009cb6:	4603      	mov	r3, r0
 8009cb8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8009cba:	e004      	b.n	8009cc6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8009cbc:	6839      	ldr	r1, [r7, #0]
 8009cbe:	6878      	ldr	r0, [r7, #4]
 8009cc0:	f000 fc03 	bl	800a4ca <USBD_CtlError>
              break;
 8009cc4:	e000      	b.n	8009cc8 <USBD_StdEPReq+0x1c8>
              break;
 8009cc6:	bf00      	nop
          }
          break;
 8009cc8:	e0ab      	b.n	8009e22 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009cd0:	b2db      	uxtb	r3, r3
 8009cd2:	2b02      	cmp	r3, #2
 8009cd4:	d002      	beq.n	8009cdc <USBD_StdEPReq+0x1dc>
 8009cd6:	2b03      	cmp	r3, #3
 8009cd8:	d032      	beq.n	8009d40 <USBD_StdEPReq+0x240>
 8009cda:	e097      	b.n	8009e0c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009cdc:	7bbb      	ldrb	r3, [r7, #14]
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d007      	beq.n	8009cf2 <USBD_StdEPReq+0x1f2>
 8009ce2:	7bbb      	ldrb	r3, [r7, #14]
 8009ce4:	2b80      	cmp	r3, #128	@ 0x80
 8009ce6:	d004      	beq.n	8009cf2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8009ce8:	6839      	ldr	r1, [r7, #0]
 8009cea:	6878      	ldr	r0, [r7, #4]
 8009cec:	f000 fbed 	bl	800a4ca <USBD_CtlError>
                break;
 8009cf0:	e091      	b.n	8009e16 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009cf2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	da0b      	bge.n	8009d12 <USBD_StdEPReq+0x212>
 8009cfa:	7bbb      	ldrb	r3, [r7, #14]
 8009cfc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009d00:	4613      	mov	r3, r2
 8009d02:	009b      	lsls	r3, r3, #2
 8009d04:	4413      	add	r3, r2
 8009d06:	009b      	lsls	r3, r3, #2
 8009d08:	3310      	adds	r3, #16
 8009d0a:	687a      	ldr	r2, [r7, #4]
 8009d0c:	4413      	add	r3, r2
 8009d0e:	3304      	adds	r3, #4
 8009d10:	e00b      	b.n	8009d2a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009d12:	7bbb      	ldrb	r3, [r7, #14]
 8009d14:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009d18:	4613      	mov	r3, r2
 8009d1a:	009b      	lsls	r3, r3, #2
 8009d1c:	4413      	add	r3, r2
 8009d1e:	009b      	lsls	r3, r3, #2
 8009d20:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009d24:	687a      	ldr	r2, [r7, #4]
 8009d26:	4413      	add	r3, r2
 8009d28:	3304      	adds	r3, #4
 8009d2a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009d2c:	68bb      	ldr	r3, [r7, #8]
 8009d2e:	2200      	movs	r2, #0
 8009d30:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009d32:	68bb      	ldr	r3, [r7, #8]
 8009d34:	2202      	movs	r2, #2
 8009d36:	4619      	mov	r1, r3
 8009d38:	6878      	ldr	r0, [r7, #4]
 8009d3a:	f000 fc43 	bl	800a5c4 <USBD_CtlSendData>
              break;
 8009d3e:	e06a      	b.n	8009e16 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009d40:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	da11      	bge.n	8009d6c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009d48:	7bbb      	ldrb	r3, [r7, #14]
 8009d4a:	f003 020f 	and.w	r2, r3, #15
 8009d4e:	6879      	ldr	r1, [r7, #4]
 8009d50:	4613      	mov	r3, r2
 8009d52:	009b      	lsls	r3, r3, #2
 8009d54:	4413      	add	r3, r2
 8009d56:	009b      	lsls	r3, r3, #2
 8009d58:	440b      	add	r3, r1
 8009d5a:	3324      	adds	r3, #36	@ 0x24
 8009d5c:	881b      	ldrh	r3, [r3, #0]
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d117      	bne.n	8009d92 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009d62:	6839      	ldr	r1, [r7, #0]
 8009d64:	6878      	ldr	r0, [r7, #4]
 8009d66:	f000 fbb0 	bl	800a4ca <USBD_CtlError>
                  break;
 8009d6a:	e054      	b.n	8009e16 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009d6c:	7bbb      	ldrb	r3, [r7, #14]
 8009d6e:	f003 020f 	and.w	r2, r3, #15
 8009d72:	6879      	ldr	r1, [r7, #4]
 8009d74:	4613      	mov	r3, r2
 8009d76:	009b      	lsls	r3, r3, #2
 8009d78:	4413      	add	r3, r2
 8009d7a:	009b      	lsls	r3, r3, #2
 8009d7c:	440b      	add	r3, r1
 8009d7e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009d82:	881b      	ldrh	r3, [r3, #0]
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d104      	bne.n	8009d92 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009d88:	6839      	ldr	r1, [r7, #0]
 8009d8a:	6878      	ldr	r0, [r7, #4]
 8009d8c:	f000 fb9d 	bl	800a4ca <USBD_CtlError>
                  break;
 8009d90:	e041      	b.n	8009e16 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009d92:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	da0b      	bge.n	8009db2 <USBD_StdEPReq+0x2b2>
 8009d9a:	7bbb      	ldrb	r3, [r7, #14]
 8009d9c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009da0:	4613      	mov	r3, r2
 8009da2:	009b      	lsls	r3, r3, #2
 8009da4:	4413      	add	r3, r2
 8009da6:	009b      	lsls	r3, r3, #2
 8009da8:	3310      	adds	r3, #16
 8009daa:	687a      	ldr	r2, [r7, #4]
 8009dac:	4413      	add	r3, r2
 8009dae:	3304      	adds	r3, #4
 8009db0:	e00b      	b.n	8009dca <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009db2:	7bbb      	ldrb	r3, [r7, #14]
 8009db4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009db8:	4613      	mov	r3, r2
 8009dba:	009b      	lsls	r3, r3, #2
 8009dbc:	4413      	add	r3, r2
 8009dbe:	009b      	lsls	r3, r3, #2
 8009dc0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009dc4:	687a      	ldr	r2, [r7, #4]
 8009dc6:	4413      	add	r3, r2
 8009dc8:	3304      	adds	r3, #4
 8009dca:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009dcc:	7bbb      	ldrb	r3, [r7, #14]
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d002      	beq.n	8009dd8 <USBD_StdEPReq+0x2d8>
 8009dd2:	7bbb      	ldrb	r3, [r7, #14]
 8009dd4:	2b80      	cmp	r3, #128	@ 0x80
 8009dd6:	d103      	bne.n	8009de0 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8009dd8:	68bb      	ldr	r3, [r7, #8]
 8009dda:	2200      	movs	r2, #0
 8009ddc:	601a      	str	r2, [r3, #0]
 8009dde:	e00e      	b.n	8009dfe <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009de0:	7bbb      	ldrb	r3, [r7, #14]
 8009de2:	4619      	mov	r1, r3
 8009de4:	6878      	ldr	r0, [r7, #4]
 8009de6:	f001 f8a9 	bl	800af3c <USBD_LL_IsStallEP>
 8009dea:	4603      	mov	r3, r0
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d003      	beq.n	8009df8 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8009df0:	68bb      	ldr	r3, [r7, #8]
 8009df2:	2201      	movs	r2, #1
 8009df4:	601a      	str	r2, [r3, #0]
 8009df6:	e002      	b.n	8009dfe <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8009df8:	68bb      	ldr	r3, [r7, #8]
 8009dfa:	2200      	movs	r2, #0
 8009dfc:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009dfe:	68bb      	ldr	r3, [r7, #8]
 8009e00:	2202      	movs	r2, #2
 8009e02:	4619      	mov	r1, r3
 8009e04:	6878      	ldr	r0, [r7, #4]
 8009e06:	f000 fbdd 	bl	800a5c4 <USBD_CtlSendData>
              break;
 8009e0a:	e004      	b.n	8009e16 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8009e0c:	6839      	ldr	r1, [r7, #0]
 8009e0e:	6878      	ldr	r0, [r7, #4]
 8009e10:	f000 fb5b 	bl	800a4ca <USBD_CtlError>
              break;
 8009e14:	bf00      	nop
          }
          break;
 8009e16:	e004      	b.n	8009e22 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8009e18:	6839      	ldr	r1, [r7, #0]
 8009e1a:	6878      	ldr	r0, [r7, #4]
 8009e1c:	f000 fb55 	bl	800a4ca <USBD_CtlError>
          break;
 8009e20:	bf00      	nop
      }
      break;
 8009e22:	e005      	b.n	8009e30 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8009e24:	6839      	ldr	r1, [r7, #0]
 8009e26:	6878      	ldr	r0, [r7, #4]
 8009e28:	f000 fb4f 	bl	800a4ca <USBD_CtlError>
      break;
 8009e2c:	e000      	b.n	8009e30 <USBD_StdEPReq+0x330>
      break;
 8009e2e:	bf00      	nop
  }

  return ret;
 8009e30:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e32:	4618      	mov	r0, r3
 8009e34:	3710      	adds	r7, #16
 8009e36:	46bd      	mov	sp, r7
 8009e38:	bd80      	pop	{r7, pc}
	...

08009e3c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009e3c:	b580      	push	{r7, lr}
 8009e3e:	b084      	sub	sp, #16
 8009e40:	af00      	add	r7, sp, #0
 8009e42:	6078      	str	r0, [r7, #4]
 8009e44:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009e46:	2300      	movs	r3, #0
 8009e48:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009e4a:	2300      	movs	r3, #0
 8009e4c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009e4e:	2300      	movs	r3, #0
 8009e50:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009e52:	683b      	ldr	r3, [r7, #0]
 8009e54:	885b      	ldrh	r3, [r3, #2]
 8009e56:	0a1b      	lsrs	r3, r3, #8
 8009e58:	b29b      	uxth	r3, r3
 8009e5a:	3b01      	subs	r3, #1
 8009e5c:	2b06      	cmp	r3, #6
 8009e5e:	f200 8128 	bhi.w	800a0b2 <USBD_GetDescriptor+0x276>
 8009e62:	a201      	add	r2, pc, #4	@ (adr r2, 8009e68 <USBD_GetDescriptor+0x2c>)
 8009e64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e68:	08009e85 	.word	0x08009e85
 8009e6c:	08009e9d 	.word	0x08009e9d
 8009e70:	08009edd 	.word	0x08009edd
 8009e74:	0800a0b3 	.word	0x0800a0b3
 8009e78:	0800a0b3 	.word	0x0800a0b3
 8009e7c:	0800a053 	.word	0x0800a053
 8009e80:	0800a07f 	.word	0x0800a07f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	687a      	ldr	r2, [r7, #4]
 8009e8e:	7c12      	ldrb	r2, [r2, #16]
 8009e90:	f107 0108 	add.w	r1, r7, #8
 8009e94:	4610      	mov	r0, r2
 8009e96:	4798      	blx	r3
 8009e98:	60f8      	str	r0, [r7, #12]
      break;
 8009e9a:	e112      	b.n	800a0c2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	7c1b      	ldrb	r3, [r3, #16]
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d10d      	bne.n	8009ec0 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009eaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009eac:	f107 0208 	add.w	r2, r7, #8
 8009eb0:	4610      	mov	r0, r2
 8009eb2:	4798      	blx	r3
 8009eb4:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	3301      	adds	r3, #1
 8009eba:	2202      	movs	r2, #2
 8009ebc:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009ebe:	e100      	b.n	800a0c2 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009ec6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ec8:	f107 0208 	add.w	r2, r7, #8
 8009ecc:	4610      	mov	r0, r2
 8009ece:	4798      	blx	r3
 8009ed0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	3301      	adds	r3, #1
 8009ed6:	2202      	movs	r2, #2
 8009ed8:	701a      	strb	r2, [r3, #0]
      break;
 8009eda:	e0f2      	b.n	800a0c2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009edc:	683b      	ldr	r3, [r7, #0]
 8009ede:	885b      	ldrh	r3, [r3, #2]
 8009ee0:	b2db      	uxtb	r3, r3
 8009ee2:	2b05      	cmp	r3, #5
 8009ee4:	f200 80ac 	bhi.w	800a040 <USBD_GetDescriptor+0x204>
 8009ee8:	a201      	add	r2, pc, #4	@ (adr r2, 8009ef0 <USBD_GetDescriptor+0xb4>)
 8009eea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009eee:	bf00      	nop
 8009ef0:	08009f09 	.word	0x08009f09
 8009ef4:	08009f3d 	.word	0x08009f3d
 8009ef8:	08009f71 	.word	0x08009f71
 8009efc:	08009fa5 	.word	0x08009fa5
 8009f00:	08009fd9 	.word	0x08009fd9
 8009f04:	0800a00d 	.word	0x0800a00d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009f0e:	685b      	ldr	r3, [r3, #4]
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d00b      	beq.n	8009f2c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009f1a:	685b      	ldr	r3, [r3, #4]
 8009f1c:	687a      	ldr	r2, [r7, #4]
 8009f1e:	7c12      	ldrb	r2, [r2, #16]
 8009f20:	f107 0108 	add.w	r1, r7, #8
 8009f24:	4610      	mov	r0, r2
 8009f26:	4798      	blx	r3
 8009f28:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009f2a:	e091      	b.n	800a050 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009f2c:	6839      	ldr	r1, [r7, #0]
 8009f2e:	6878      	ldr	r0, [r7, #4]
 8009f30:	f000 facb 	bl	800a4ca <USBD_CtlError>
            err++;
 8009f34:	7afb      	ldrb	r3, [r7, #11]
 8009f36:	3301      	adds	r3, #1
 8009f38:	72fb      	strb	r3, [r7, #11]
          break;
 8009f3a:	e089      	b.n	800a050 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009f42:	689b      	ldr	r3, [r3, #8]
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d00b      	beq.n	8009f60 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009f4e:	689b      	ldr	r3, [r3, #8]
 8009f50:	687a      	ldr	r2, [r7, #4]
 8009f52:	7c12      	ldrb	r2, [r2, #16]
 8009f54:	f107 0108 	add.w	r1, r7, #8
 8009f58:	4610      	mov	r0, r2
 8009f5a:	4798      	blx	r3
 8009f5c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009f5e:	e077      	b.n	800a050 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009f60:	6839      	ldr	r1, [r7, #0]
 8009f62:	6878      	ldr	r0, [r7, #4]
 8009f64:	f000 fab1 	bl	800a4ca <USBD_CtlError>
            err++;
 8009f68:	7afb      	ldrb	r3, [r7, #11]
 8009f6a:	3301      	adds	r3, #1
 8009f6c:	72fb      	strb	r3, [r7, #11]
          break;
 8009f6e:	e06f      	b.n	800a050 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009f76:	68db      	ldr	r3, [r3, #12]
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d00b      	beq.n	8009f94 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009f82:	68db      	ldr	r3, [r3, #12]
 8009f84:	687a      	ldr	r2, [r7, #4]
 8009f86:	7c12      	ldrb	r2, [r2, #16]
 8009f88:	f107 0108 	add.w	r1, r7, #8
 8009f8c:	4610      	mov	r0, r2
 8009f8e:	4798      	blx	r3
 8009f90:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009f92:	e05d      	b.n	800a050 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009f94:	6839      	ldr	r1, [r7, #0]
 8009f96:	6878      	ldr	r0, [r7, #4]
 8009f98:	f000 fa97 	bl	800a4ca <USBD_CtlError>
            err++;
 8009f9c:	7afb      	ldrb	r3, [r7, #11]
 8009f9e:	3301      	adds	r3, #1
 8009fa0:	72fb      	strb	r3, [r7, #11]
          break;
 8009fa2:	e055      	b.n	800a050 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009faa:	691b      	ldr	r3, [r3, #16]
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d00b      	beq.n	8009fc8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009fb6:	691b      	ldr	r3, [r3, #16]
 8009fb8:	687a      	ldr	r2, [r7, #4]
 8009fba:	7c12      	ldrb	r2, [r2, #16]
 8009fbc:	f107 0108 	add.w	r1, r7, #8
 8009fc0:	4610      	mov	r0, r2
 8009fc2:	4798      	blx	r3
 8009fc4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009fc6:	e043      	b.n	800a050 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009fc8:	6839      	ldr	r1, [r7, #0]
 8009fca:	6878      	ldr	r0, [r7, #4]
 8009fcc:	f000 fa7d 	bl	800a4ca <USBD_CtlError>
            err++;
 8009fd0:	7afb      	ldrb	r3, [r7, #11]
 8009fd2:	3301      	adds	r3, #1
 8009fd4:	72fb      	strb	r3, [r7, #11]
          break;
 8009fd6:	e03b      	b.n	800a050 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009fde:	695b      	ldr	r3, [r3, #20]
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d00b      	beq.n	8009ffc <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009fea:	695b      	ldr	r3, [r3, #20]
 8009fec:	687a      	ldr	r2, [r7, #4]
 8009fee:	7c12      	ldrb	r2, [r2, #16]
 8009ff0:	f107 0108 	add.w	r1, r7, #8
 8009ff4:	4610      	mov	r0, r2
 8009ff6:	4798      	blx	r3
 8009ff8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009ffa:	e029      	b.n	800a050 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009ffc:	6839      	ldr	r1, [r7, #0]
 8009ffe:	6878      	ldr	r0, [r7, #4]
 800a000:	f000 fa63 	bl	800a4ca <USBD_CtlError>
            err++;
 800a004:	7afb      	ldrb	r3, [r7, #11]
 800a006:	3301      	adds	r3, #1
 800a008:	72fb      	strb	r3, [r7, #11]
          break;
 800a00a:	e021      	b.n	800a050 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a012:	699b      	ldr	r3, [r3, #24]
 800a014:	2b00      	cmp	r3, #0
 800a016:	d00b      	beq.n	800a030 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a01e:	699b      	ldr	r3, [r3, #24]
 800a020:	687a      	ldr	r2, [r7, #4]
 800a022:	7c12      	ldrb	r2, [r2, #16]
 800a024:	f107 0108 	add.w	r1, r7, #8
 800a028:	4610      	mov	r0, r2
 800a02a:	4798      	blx	r3
 800a02c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a02e:	e00f      	b.n	800a050 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a030:	6839      	ldr	r1, [r7, #0]
 800a032:	6878      	ldr	r0, [r7, #4]
 800a034:	f000 fa49 	bl	800a4ca <USBD_CtlError>
            err++;
 800a038:	7afb      	ldrb	r3, [r7, #11]
 800a03a:	3301      	adds	r3, #1
 800a03c:	72fb      	strb	r3, [r7, #11]
          break;
 800a03e:	e007      	b.n	800a050 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800a040:	6839      	ldr	r1, [r7, #0]
 800a042:	6878      	ldr	r0, [r7, #4]
 800a044:	f000 fa41 	bl	800a4ca <USBD_CtlError>
          err++;
 800a048:	7afb      	ldrb	r3, [r7, #11]
 800a04a:	3301      	adds	r3, #1
 800a04c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800a04e:	bf00      	nop
      }
      break;
 800a050:	e037      	b.n	800a0c2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	7c1b      	ldrb	r3, [r3, #16]
 800a056:	2b00      	cmp	r3, #0
 800a058:	d109      	bne.n	800a06e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a060:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a062:	f107 0208 	add.w	r2, r7, #8
 800a066:	4610      	mov	r0, r2
 800a068:	4798      	blx	r3
 800a06a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a06c:	e029      	b.n	800a0c2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a06e:	6839      	ldr	r1, [r7, #0]
 800a070:	6878      	ldr	r0, [r7, #4]
 800a072:	f000 fa2a 	bl	800a4ca <USBD_CtlError>
        err++;
 800a076:	7afb      	ldrb	r3, [r7, #11]
 800a078:	3301      	adds	r3, #1
 800a07a:	72fb      	strb	r3, [r7, #11]
      break;
 800a07c:	e021      	b.n	800a0c2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	7c1b      	ldrb	r3, [r3, #16]
 800a082:	2b00      	cmp	r3, #0
 800a084:	d10d      	bne.n	800a0a2 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a08c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a08e:	f107 0208 	add.w	r2, r7, #8
 800a092:	4610      	mov	r0, r2
 800a094:	4798      	blx	r3
 800a096:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	3301      	adds	r3, #1
 800a09c:	2207      	movs	r2, #7
 800a09e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a0a0:	e00f      	b.n	800a0c2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a0a2:	6839      	ldr	r1, [r7, #0]
 800a0a4:	6878      	ldr	r0, [r7, #4]
 800a0a6:	f000 fa10 	bl	800a4ca <USBD_CtlError>
        err++;
 800a0aa:	7afb      	ldrb	r3, [r7, #11]
 800a0ac:	3301      	adds	r3, #1
 800a0ae:	72fb      	strb	r3, [r7, #11]
      break;
 800a0b0:	e007      	b.n	800a0c2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800a0b2:	6839      	ldr	r1, [r7, #0]
 800a0b4:	6878      	ldr	r0, [r7, #4]
 800a0b6:	f000 fa08 	bl	800a4ca <USBD_CtlError>
      err++;
 800a0ba:	7afb      	ldrb	r3, [r7, #11]
 800a0bc:	3301      	adds	r3, #1
 800a0be:	72fb      	strb	r3, [r7, #11]
      break;
 800a0c0:	bf00      	nop
  }

  if (err != 0U)
 800a0c2:	7afb      	ldrb	r3, [r7, #11]
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d11e      	bne.n	800a106 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800a0c8:	683b      	ldr	r3, [r7, #0]
 800a0ca:	88db      	ldrh	r3, [r3, #6]
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d016      	beq.n	800a0fe <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800a0d0:	893b      	ldrh	r3, [r7, #8]
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d00e      	beq.n	800a0f4 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800a0d6:	683b      	ldr	r3, [r7, #0]
 800a0d8:	88da      	ldrh	r2, [r3, #6]
 800a0da:	893b      	ldrh	r3, [r7, #8]
 800a0dc:	4293      	cmp	r3, r2
 800a0de:	bf28      	it	cs
 800a0e0:	4613      	movcs	r3, r2
 800a0e2:	b29b      	uxth	r3, r3
 800a0e4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a0e6:	893b      	ldrh	r3, [r7, #8]
 800a0e8:	461a      	mov	r2, r3
 800a0ea:	68f9      	ldr	r1, [r7, #12]
 800a0ec:	6878      	ldr	r0, [r7, #4]
 800a0ee:	f000 fa69 	bl	800a5c4 <USBD_CtlSendData>
 800a0f2:	e009      	b.n	800a108 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800a0f4:	6839      	ldr	r1, [r7, #0]
 800a0f6:	6878      	ldr	r0, [r7, #4]
 800a0f8:	f000 f9e7 	bl	800a4ca <USBD_CtlError>
 800a0fc:	e004      	b.n	800a108 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800a0fe:	6878      	ldr	r0, [r7, #4]
 800a100:	f000 faba 	bl	800a678 <USBD_CtlSendStatus>
 800a104:	e000      	b.n	800a108 <USBD_GetDescriptor+0x2cc>
    return;
 800a106:	bf00      	nop
  }
}
 800a108:	3710      	adds	r7, #16
 800a10a:	46bd      	mov	sp, r7
 800a10c:	bd80      	pop	{r7, pc}
 800a10e:	bf00      	nop

0800a110 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a110:	b580      	push	{r7, lr}
 800a112:	b084      	sub	sp, #16
 800a114:	af00      	add	r7, sp, #0
 800a116:	6078      	str	r0, [r7, #4]
 800a118:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a11a:	683b      	ldr	r3, [r7, #0]
 800a11c:	889b      	ldrh	r3, [r3, #4]
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d131      	bne.n	800a186 <USBD_SetAddress+0x76>
 800a122:	683b      	ldr	r3, [r7, #0]
 800a124:	88db      	ldrh	r3, [r3, #6]
 800a126:	2b00      	cmp	r3, #0
 800a128:	d12d      	bne.n	800a186 <USBD_SetAddress+0x76>
 800a12a:	683b      	ldr	r3, [r7, #0]
 800a12c:	885b      	ldrh	r3, [r3, #2]
 800a12e:	2b7f      	cmp	r3, #127	@ 0x7f
 800a130:	d829      	bhi.n	800a186 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a132:	683b      	ldr	r3, [r7, #0]
 800a134:	885b      	ldrh	r3, [r3, #2]
 800a136:	b2db      	uxtb	r3, r3
 800a138:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a13c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a144:	b2db      	uxtb	r3, r3
 800a146:	2b03      	cmp	r3, #3
 800a148:	d104      	bne.n	800a154 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800a14a:	6839      	ldr	r1, [r7, #0]
 800a14c:	6878      	ldr	r0, [r7, #4]
 800a14e:	f000 f9bc 	bl	800a4ca <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a152:	e01d      	b.n	800a190 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	7bfa      	ldrb	r2, [r7, #15]
 800a158:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a15c:	7bfb      	ldrb	r3, [r7, #15]
 800a15e:	4619      	mov	r1, r3
 800a160:	6878      	ldr	r0, [r7, #4]
 800a162:	f000 ff17 	bl	800af94 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800a166:	6878      	ldr	r0, [r7, #4]
 800a168:	f000 fa86 	bl	800a678 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a16c:	7bfb      	ldrb	r3, [r7, #15]
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d004      	beq.n	800a17c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	2202      	movs	r2, #2
 800a176:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a17a:	e009      	b.n	800a190 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	2201      	movs	r2, #1
 800a180:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a184:	e004      	b.n	800a190 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a186:	6839      	ldr	r1, [r7, #0]
 800a188:	6878      	ldr	r0, [r7, #4]
 800a18a:	f000 f99e 	bl	800a4ca <USBD_CtlError>
  }
}
 800a18e:	bf00      	nop
 800a190:	bf00      	nop
 800a192:	3710      	adds	r7, #16
 800a194:	46bd      	mov	sp, r7
 800a196:	bd80      	pop	{r7, pc}

0800a198 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a198:	b580      	push	{r7, lr}
 800a19a:	b084      	sub	sp, #16
 800a19c:	af00      	add	r7, sp, #0
 800a19e:	6078      	str	r0, [r7, #4]
 800a1a0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a1a2:	2300      	movs	r3, #0
 800a1a4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a1a6:	683b      	ldr	r3, [r7, #0]
 800a1a8:	885b      	ldrh	r3, [r3, #2]
 800a1aa:	b2da      	uxtb	r2, r3
 800a1ac:	4b4e      	ldr	r3, [pc, #312]	@ (800a2e8 <USBD_SetConfig+0x150>)
 800a1ae:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a1b0:	4b4d      	ldr	r3, [pc, #308]	@ (800a2e8 <USBD_SetConfig+0x150>)
 800a1b2:	781b      	ldrb	r3, [r3, #0]
 800a1b4:	2b01      	cmp	r3, #1
 800a1b6:	d905      	bls.n	800a1c4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800a1b8:	6839      	ldr	r1, [r7, #0]
 800a1ba:	6878      	ldr	r0, [r7, #4]
 800a1bc:	f000 f985 	bl	800a4ca <USBD_CtlError>
    return USBD_FAIL;
 800a1c0:	2303      	movs	r3, #3
 800a1c2:	e08c      	b.n	800a2de <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a1ca:	b2db      	uxtb	r3, r3
 800a1cc:	2b02      	cmp	r3, #2
 800a1ce:	d002      	beq.n	800a1d6 <USBD_SetConfig+0x3e>
 800a1d0:	2b03      	cmp	r3, #3
 800a1d2:	d029      	beq.n	800a228 <USBD_SetConfig+0x90>
 800a1d4:	e075      	b.n	800a2c2 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800a1d6:	4b44      	ldr	r3, [pc, #272]	@ (800a2e8 <USBD_SetConfig+0x150>)
 800a1d8:	781b      	ldrb	r3, [r3, #0]
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d020      	beq.n	800a220 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800a1de:	4b42      	ldr	r3, [pc, #264]	@ (800a2e8 <USBD_SetConfig+0x150>)
 800a1e0:	781b      	ldrb	r3, [r3, #0]
 800a1e2:	461a      	mov	r2, r3
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a1e8:	4b3f      	ldr	r3, [pc, #252]	@ (800a2e8 <USBD_SetConfig+0x150>)
 800a1ea:	781b      	ldrb	r3, [r3, #0]
 800a1ec:	4619      	mov	r1, r3
 800a1ee:	6878      	ldr	r0, [r7, #4]
 800a1f0:	f7fe ffe3 	bl	80091ba <USBD_SetClassConfig>
 800a1f4:	4603      	mov	r3, r0
 800a1f6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800a1f8:	7bfb      	ldrb	r3, [r7, #15]
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d008      	beq.n	800a210 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800a1fe:	6839      	ldr	r1, [r7, #0]
 800a200:	6878      	ldr	r0, [r7, #4]
 800a202:	f000 f962 	bl	800a4ca <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	2202      	movs	r2, #2
 800a20a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a20e:	e065      	b.n	800a2dc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a210:	6878      	ldr	r0, [r7, #4]
 800a212:	f000 fa31 	bl	800a678 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	2203      	movs	r2, #3
 800a21a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800a21e:	e05d      	b.n	800a2dc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a220:	6878      	ldr	r0, [r7, #4]
 800a222:	f000 fa29 	bl	800a678 <USBD_CtlSendStatus>
      break;
 800a226:	e059      	b.n	800a2dc <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800a228:	4b2f      	ldr	r3, [pc, #188]	@ (800a2e8 <USBD_SetConfig+0x150>)
 800a22a:	781b      	ldrb	r3, [r3, #0]
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d112      	bne.n	800a256 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	2202      	movs	r2, #2
 800a234:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800a238:	4b2b      	ldr	r3, [pc, #172]	@ (800a2e8 <USBD_SetConfig+0x150>)
 800a23a:	781b      	ldrb	r3, [r3, #0]
 800a23c:	461a      	mov	r2, r3
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a242:	4b29      	ldr	r3, [pc, #164]	@ (800a2e8 <USBD_SetConfig+0x150>)
 800a244:	781b      	ldrb	r3, [r3, #0]
 800a246:	4619      	mov	r1, r3
 800a248:	6878      	ldr	r0, [r7, #4]
 800a24a:	f7fe ffd2 	bl	80091f2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800a24e:	6878      	ldr	r0, [r7, #4]
 800a250:	f000 fa12 	bl	800a678 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a254:	e042      	b.n	800a2dc <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800a256:	4b24      	ldr	r3, [pc, #144]	@ (800a2e8 <USBD_SetConfig+0x150>)
 800a258:	781b      	ldrb	r3, [r3, #0]
 800a25a:	461a      	mov	r2, r3
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	685b      	ldr	r3, [r3, #4]
 800a260:	429a      	cmp	r2, r3
 800a262:	d02a      	beq.n	800a2ba <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	685b      	ldr	r3, [r3, #4]
 800a268:	b2db      	uxtb	r3, r3
 800a26a:	4619      	mov	r1, r3
 800a26c:	6878      	ldr	r0, [r7, #4]
 800a26e:	f7fe ffc0 	bl	80091f2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800a272:	4b1d      	ldr	r3, [pc, #116]	@ (800a2e8 <USBD_SetConfig+0x150>)
 800a274:	781b      	ldrb	r3, [r3, #0]
 800a276:	461a      	mov	r2, r3
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a27c:	4b1a      	ldr	r3, [pc, #104]	@ (800a2e8 <USBD_SetConfig+0x150>)
 800a27e:	781b      	ldrb	r3, [r3, #0]
 800a280:	4619      	mov	r1, r3
 800a282:	6878      	ldr	r0, [r7, #4]
 800a284:	f7fe ff99 	bl	80091ba <USBD_SetClassConfig>
 800a288:	4603      	mov	r3, r0
 800a28a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800a28c:	7bfb      	ldrb	r3, [r7, #15]
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d00f      	beq.n	800a2b2 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800a292:	6839      	ldr	r1, [r7, #0]
 800a294:	6878      	ldr	r0, [r7, #4]
 800a296:	f000 f918 	bl	800a4ca <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	685b      	ldr	r3, [r3, #4]
 800a29e:	b2db      	uxtb	r3, r3
 800a2a0:	4619      	mov	r1, r3
 800a2a2:	6878      	ldr	r0, [r7, #4]
 800a2a4:	f7fe ffa5 	bl	80091f2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	2202      	movs	r2, #2
 800a2ac:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800a2b0:	e014      	b.n	800a2dc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a2b2:	6878      	ldr	r0, [r7, #4]
 800a2b4:	f000 f9e0 	bl	800a678 <USBD_CtlSendStatus>
      break;
 800a2b8:	e010      	b.n	800a2dc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a2ba:	6878      	ldr	r0, [r7, #4]
 800a2bc:	f000 f9dc 	bl	800a678 <USBD_CtlSendStatus>
      break;
 800a2c0:	e00c      	b.n	800a2dc <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800a2c2:	6839      	ldr	r1, [r7, #0]
 800a2c4:	6878      	ldr	r0, [r7, #4]
 800a2c6:	f000 f900 	bl	800a4ca <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a2ca:	4b07      	ldr	r3, [pc, #28]	@ (800a2e8 <USBD_SetConfig+0x150>)
 800a2cc:	781b      	ldrb	r3, [r3, #0]
 800a2ce:	4619      	mov	r1, r3
 800a2d0:	6878      	ldr	r0, [r7, #4]
 800a2d2:	f7fe ff8e 	bl	80091f2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800a2d6:	2303      	movs	r3, #3
 800a2d8:	73fb      	strb	r3, [r7, #15]
      break;
 800a2da:	bf00      	nop
  }

  return ret;
 800a2dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2de:	4618      	mov	r0, r3
 800a2e0:	3710      	adds	r7, #16
 800a2e2:	46bd      	mov	sp, r7
 800a2e4:	bd80      	pop	{r7, pc}
 800a2e6:	bf00      	nop
 800a2e8:	200004ea 	.word	0x200004ea

0800a2ec <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a2ec:	b580      	push	{r7, lr}
 800a2ee:	b082      	sub	sp, #8
 800a2f0:	af00      	add	r7, sp, #0
 800a2f2:	6078      	str	r0, [r7, #4]
 800a2f4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a2f6:	683b      	ldr	r3, [r7, #0]
 800a2f8:	88db      	ldrh	r3, [r3, #6]
 800a2fa:	2b01      	cmp	r3, #1
 800a2fc:	d004      	beq.n	800a308 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a2fe:	6839      	ldr	r1, [r7, #0]
 800a300:	6878      	ldr	r0, [r7, #4]
 800a302:	f000 f8e2 	bl	800a4ca <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a306:	e023      	b.n	800a350 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a30e:	b2db      	uxtb	r3, r3
 800a310:	2b02      	cmp	r3, #2
 800a312:	dc02      	bgt.n	800a31a <USBD_GetConfig+0x2e>
 800a314:	2b00      	cmp	r3, #0
 800a316:	dc03      	bgt.n	800a320 <USBD_GetConfig+0x34>
 800a318:	e015      	b.n	800a346 <USBD_GetConfig+0x5a>
 800a31a:	2b03      	cmp	r3, #3
 800a31c:	d00b      	beq.n	800a336 <USBD_GetConfig+0x4a>
 800a31e:	e012      	b.n	800a346 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	2200      	movs	r2, #0
 800a324:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	3308      	adds	r3, #8
 800a32a:	2201      	movs	r2, #1
 800a32c:	4619      	mov	r1, r3
 800a32e:	6878      	ldr	r0, [r7, #4]
 800a330:	f000 f948 	bl	800a5c4 <USBD_CtlSendData>
        break;
 800a334:	e00c      	b.n	800a350 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	3304      	adds	r3, #4
 800a33a:	2201      	movs	r2, #1
 800a33c:	4619      	mov	r1, r3
 800a33e:	6878      	ldr	r0, [r7, #4]
 800a340:	f000 f940 	bl	800a5c4 <USBD_CtlSendData>
        break;
 800a344:	e004      	b.n	800a350 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800a346:	6839      	ldr	r1, [r7, #0]
 800a348:	6878      	ldr	r0, [r7, #4]
 800a34a:	f000 f8be 	bl	800a4ca <USBD_CtlError>
        break;
 800a34e:	bf00      	nop
}
 800a350:	bf00      	nop
 800a352:	3708      	adds	r7, #8
 800a354:	46bd      	mov	sp, r7
 800a356:	bd80      	pop	{r7, pc}

0800a358 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a358:	b580      	push	{r7, lr}
 800a35a:	b082      	sub	sp, #8
 800a35c:	af00      	add	r7, sp, #0
 800a35e:	6078      	str	r0, [r7, #4]
 800a360:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a368:	b2db      	uxtb	r3, r3
 800a36a:	3b01      	subs	r3, #1
 800a36c:	2b02      	cmp	r3, #2
 800a36e:	d81e      	bhi.n	800a3ae <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a370:	683b      	ldr	r3, [r7, #0]
 800a372:	88db      	ldrh	r3, [r3, #6]
 800a374:	2b02      	cmp	r3, #2
 800a376:	d004      	beq.n	800a382 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800a378:	6839      	ldr	r1, [r7, #0]
 800a37a:	6878      	ldr	r0, [r7, #4]
 800a37c:	f000 f8a5 	bl	800a4ca <USBD_CtlError>
        break;
 800a380:	e01a      	b.n	800a3b8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	2201      	movs	r2, #1
 800a386:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d005      	beq.n	800a39e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	68db      	ldr	r3, [r3, #12]
 800a396:	f043 0202 	orr.w	r2, r3, #2
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	330c      	adds	r3, #12
 800a3a2:	2202      	movs	r2, #2
 800a3a4:	4619      	mov	r1, r3
 800a3a6:	6878      	ldr	r0, [r7, #4]
 800a3a8:	f000 f90c 	bl	800a5c4 <USBD_CtlSendData>
      break;
 800a3ac:	e004      	b.n	800a3b8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800a3ae:	6839      	ldr	r1, [r7, #0]
 800a3b0:	6878      	ldr	r0, [r7, #4]
 800a3b2:	f000 f88a 	bl	800a4ca <USBD_CtlError>
      break;
 800a3b6:	bf00      	nop
  }
}
 800a3b8:	bf00      	nop
 800a3ba:	3708      	adds	r7, #8
 800a3bc:	46bd      	mov	sp, r7
 800a3be:	bd80      	pop	{r7, pc}

0800a3c0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a3c0:	b580      	push	{r7, lr}
 800a3c2:	b082      	sub	sp, #8
 800a3c4:	af00      	add	r7, sp, #0
 800a3c6:	6078      	str	r0, [r7, #4]
 800a3c8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a3ca:	683b      	ldr	r3, [r7, #0]
 800a3cc:	885b      	ldrh	r3, [r3, #2]
 800a3ce:	2b01      	cmp	r3, #1
 800a3d0:	d107      	bne.n	800a3e2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	2201      	movs	r2, #1
 800a3d6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800a3da:	6878      	ldr	r0, [r7, #4]
 800a3dc:	f000 f94c 	bl	800a678 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800a3e0:	e013      	b.n	800a40a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800a3e2:	683b      	ldr	r3, [r7, #0]
 800a3e4:	885b      	ldrh	r3, [r3, #2]
 800a3e6:	2b02      	cmp	r3, #2
 800a3e8:	d10b      	bne.n	800a402 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800a3ea:	683b      	ldr	r3, [r7, #0]
 800a3ec:	889b      	ldrh	r3, [r3, #4]
 800a3ee:	0a1b      	lsrs	r3, r3, #8
 800a3f0:	b29b      	uxth	r3, r3
 800a3f2:	b2da      	uxtb	r2, r3
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800a3fa:	6878      	ldr	r0, [r7, #4]
 800a3fc:	f000 f93c 	bl	800a678 <USBD_CtlSendStatus>
}
 800a400:	e003      	b.n	800a40a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800a402:	6839      	ldr	r1, [r7, #0]
 800a404:	6878      	ldr	r0, [r7, #4]
 800a406:	f000 f860 	bl	800a4ca <USBD_CtlError>
}
 800a40a:	bf00      	nop
 800a40c:	3708      	adds	r7, #8
 800a40e:	46bd      	mov	sp, r7
 800a410:	bd80      	pop	{r7, pc}

0800a412 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a412:	b580      	push	{r7, lr}
 800a414:	b082      	sub	sp, #8
 800a416:	af00      	add	r7, sp, #0
 800a418:	6078      	str	r0, [r7, #4]
 800a41a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a422:	b2db      	uxtb	r3, r3
 800a424:	3b01      	subs	r3, #1
 800a426:	2b02      	cmp	r3, #2
 800a428:	d80b      	bhi.n	800a442 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a42a:	683b      	ldr	r3, [r7, #0]
 800a42c:	885b      	ldrh	r3, [r3, #2]
 800a42e:	2b01      	cmp	r3, #1
 800a430:	d10c      	bne.n	800a44c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	2200      	movs	r2, #0
 800a436:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800a43a:	6878      	ldr	r0, [r7, #4]
 800a43c:	f000 f91c 	bl	800a678 <USBD_CtlSendStatus>
      }
      break;
 800a440:	e004      	b.n	800a44c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800a442:	6839      	ldr	r1, [r7, #0]
 800a444:	6878      	ldr	r0, [r7, #4]
 800a446:	f000 f840 	bl	800a4ca <USBD_CtlError>
      break;
 800a44a:	e000      	b.n	800a44e <USBD_ClrFeature+0x3c>
      break;
 800a44c:	bf00      	nop
  }
}
 800a44e:	bf00      	nop
 800a450:	3708      	adds	r7, #8
 800a452:	46bd      	mov	sp, r7
 800a454:	bd80      	pop	{r7, pc}

0800a456 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a456:	b580      	push	{r7, lr}
 800a458:	b084      	sub	sp, #16
 800a45a:	af00      	add	r7, sp, #0
 800a45c:	6078      	str	r0, [r7, #4]
 800a45e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800a460:	683b      	ldr	r3, [r7, #0]
 800a462:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	781a      	ldrb	r2, [r3, #0]
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	3301      	adds	r3, #1
 800a470:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	781a      	ldrb	r2, [r3, #0]
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	3301      	adds	r3, #1
 800a47e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800a480:	68f8      	ldr	r0, [r7, #12]
 800a482:	f7ff fa40 	bl	8009906 <SWAPBYTE>
 800a486:	4603      	mov	r3, r0
 800a488:	461a      	mov	r2, r3
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	3301      	adds	r3, #1
 800a492:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	3301      	adds	r3, #1
 800a498:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800a49a:	68f8      	ldr	r0, [r7, #12]
 800a49c:	f7ff fa33 	bl	8009906 <SWAPBYTE>
 800a4a0:	4603      	mov	r3, r0
 800a4a2:	461a      	mov	r2, r3
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	3301      	adds	r3, #1
 800a4ac:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	3301      	adds	r3, #1
 800a4b2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800a4b4:	68f8      	ldr	r0, [r7, #12]
 800a4b6:	f7ff fa26 	bl	8009906 <SWAPBYTE>
 800a4ba:	4603      	mov	r3, r0
 800a4bc:	461a      	mov	r2, r3
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	80da      	strh	r2, [r3, #6]
}
 800a4c2:	bf00      	nop
 800a4c4:	3710      	adds	r7, #16
 800a4c6:	46bd      	mov	sp, r7
 800a4c8:	bd80      	pop	{r7, pc}

0800a4ca <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a4ca:	b580      	push	{r7, lr}
 800a4cc:	b082      	sub	sp, #8
 800a4ce:	af00      	add	r7, sp, #0
 800a4d0:	6078      	str	r0, [r7, #4]
 800a4d2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a4d4:	2180      	movs	r1, #128	@ 0x80
 800a4d6:	6878      	ldr	r0, [r7, #4]
 800a4d8:	f000 fcf2 	bl	800aec0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a4dc:	2100      	movs	r1, #0
 800a4de:	6878      	ldr	r0, [r7, #4]
 800a4e0:	f000 fcee 	bl	800aec0 <USBD_LL_StallEP>
}
 800a4e4:	bf00      	nop
 800a4e6:	3708      	adds	r7, #8
 800a4e8:	46bd      	mov	sp, r7
 800a4ea:	bd80      	pop	{r7, pc}

0800a4ec <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a4ec:	b580      	push	{r7, lr}
 800a4ee:	b086      	sub	sp, #24
 800a4f0:	af00      	add	r7, sp, #0
 800a4f2:	60f8      	str	r0, [r7, #12]
 800a4f4:	60b9      	str	r1, [r7, #8]
 800a4f6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a4f8:	2300      	movs	r3, #0
 800a4fa:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d042      	beq.n	800a588 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800a506:	6938      	ldr	r0, [r7, #16]
 800a508:	f000 f842 	bl	800a590 <USBD_GetLen>
 800a50c:	4603      	mov	r3, r0
 800a50e:	3301      	adds	r3, #1
 800a510:	005b      	lsls	r3, r3, #1
 800a512:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a516:	d808      	bhi.n	800a52a <USBD_GetString+0x3e>
 800a518:	6938      	ldr	r0, [r7, #16]
 800a51a:	f000 f839 	bl	800a590 <USBD_GetLen>
 800a51e:	4603      	mov	r3, r0
 800a520:	3301      	adds	r3, #1
 800a522:	b29b      	uxth	r3, r3
 800a524:	005b      	lsls	r3, r3, #1
 800a526:	b29a      	uxth	r2, r3
 800a528:	e001      	b.n	800a52e <USBD_GetString+0x42>
 800a52a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800a532:	7dfb      	ldrb	r3, [r7, #23]
 800a534:	68ba      	ldr	r2, [r7, #8]
 800a536:	4413      	add	r3, r2
 800a538:	687a      	ldr	r2, [r7, #4]
 800a53a:	7812      	ldrb	r2, [r2, #0]
 800a53c:	701a      	strb	r2, [r3, #0]
  idx++;
 800a53e:	7dfb      	ldrb	r3, [r7, #23]
 800a540:	3301      	adds	r3, #1
 800a542:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a544:	7dfb      	ldrb	r3, [r7, #23]
 800a546:	68ba      	ldr	r2, [r7, #8]
 800a548:	4413      	add	r3, r2
 800a54a:	2203      	movs	r2, #3
 800a54c:	701a      	strb	r2, [r3, #0]
  idx++;
 800a54e:	7dfb      	ldrb	r3, [r7, #23]
 800a550:	3301      	adds	r3, #1
 800a552:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a554:	e013      	b.n	800a57e <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800a556:	7dfb      	ldrb	r3, [r7, #23]
 800a558:	68ba      	ldr	r2, [r7, #8]
 800a55a:	4413      	add	r3, r2
 800a55c:	693a      	ldr	r2, [r7, #16]
 800a55e:	7812      	ldrb	r2, [r2, #0]
 800a560:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a562:	693b      	ldr	r3, [r7, #16]
 800a564:	3301      	adds	r3, #1
 800a566:	613b      	str	r3, [r7, #16]
    idx++;
 800a568:	7dfb      	ldrb	r3, [r7, #23]
 800a56a:	3301      	adds	r3, #1
 800a56c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a56e:	7dfb      	ldrb	r3, [r7, #23]
 800a570:	68ba      	ldr	r2, [r7, #8]
 800a572:	4413      	add	r3, r2
 800a574:	2200      	movs	r2, #0
 800a576:	701a      	strb	r2, [r3, #0]
    idx++;
 800a578:	7dfb      	ldrb	r3, [r7, #23]
 800a57a:	3301      	adds	r3, #1
 800a57c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a57e:	693b      	ldr	r3, [r7, #16]
 800a580:	781b      	ldrb	r3, [r3, #0]
 800a582:	2b00      	cmp	r3, #0
 800a584:	d1e7      	bne.n	800a556 <USBD_GetString+0x6a>
 800a586:	e000      	b.n	800a58a <USBD_GetString+0x9e>
    return;
 800a588:	bf00      	nop
  }
}
 800a58a:	3718      	adds	r7, #24
 800a58c:	46bd      	mov	sp, r7
 800a58e:	bd80      	pop	{r7, pc}

0800a590 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a590:	b480      	push	{r7}
 800a592:	b085      	sub	sp, #20
 800a594:	af00      	add	r7, sp, #0
 800a596:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a598:	2300      	movs	r3, #0
 800a59a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a5a0:	e005      	b.n	800a5ae <USBD_GetLen+0x1e>
  {
    len++;
 800a5a2:	7bfb      	ldrb	r3, [r7, #15]
 800a5a4:	3301      	adds	r3, #1
 800a5a6:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a5a8:	68bb      	ldr	r3, [r7, #8]
 800a5aa:	3301      	adds	r3, #1
 800a5ac:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a5ae:	68bb      	ldr	r3, [r7, #8]
 800a5b0:	781b      	ldrb	r3, [r3, #0]
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d1f5      	bne.n	800a5a2 <USBD_GetLen+0x12>
  }

  return len;
 800a5b6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5b8:	4618      	mov	r0, r3
 800a5ba:	3714      	adds	r7, #20
 800a5bc:	46bd      	mov	sp, r7
 800a5be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5c2:	4770      	bx	lr

0800a5c4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a5c4:	b580      	push	{r7, lr}
 800a5c6:	b084      	sub	sp, #16
 800a5c8:	af00      	add	r7, sp, #0
 800a5ca:	60f8      	str	r0, [r7, #12]
 800a5cc:	60b9      	str	r1, [r7, #8]
 800a5ce:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	2202      	movs	r2, #2
 800a5d4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	687a      	ldr	r2, [r7, #4]
 800a5dc:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	687a      	ldr	r2, [r7, #4]
 800a5e2:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	68ba      	ldr	r2, [r7, #8]
 800a5e8:	2100      	movs	r1, #0
 800a5ea:	68f8      	ldr	r0, [r7, #12]
 800a5ec:	f000 fcf1 	bl	800afd2 <USBD_LL_Transmit>

  return USBD_OK;
 800a5f0:	2300      	movs	r3, #0
}
 800a5f2:	4618      	mov	r0, r3
 800a5f4:	3710      	adds	r7, #16
 800a5f6:	46bd      	mov	sp, r7
 800a5f8:	bd80      	pop	{r7, pc}

0800a5fa <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a5fa:	b580      	push	{r7, lr}
 800a5fc:	b084      	sub	sp, #16
 800a5fe:	af00      	add	r7, sp, #0
 800a600:	60f8      	str	r0, [r7, #12]
 800a602:	60b9      	str	r1, [r7, #8]
 800a604:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	68ba      	ldr	r2, [r7, #8]
 800a60a:	2100      	movs	r1, #0
 800a60c:	68f8      	ldr	r0, [r7, #12]
 800a60e:	f000 fce0 	bl	800afd2 <USBD_LL_Transmit>

  return USBD_OK;
 800a612:	2300      	movs	r3, #0
}
 800a614:	4618      	mov	r0, r3
 800a616:	3710      	adds	r7, #16
 800a618:	46bd      	mov	sp, r7
 800a61a:	bd80      	pop	{r7, pc}

0800a61c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800a61c:	b580      	push	{r7, lr}
 800a61e:	b084      	sub	sp, #16
 800a620:	af00      	add	r7, sp, #0
 800a622:	60f8      	str	r0, [r7, #12]
 800a624:	60b9      	str	r1, [r7, #8]
 800a626:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	2203      	movs	r2, #3
 800a62c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	687a      	ldr	r2, [r7, #4]
 800a634:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	687a      	ldr	r2, [r7, #4]
 800a63c:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	68ba      	ldr	r2, [r7, #8]
 800a644:	2100      	movs	r1, #0
 800a646:	68f8      	ldr	r0, [r7, #12]
 800a648:	f000 fce4 	bl	800b014 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a64c:	2300      	movs	r3, #0
}
 800a64e:	4618      	mov	r0, r3
 800a650:	3710      	adds	r7, #16
 800a652:	46bd      	mov	sp, r7
 800a654:	bd80      	pop	{r7, pc}

0800a656 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a656:	b580      	push	{r7, lr}
 800a658:	b084      	sub	sp, #16
 800a65a:	af00      	add	r7, sp, #0
 800a65c:	60f8      	str	r0, [r7, #12]
 800a65e:	60b9      	str	r1, [r7, #8]
 800a660:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	68ba      	ldr	r2, [r7, #8]
 800a666:	2100      	movs	r1, #0
 800a668:	68f8      	ldr	r0, [r7, #12]
 800a66a:	f000 fcd3 	bl	800b014 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a66e:	2300      	movs	r3, #0
}
 800a670:	4618      	mov	r0, r3
 800a672:	3710      	adds	r7, #16
 800a674:	46bd      	mov	sp, r7
 800a676:	bd80      	pop	{r7, pc}

0800a678 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a678:	b580      	push	{r7, lr}
 800a67a:	b082      	sub	sp, #8
 800a67c:	af00      	add	r7, sp, #0
 800a67e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	2204      	movs	r2, #4
 800a684:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a688:	2300      	movs	r3, #0
 800a68a:	2200      	movs	r2, #0
 800a68c:	2100      	movs	r1, #0
 800a68e:	6878      	ldr	r0, [r7, #4]
 800a690:	f000 fc9f 	bl	800afd2 <USBD_LL_Transmit>

  return USBD_OK;
 800a694:	2300      	movs	r3, #0
}
 800a696:	4618      	mov	r0, r3
 800a698:	3708      	adds	r7, #8
 800a69a:	46bd      	mov	sp, r7
 800a69c:	bd80      	pop	{r7, pc}

0800a69e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a69e:	b580      	push	{r7, lr}
 800a6a0:	b082      	sub	sp, #8
 800a6a2:	af00      	add	r7, sp, #0
 800a6a4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	2205      	movs	r2, #5
 800a6aa:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a6ae:	2300      	movs	r3, #0
 800a6b0:	2200      	movs	r2, #0
 800a6b2:	2100      	movs	r1, #0
 800a6b4:	6878      	ldr	r0, [r7, #4]
 800a6b6:	f000 fcad 	bl	800b014 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a6ba:	2300      	movs	r3, #0
}
 800a6bc:	4618      	mov	r0, r3
 800a6be:	3708      	adds	r7, #8
 800a6c0:	46bd      	mov	sp, r7
 800a6c2:	bd80      	pop	{r7, pc}

0800a6c4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a6c4:	b580      	push	{r7, lr}
 800a6c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a6c8:	2200      	movs	r2, #0
 800a6ca:	4912      	ldr	r1, [pc, #72]	@ (800a714 <MX_USB_DEVICE_Init+0x50>)
 800a6cc:	4812      	ldr	r0, [pc, #72]	@ (800a718 <MX_USB_DEVICE_Init+0x54>)
 800a6ce:	f7fe fcf7 	bl	80090c0 <USBD_Init>
 800a6d2:	4603      	mov	r3, r0
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d001      	beq.n	800a6dc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a6d8:	f7f7 ff3c 	bl	8002554 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a6dc:	490f      	ldr	r1, [pc, #60]	@ (800a71c <MX_USB_DEVICE_Init+0x58>)
 800a6de:	480e      	ldr	r0, [pc, #56]	@ (800a718 <MX_USB_DEVICE_Init+0x54>)
 800a6e0:	f7fe fd1e 	bl	8009120 <USBD_RegisterClass>
 800a6e4:	4603      	mov	r3, r0
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d001      	beq.n	800a6ee <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a6ea:	f7f7 ff33 	bl	8002554 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a6ee:	490c      	ldr	r1, [pc, #48]	@ (800a720 <MX_USB_DEVICE_Init+0x5c>)
 800a6f0:	4809      	ldr	r0, [pc, #36]	@ (800a718 <MX_USB_DEVICE_Init+0x54>)
 800a6f2:	f7fe fc15 	bl	8008f20 <USBD_CDC_RegisterInterface>
 800a6f6:	4603      	mov	r3, r0
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d001      	beq.n	800a700 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a6fc:	f7f7 ff2a 	bl	8002554 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a700:	4805      	ldr	r0, [pc, #20]	@ (800a718 <MX_USB_DEVICE_Init+0x54>)
 800a702:	f7fe fd43 	bl	800918c <USBD_Start>
 800a706:	4603      	mov	r3, r0
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d001      	beq.n	800a710 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a70c:	f7f7 ff22 	bl	8002554 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a710:	bf00      	nop
 800a712:	bd80      	pop	{r7, pc}
 800a714:	200000ac 	.word	0x200000ac
 800a718:	200004ec 	.word	0x200004ec
 800a71c:	20000018 	.word	0x20000018
 800a720:	20000098 	.word	0x20000098

0800a724 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a724:	b580      	push	{r7, lr}
 800a726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a728:	2200      	movs	r2, #0
 800a72a:	4905      	ldr	r1, [pc, #20]	@ (800a740 <CDC_Init_FS+0x1c>)
 800a72c:	4805      	ldr	r0, [pc, #20]	@ (800a744 <CDC_Init_FS+0x20>)
 800a72e:	f7fe fc11 	bl	8008f54 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a732:	4905      	ldr	r1, [pc, #20]	@ (800a748 <CDC_Init_FS+0x24>)
 800a734:	4803      	ldr	r0, [pc, #12]	@ (800a744 <CDC_Init_FS+0x20>)
 800a736:	f7fe fc2f 	bl	8008f98 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a73a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a73c:	4618      	mov	r0, r3
 800a73e:	bd80      	pop	{r7, pc}
 800a740:	20000fc8 	.word	0x20000fc8
 800a744:	200004ec 	.word	0x200004ec
 800a748:	200007c8 	.word	0x200007c8

0800a74c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a74c:	b480      	push	{r7}
 800a74e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a750:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a752:	4618      	mov	r0, r3
 800a754:	46bd      	mov	sp, r7
 800a756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a75a:	4770      	bx	lr

0800a75c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a75c:	b480      	push	{r7}
 800a75e:	b083      	sub	sp, #12
 800a760:	af00      	add	r7, sp, #0
 800a762:	4603      	mov	r3, r0
 800a764:	6039      	str	r1, [r7, #0]
 800a766:	71fb      	strb	r3, [r7, #7]
 800a768:	4613      	mov	r3, r2
 800a76a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a76c:	79fb      	ldrb	r3, [r7, #7]
 800a76e:	2b23      	cmp	r3, #35	@ 0x23
 800a770:	d84a      	bhi.n	800a808 <CDC_Control_FS+0xac>
 800a772:	a201      	add	r2, pc, #4	@ (adr r2, 800a778 <CDC_Control_FS+0x1c>)
 800a774:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a778:	0800a809 	.word	0x0800a809
 800a77c:	0800a809 	.word	0x0800a809
 800a780:	0800a809 	.word	0x0800a809
 800a784:	0800a809 	.word	0x0800a809
 800a788:	0800a809 	.word	0x0800a809
 800a78c:	0800a809 	.word	0x0800a809
 800a790:	0800a809 	.word	0x0800a809
 800a794:	0800a809 	.word	0x0800a809
 800a798:	0800a809 	.word	0x0800a809
 800a79c:	0800a809 	.word	0x0800a809
 800a7a0:	0800a809 	.word	0x0800a809
 800a7a4:	0800a809 	.word	0x0800a809
 800a7a8:	0800a809 	.word	0x0800a809
 800a7ac:	0800a809 	.word	0x0800a809
 800a7b0:	0800a809 	.word	0x0800a809
 800a7b4:	0800a809 	.word	0x0800a809
 800a7b8:	0800a809 	.word	0x0800a809
 800a7bc:	0800a809 	.word	0x0800a809
 800a7c0:	0800a809 	.word	0x0800a809
 800a7c4:	0800a809 	.word	0x0800a809
 800a7c8:	0800a809 	.word	0x0800a809
 800a7cc:	0800a809 	.word	0x0800a809
 800a7d0:	0800a809 	.word	0x0800a809
 800a7d4:	0800a809 	.word	0x0800a809
 800a7d8:	0800a809 	.word	0x0800a809
 800a7dc:	0800a809 	.word	0x0800a809
 800a7e0:	0800a809 	.word	0x0800a809
 800a7e4:	0800a809 	.word	0x0800a809
 800a7e8:	0800a809 	.word	0x0800a809
 800a7ec:	0800a809 	.word	0x0800a809
 800a7f0:	0800a809 	.word	0x0800a809
 800a7f4:	0800a809 	.word	0x0800a809
 800a7f8:	0800a809 	.word	0x0800a809
 800a7fc:	0800a809 	.word	0x0800a809
 800a800:	0800a809 	.word	0x0800a809
 800a804:	0800a809 	.word	0x0800a809
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a808:	bf00      	nop
  }

  return (USBD_OK);
 800a80a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a80c:	4618      	mov	r0, r3
 800a80e:	370c      	adds	r7, #12
 800a810:	46bd      	mov	sp, r7
 800a812:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a816:	4770      	bx	lr

0800a818 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a818:	b580      	push	{r7, lr}
 800a81a:	b082      	sub	sp, #8
 800a81c:	af00      	add	r7, sp, #0
 800a81e:	6078      	str	r0, [r7, #4]
 800a820:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a822:	6879      	ldr	r1, [r7, #4]
 800a824:	4808      	ldr	r0, [pc, #32]	@ (800a848 <CDC_Receive_FS+0x30>)
 800a826:	f7fe fbb7 	bl	8008f98 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a82a:	4807      	ldr	r0, [pc, #28]	@ (800a848 <CDC_Receive_FS+0x30>)
 800a82c:	f7fe fc12 	bl	8009054 <USBD_CDC_ReceivePacket>
  CDC_recieveCALLBACK(Buf, Len[0]);
 800a830:	683b      	ldr	r3, [r7, #0]
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	4619      	mov	r1, r3
 800a836:	6878      	ldr	r0, [r7, #4]
 800a838:	f7f7 fbdc 	bl	8001ff4 <CDC_recieveCALLBACK>
  return (USBD_OK);
 800a83c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a83e:	4618      	mov	r0, r3
 800a840:	3708      	adds	r7, #8
 800a842:	46bd      	mov	sp, r7
 800a844:	bd80      	pop	{r7, pc}
 800a846:	bf00      	nop
 800a848:	200004ec 	.word	0x200004ec

0800a84c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800a84c:	b580      	push	{r7, lr}
 800a84e:	b084      	sub	sp, #16
 800a850:	af00      	add	r7, sp, #0
 800a852:	6078      	str	r0, [r7, #4]
 800a854:	460b      	mov	r3, r1
 800a856:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800a858:	2300      	movs	r3, #0
 800a85a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800a85c:	4b0d      	ldr	r3, [pc, #52]	@ (800a894 <CDC_Transmit_FS+0x48>)
 800a85e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a862:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800a864:	68bb      	ldr	r3, [r7, #8]
 800a866:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d001      	beq.n	800a872 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800a86e:	2301      	movs	r3, #1
 800a870:	e00b      	b.n	800a88a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800a872:	887b      	ldrh	r3, [r7, #2]
 800a874:	461a      	mov	r2, r3
 800a876:	6879      	ldr	r1, [r7, #4]
 800a878:	4806      	ldr	r0, [pc, #24]	@ (800a894 <CDC_Transmit_FS+0x48>)
 800a87a:	f7fe fb6b 	bl	8008f54 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800a87e:	4805      	ldr	r0, [pc, #20]	@ (800a894 <CDC_Transmit_FS+0x48>)
 800a880:	f7fe fba8 	bl	8008fd4 <USBD_CDC_TransmitPacket>
 800a884:	4603      	mov	r3, r0
 800a886:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800a888:	7bfb      	ldrb	r3, [r7, #15]
}
 800a88a:	4618      	mov	r0, r3
 800a88c:	3710      	adds	r7, #16
 800a88e:	46bd      	mov	sp, r7
 800a890:	bd80      	pop	{r7, pc}
 800a892:	bf00      	nop
 800a894:	200004ec 	.word	0x200004ec

0800a898 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800a898:	b480      	push	{r7}
 800a89a:	b087      	sub	sp, #28
 800a89c:	af00      	add	r7, sp, #0
 800a89e:	60f8      	str	r0, [r7, #12]
 800a8a0:	60b9      	str	r1, [r7, #8]
 800a8a2:	4613      	mov	r3, r2
 800a8a4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800a8a6:	2300      	movs	r3, #0
 800a8a8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800a8aa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a8ae:	4618      	mov	r0, r3
 800a8b0:	371c      	adds	r7, #28
 800a8b2:	46bd      	mov	sp, r7
 800a8b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b8:	4770      	bx	lr
	...

0800a8bc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a8bc:	b480      	push	{r7}
 800a8be:	b083      	sub	sp, #12
 800a8c0:	af00      	add	r7, sp, #0
 800a8c2:	4603      	mov	r3, r0
 800a8c4:	6039      	str	r1, [r7, #0]
 800a8c6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a8c8:	683b      	ldr	r3, [r7, #0]
 800a8ca:	2212      	movs	r2, #18
 800a8cc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a8ce:	4b03      	ldr	r3, [pc, #12]	@ (800a8dc <USBD_FS_DeviceDescriptor+0x20>)
}
 800a8d0:	4618      	mov	r0, r3
 800a8d2:	370c      	adds	r7, #12
 800a8d4:	46bd      	mov	sp, r7
 800a8d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8da:	4770      	bx	lr
 800a8dc:	200000c8 	.word	0x200000c8

0800a8e0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a8e0:	b480      	push	{r7}
 800a8e2:	b083      	sub	sp, #12
 800a8e4:	af00      	add	r7, sp, #0
 800a8e6:	4603      	mov	r3, r0
 800a8e8:	6039      	str	r1, [r7, #0]
 800a8ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a8ec:	683b      	ldr	r3, [r7, #0]
 800a8ee:	2204      	movs	r2, #4
 800a8f0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a8f2:	4b03      	ldr	r3, [pc, #12]	@ (800a900 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a8f4:	4618      	mov	r0, r3
 800a8f6:	370c      	adds	r7, #12
 800a8f8:	46bd      	mov	sp, r7
 800a8fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8fe:	4770      	bx	lr
 800a900:	200000dc 	.word	0x200000dc

0800a904 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a904:	b580      	push	{r7, lr}
 800a906:	b082      	sub	sp, #8
 800a908:	af00      	add	r7, sp, #0
 800a90a:	4603      	mov	r3, r0
 800a90c:	6039      	str	r1, [r7, #0]
 800a90e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a910:	79fb      	ldrb	r3, [r7, #7]
 800a912:	2b00      	cmp	r3, #0
 800a914:	d105      	bne.n	800a922 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a916:	683a      	ldr	r2, [r7, #0]
 800a918:	4907      	ldr	r1, [pc, #28]	@ (800a938 <USBD_FS_ProductStrDescriptor+0x34>)
 800a91a:	4808      	ldr	r0, [pc, #32]	@ (800a93c <USBD_FS_ProductStrDescriptor+0x38>)
 800a91c:	f7ff fde6 	bl	800a4ec <USBD_GetString>
 800a920:	e004      	b.n	800a92c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a922:	683a      	ldr	r2, [r7, #0]
 800a924:	4904      	ldr	r1, [pc, #16]	@ (800a938 <USBD_FS_ProductStrDescriptor+0x34>)
 800a926:	4805      	ldr	r0, [pc, #20]	@ (800a93c <USBD_FS_ProductStrDescriptor+0x38>)
 800a928:	f7ff fde0 	bl	800a4ec <USBD_GetString>
  }
  return USBD_StrDesc;
 800a92c:	4b02      	ldr	r3, [pc, #8]	@ (800a938 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a92e:	4618      	mov	r0, r3
 800a930:	3708      	adds	r7, #8
 800a932:	46bd      	mov	sp, r7
 800a934:	bd80      	pop	{r7, pc}
 800a936:	bf00      	nop
 800a938:	200017c8 	.word	0x200017c8
 800a93c:	0800d538 	.word	0x0800d538

0800a940 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a940:	b580      	push	{r7, lr}
 800a942:	b082      	sub	sp, #8
 800a944:	af00      	add	r7, sp, #0
 800a946:	4603      	mov	r3, r0
 800a948:	6039      	str	r1, [r7, #0]
 800a94a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a94c:	683a      	ldr	r2, [r7, #0]
 800a94e:	4904      	ldr	r1, [pc, #16]	@ (800a960 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a950:	4804      	ldr	r0, [pc, #16]	@ (800a964 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a952:	f7ff fdcb 	bl	800a4ec <USBD_GetString>
  return USBD_StrDesc;
 800a956:	4b02      	ldr	r3, [pc, #8]	@ (800a960 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a958:	4618      	mov	r0, r3
 800a95a:	3708      	adds	r7, #8
 800a95c:	46bd      	mov	sp, r7
 800a95e:	bd80      	pop	{r7, pc}
 800a960:	200017c8 	.word	0x200017c8
 800a964:	0800d550 	.word	0x0800d550

0800a968 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a968:	b580      	push	{r7, lr}
 800a96a:	b082      	sub	sp, #8
 800a96c:	af00      	add	r7, sp, #0
 800a96e:	4603      	mov	r3, r0
 800a970:	6039      	str	r1, [r7, #0]
 800a972:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a974:	683b      	ldr	r3, [r7, #0]
 800a976:	221a      	movs	r2, #26
 800a978:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a97a:	f000 f843 	bl	800aa04 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a97e:	4b02      	ldr	r3, [pc, #8]	@ (800a988 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a980:	4618      	mov	r0, r3
 800a982:	3708      	adds	r7, #8
 800a984:	46bd      	mov	sp, r7
 800a986:	bd80      	pop	{r7, pc}
 800a988:	200000e0 	.word	0x200000e0

0800a98c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a98c:	b580      	push	{r7, lr}
 800a98e:	b082      	sub	sp, #8
 800a990:	af00      	add	r7, sp, #0
 800a992:	4603      	mov	r3, r0
 800a994:	6039      	str	r1, [r7, #0]
 800a996:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a998:	79fb      	ldrb	r3, [r7, #7]
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d105      	bne.n	800a9aa <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a99e:	683a      	ldr	r2, [r7, #0]
 800a9a0:	4907      	ldr	r1, [pc, #28]	@ (800a9c0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a9a2:	4808      	ldr	r0, [pc, #32]	@ (800a9c4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a9a4:	f7ff fda2 	bl	800a4ec <USBD_GetString>
 800a9a8:	e004      	b.n	800a9b4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a9aa:	683a      	ldr	r2, [r7, #0]
 800a9ac:	4904      	ldr	r1, [pc, #16]	@ (800a9c0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a9ae:	4805      	ldr	r0, [pc, #20]	@ (800a9c4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a9b0:	f7ff fd9c 	bl	800a4ec <USBD_GetString>
  }
  return USBD_StrDesc;
 800a9b4:	4b02      	ldr	r3, [pc, #8]	@ (800a9c0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a9b6:	4618      	mov	r0, r3
 800a9b8:	3708      	adds	r7, #8
 800a9ba:	46bd      	mov	sp, r7
 800a9bc:	bd80      	pop	{r7, pc}
 800a9be:	bf00      	nop
 800a9c0:	200017c8 	.word	0x200017c8
 800a9c4:	0800d564 	.word	0x0800d564

0800a9c8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a9c8:	b580      	push	{r7, lr}
 800a9ca:	b082      	sub	sp, #8
 800a9cc:	af00      	add	r7, sp, #0
 800a9ce:	4603      	mov	r3, r0
 800a9d0:	6039      	str	r1, [r7, #0]
 800a9d2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a9d4:	79fb      	ldrb	r3, [r7, #7]
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d105      	bne.n	800a9e6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a9da:	683a      	ldr	r2, [r7, #0]
 800a9dc:	4907      	ldr	r1, [pc, #28]	@ (800a9fc <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a9de:	4808      	ldr	r0, [pc, #32]	@ (800aa00 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a9e0:	f7ff fd84 	bl	800a4ec <USBD_GetString>
 800a9e4:	e004      	b.n	800a9f0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a9e6:	683a      	ldr	r2, [r7, #0]
 800a9e8:	4904      	ldr	r1, [pc, #16]	@ (800a9fc <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a9ea:	4805      	ldr	r0, [pc, #20]	@ (800aa00 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a9ec:	f7ff fd7e 	bl	800a4ec <USBD_GetString>
  }
  return USBD_StrDesc;
 800a9f0:	4b02      	ldr	r3, [pc, #8]	@ (800a9fc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a9f2:	4618      	mov	r0, r3
 800a9f4:	3708      	adds	r7, #8
 800a9f6:	46bd      	mov	sp, r7
 800a9f8:	bd80      	pop	{r7, pc}
 800a9fa:	bf00      	nop
 800a9fc:	200017c8 	.word	0x200017c8
 800aa00:	0800d570 	.word	0x0800d570

0800aa04 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800aa04:	b580      	push	{r7, lr}
 800aa06:	b084      	sub	sp, #16
 800aa08:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800aa0a:	4b0f      	ldr	r3, [pc, #60]	@ (800aa48 <Get_SerialNum+0x44>)
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800aa10:	4b0e      	ldr	r3, [pc, #56]	@ (800aa4c <Get_SerialNum+0x48>)
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800aa16:	4b0e      	ldr	r3, [pc, #56]	@ (800aa50 <Get_SerialNum+0x4c>)
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800aa1c:	68fa      	ldr	r2, [r7, #12]
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	4413      	add	r3, r2
 800aa22:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d009      	beq.n	800aa3e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800aa2a:	2208      	movs	r2, #8
 800aa2c:	4909      	ldr	r1, [pc, #36]	@ (800aa54 <Get_SerialNum+0x50>)
 800aa2e:	68f8      	ldr	r0, [r7, #12]
 800aa30:	f000 f814 	bl	800aa5c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800aa34:	2204      	movs	r2, #4
 800aa36:	4908      	ldr	r1, [pc, #32]	@ (800aa58 <Get_SerialNum+0x54>)
 800aa38:	68b8      	ldr	r0, [r7, #8]
 800aa3a:	f000 f80f 	bl	800aa5c <IntToUnicode>
  }
}
 800aa3e:	bf00      	nop
 800aa40:	3710      	adds	r7, #16
 800aa42:	46bd      	mov	sp, r7
 800aa44:	bd80      	pop	{r7, pc}
 800aa46:	bf00      	nop
 800aa48:	1fff7a10 	.word	0x1fff7a10
 800aa4c:	1fff7a14 	.word	0x1fff7a14
 800aa50:	1fff7a18 	.word	0x1fff7a18
 800aa54:	200000e2 	.word	0x200000e2
 800aa58:	200000f2 	.word	0x200000f2

0800aa5c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800aa5c:	b480      	push	{r7}
 800aa5e:	b087      	sub	sp, #28
 800aa60:	af00      	add	r7, sp, #0
 800aa62:	60f8      	str	r0, [r7, #12]
 800aa64:	60b9      	str	r1, [r7, #8]
 800aa66:	4613      	mov	r3, r2
 800aa68:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800aa6a:	2300      	movs	r3, #0
 800aa6c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800aa6e:	2300      	movs	r3, #0
 800aa70:	75fb      	strb	r3, [r7, #23]
 800aa72:	e027      	b.n	800aac4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	0f1b      	lsrs	r3, r3, #28
 800aa78:	2b09      	cmp	r3, #9
 800aa7a:	d80b      	bhi.n	800aa94 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	0f1b      	lsrs	r3, r3, #28
 800aa80:	b2da      	uxtb	r2, r3
 800aa82:	7dfb      	ldrb	r3, [r7, #23]
 800aa84:	005b      	lsls	r3, r3, #1
 800aa86:	4619      	mov	r1, r3
 800aa88:	68bb      	ldr	r3, [r7, #8]
 800aa8a:	440b      	add	r3, r1
 800aa8c:	3230      	adds	r2, #48	@ 0x30
 800aa8e:	b2d2      	uxtb	r2, r2
 800aa90:	701a      	strb	r2, [r3, #0]
 800aa92:	e00a      	b.n	800aaaa <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	0f1b      	lsrs	r3, r3, #28
 800aa98:	b2da      	uxtb	r2, r3
 800aa9a:	7dfb      	ldrb	r3, [r7, #23]
 800aa9c:	005b      	lsls	r3, r3, #1
 800aa9e:	4619      	mov	r1, r3
 800aaa0:	68bb      	ldr	r3, [r7, #8]
 800aaa2:	440b      	add	r3, r1
 800aaa4:	3237      	adds	r2, #55	@ 0x37
 800aaa6:	b2d2      	uxtb	r2, r2
 800aaa8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	011b      	lsls	r3, r3, #4
 800aaae:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800aab0:	7dfb      	ldrb	r3, [r7, #23]
 800aab2:	005b      	lsls	r3, r3, #1
 800aab4:	3301      	adds	r3, #1
 800aab6:	68ba      	ldr	r2, [r7, #8]
 800aab8:	4413      	add	r3, r2
 800aaba:	2200      	movs	r2, #0
 800aabc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800aabe:	7dfb      	ldrb	r3, [r7, #23]
 800aac0:	3301      	adds	r3, #1
 800aac2:	75fb      	strb	r3, [r7, #23]
 800aac4:	7dfa      	ldrb	r2, [r7, #23]
 800aac6:	79fb      	ldrb	r3, [r7, #7]
 800aac8:	429a      	cmp	r2, r3
 800aaca:	d3d3      	bcc.n	800aa74 <IntToUnicode+0x18>
  }
}
 800aacc:	bf00      	nop
 800aace:	bf00      	nop
 800aad0:	371c      	adds	r7, #28
 800aad2:	46bd      	mov	sp, r7
 800aad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aad8:	4770      	bx	lr
	...

0800aadc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800aadc:	b580      	push	{r7, lr}
 800aade:	b08a      	sub	sp, #40	@ 0x28
 800aae0:	af00      	add	r7, sp, #0
 800aae2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800aae4:	f107 0314 	add.w	r3, r7, #20
 800aae8:	2200      	movs	r2, #0
 800aaea:	601a      	str	r2, [r3, #0]
 800aaec:	605a      	str	r2, [r3, #4]
 800aaee:	609a      	str	r2, [r3, #8]
 800aaf0:	60da      	str	r2, [r3, #12]
 800aaf2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800aafc:	d13a      	bne.n	800ab74 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800aafe:	2300      	movs	r3, #0
 800ab00:	613b      	str	r3, [r7, #16]
 800ab02:	4b1e      	ldr	r3, [pc, #120]	@ (800ab7c <HAL_PCD_MspInit+0xa0>)
 800ab04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ab06:	4a1d      	ldr	r2, [pc, #116]	@ (800ab7c <HAL_PCD_MspInit+0xa0>)
 800ab08:	f043 0301 	orr.w	r3, r3, #1
 800ab0c:	6313      	str	r3, [r2, #48]	@ 0x30
 800ab0e:	4b1b      	ldr	r3, [pc, #108]	@ (800ab7c <HAL_PCD_MspInit+0xa0>)
 800ab10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ab12:	f003 0301 	and.w	r3, r3, #1
 800ab16:	613b      	str	r3, [r7, #16]
 800ab18:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800ab1a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800ab1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ab20:	2302      	movs	r3, #2
 800ab22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ab24:	2300      	movs	r3, #0
 800ab26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ab28:	2303      	movs	r3, #3
 800ab2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800ab2c:	230a      	movs	r3, #10
 800ab2e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ab30:	f107 0314 	add.w	r3, r7, #20
 800ab34:	4619      	mov	r1, r3
 800ab36:	4812      	ldr	r0, [pc, #72]	@ (800ab80 <HAL_PCD_MspInit+0xa4>)
 800ab38:	f7f8 fac6 	bl	80030c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800ab3c:	4b0f      	ldr	r3, [pc, #60]	@ (800ab7c <HAL_PCD_MspInit+0xa0>)
 800ab3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ab40:	4a0e      	ldr	r2, [pc, #56]	@ (800ab7c <HAL_PCD_MspInit+0xa0>)
 800ab42:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ab46:	6353      	str	r3, [r2, #52]	@ 0x34
 800ab48:	2300      	movs	r3, #0
 800ab4a:	60fb      	str	r3, [r7, #12]
 800ab4c:	4b0b      	ldr	r3, [pc, #44]	@ (800ab7c <HAL_PCD_MspInit+0xa0>)
 800ab4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ab50:	4a0a      	ldr	r2, [pc, #40]	@ (800ab7c <HAL_PCD_MspInit+0xa0>)
 800ab52:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800ab56:	6453      	str	r3, [r2, #68]	@ 0x44
 800ab58:	4b08      	ldr	r3, [pc, #32]	@ (800ab7c <HAL_PCD_MspInit+0xa0>)
 800ab5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ab5c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ab60:	60fb      	str	r3, [r7, #12]
 800ab62:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800ab64:	2200      	movs	r2, #0
 800ab66:	2100      	movs	r1, #0
 800ab68:	2043      	movs	r0, #67	@ 0x43
 800ab6a:	f7f8 f85c 	bl	8002c26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800ab6e:	2043      	movs	r0, #67	@ 0x43
 800ab70:	f7f8 f875 	bl	8002c5e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800ab74:	bf00      	nop
 800ab76:	3728      	adds	r7, #40	@ 0x28
 800ab78:	46bd      	mov	sp, r7
 800ab7a:	bd80      	pop	{r7, pc}
 800ab7c:	40023800 	.word	0x40023800
 800ab80:	40020000 	.word	0x40020000

0800ab84 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ab84:	b580      	push	{r7, lr}
 800ab86:	b082      	sub	sp, #8
 800ab88:	af00      	add	r7, sp, #0
 800ab8a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800ab98:	4619      	mov	r1, r3
 800ab9a:	4610      	mov	r0, r2
 800ab9c:	f7fe fb43 	bl	8009226 <USBD_LL_SetupStage>
}
 800aba0:	bf00      	nop
 800aba2:	3708      	adds	r7, #8
 800aba4:	46bd      	mov	sp, r7
 800aba6:	bd80      	pop	{r7, pc}

0800aba8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aba8:	b580      	push	{r7, lr}
 800abaa:	b082      	sub	sp, #8
 800abac:	af00      	add	r7, sp, #0
 800abae:	6078      	str	r0, [r7, #4]
 800abb0:	460b      	mov	r3, r1
 800abb2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800abba:	78fa      	ldrb	r2, [r7, #3]
 800abbc:	6879      	ldr	r1, [r7, #4]
 800abbe:	4613      	mov	r3, r2
 800abc0:	00db      	lsls	r3, r3, #3
 800abc2:	4413      	add	r3, r2
 800abc4:	009b      	lsls	r3, r3, #2
 800abc6:	440b      	add	r3, r1
 800abc8:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800abcc:	681a      	ldr	r2, [r3, #0]
 800abce:	78fb      	ldrb	r3, [r7, #3]
 800abd0:	4619      	mov	r1, r3
 800abd2:	f7fe fb7d 	bl	80092d0 <USBD_LL_DataOutStage>
}
 800abd6:	bf00      	nop
 800abd8:	3708      	adds	r7, #8
 800abda:	46bd      	mov	sp, r7
 800abdc:	bd80      	pop	{r7, pc}

0800abde <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800abde:	b580      	push	{r7, lr}
 800abe0:	b082      	sub	sp, #8
 800abe2:	af00      	add	r7, sp, #0
 800abe4:	6078      	str	r0, [r7, #4]
 800abe6:	460b      	mov	r3, r1
 800abe8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800abf0:	78fa      	ldrb	r2, [r7, #3]
 800abf2:	6879      	ldr	r1, [r7, #4]
 800abf4:	4613      	mov	r3, r2
 800abf6:	00db      	lsls	r3, r3, #3
 800abf8:	4413      	add	r3, r2
 800abfa:	009b      	lsls	r3, r3, #2
 800abfc:	440b      	add	r3, r1
 800abfe:	3320      	adds	r3, #32
 800ac00:	681a      	ldr	r2, [r3, #0]
 800ac02:	78fb      	ldrb	r3, [r7, #3]
 800ac04:	4619      	mov	r1, r3
 800ac06:	f7fe fc16 	bl	8009436 <USBD_LL_DataInStage>
}
 800ac0a:	bf00      	nop
 800ac0c:	3708      	adds	r7, #8
 800ac0e:	46bd      	mov	sp, r7
 800ac10:	bd80      	pop	{r7, pc}

0800ac12 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ac12:	b580      	push	{r7, lr}
 800ac14:	b082      	sub	sp, #8
 800ac16:	af00      	add	r7, sp, #0
 800ac18:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ac20:	4618      	mov	r0, r3
 800ac22:	f7fe fd50 	bl	80096c6 <USBD_LL_SOF>
}
 800ac26:	bf00      	nop
 800ac28:	3708      	adds	r7, #8
 800ac2a:	46bd      	mov	sp, r7
 800ac2c:	bd80      	pop	{r7, pc}

0800ac2e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ac2e:	b580      	push	{r7, lr}
 800ac30:	b084      	sub	sp, #16
 800ac32:	af00      	add	r7, sp, #0
 800ac34:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800ac36:	2301      	movs	r3, #1
 800ac38:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	79db      	ldrb	r3, [r3, #7]
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d102      	bne.n	800ac48 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800ac42:	2300      	movs	r3, #0
 800ac44:	73fb      	strb	r3, [r7, #15]
 800ac46:	e008      	b.n	800ac5a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	79db      	ldrb	r3, [r3, #7]
 800ac4c:	2b02      	cmp	r3, #2
 800ac4e:	d102      	bne.n	800ac56 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800ac50:	2301      	movs	r3, #1
 800ac52:	73fb      	strb	r3, [r7, #15]
 800ac54:	e001      	b.n	800ac5a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800ac56:	f7f7 fc7d 	bl	8002554 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ac60:	7bfa      	ldrb	r2, [r7, #15]
 800ac62:	4611      	mov	r1, r2
 800ac64:	4618      	mov	r0, r3
 800ac66:	f7fe fcea 	bl	800963e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ac70:	4618      	mov	r0, r3
 800ac72:	f7fe fc92 	bl	800959a <USBD_LL_Reset>
}
 800ac76:	bf00      	nop
 800ac78:	3710      	adds	r7, #16
 800ac7a:	46bd      	mov	sp, r7
 800ac7c:	bd80      	pop	{r7, pc}
	...

0800ac80 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ac80:	b580      	push	{r7, lr}
 800ac82:	b082      	sub	sp, #8
 800ac84:	af00      	add	r7, sp, #0
 800ac86:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ac8e:	4618      	mov	r0, r3
 800ac90:	f7fe fce5 	bl	800965e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	687a      	ldr	r2, [r7, #4]
 800aca0:	6812      	ldr	r2, [r2, #0]
 800aca2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800aca6:	f043 0301 	orr.w	r3, r3, #1
 800acaa:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	7adb      	ldrb	r3, [r3, #11]
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d005      	beq.n	800acc0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800acb4:	4b04      	ldr	r3, [pc, #16]	@ (800acc8 <HAL_PCD_SuspendCallback+0x48>)
 800acb6:	691b      	ldr	r3, [r3, #16]
 800acb8:	4a03      	ldr	r2, [pc, #12]	@ (800acc8 <HAL_PCD_SuspendCallback+0x48>)
 800acba:	f043 0306 	orr.w	r3, r3, #6
 800acbe:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800acc0:	bf00      	nop
 800acc2:	3708      	adds	r7, #8
 800acc4:	46bd      	mov	sp, r7
 800acc6:	bd80      	pop	{r7, pc}
 800acc8:	e000ed00 	.word	0xe000ed00

0800accc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800accc:	b580      	push	{r7, lr}
 800acce:	b082      	sub	sp, #8
 800acd0:	af00      	add	r7, sp, #0
 800acd2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800acda:	4618      	mov	r0, r3
 800acdc:	f7fe fcdb 	bl	8009696 <USBD_LL_Resume>
}
 800ace0:	bf00      	nop
 800ace2:	3708      	adds	r7, #8
 800ace4:	46bd      	mov	sp, r7
 800ace6:	bd80      	pop	{r7, pc}

0800ace8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ace8:	b580      	push	{r7, lr}
 800acea:	b082      	sub	sp, #8
 800acec:	af00      	add	r7, sp, #0
 800acee:	6078      	str	r0, [r7, #4]
 800acf0:	460b      	mov	r3, r1
 800acf2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800acfa:	78fa      	ldrb	r2, [r7, #3]
 800acfc:	4611      	mov	r1, r2
 800acfe:	4618      	mov	r0, r3
 800ad00:	f7fe fd33 	bl	800976a <USBD_LL_IsoOUTIncomplete>
}
 800ad04:	bf00      	nop
 800ad06:	3708      	adds	r7, #8
 800ad08:	46bd      	mov	sp, r7
 800ad0a:	bd80      	pop	{r7, pc}

0800ad0c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ad0c:	b580      	push	{r7, lr}
 800ad0e:	b082      	sub	sp, #8
 800ad10:	af00      	add	r7, sp, #0
 800ad12:	6078      	str	r0, [r7, #4]
 800ad14:	460b      	mov	r3, r1
 800ad16:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ad1e:	78fa      	ldrb	r2, [r7, #3]
 800ad20:	4611      	mov	r1, r2
 800ad22:	4618      	mov	r0, r3
 800ad24:	f7fe fcef 	bl	8009706 <USBD_LL_IsoINIncomplete>
}
 800ad28:	bf00      	nop
 800ad2a:	3708      	adds	r7, #8
 800ad2c:	46bd      	mov	sp, r7
 800ad2e:	bd80      	pop	{r7, pc}

0800ad30 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ad30:	b580      	push	{r7, lr}
 800ad32:	b082      	sub	sp, #8
 800ad34:	af00      	add	r7, sp, #0
 800ad36:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ad3e:	4618      	mov	r0, r3
 800ad40:	f7fe fd45 	bl	80097ce <USBD_LL_DevConnected>
}
 800ad44:	bf00      	nop
 800ad46:	3708      	adds	r7, #8
 800ad48:	46bd      	mov	sp, r7
 800ad4a:	bd80      	pop	{r7, pc}

0800ad4c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ad4c:	b580      	push	{r7, lr}
 800ad4e:	b082      	sub	sp, #8
 800ad50:	af00      	add	r7, sp, #0
 800ad52:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ad5a:	4618      	mov	r0, r3
 800ad5c:	f7fe fd42 	bl	80097e4 <USBD_LL_DevDisconnected>
}
 800ad60:	bf00      	nop
 800ad62:	3708      	adds	r7, #8
 800ad64:	46bd      	mov	sp, r7
 800ad66:	bd80      	pop	{r7, pc}

0800ad68 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800ad68:	b580      	push	{r7, lr}
 800ad6a:	b082      	sub	sp, #8
 800ad6c:	af00      	add	r7, sp, #0
 800ad6e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	781b      	ldrb	r3, [r3, #0]
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d13c      	bne.n	800adf2 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800ad78:	4a20      	ldr	r2, [pc, #128]	@ (800adfc <USBD_LL_Init+0x94>)
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	4a1e      	ldr	r2, [pc, #120]	@ (800adfc <USBD_LL_Init+0x94>)
 800ad84:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800ad88:	4b1c      	ldr	r3, [pc, #112]	@ (800adfc <USBD_LL_Init+0x94>)
 800ad8a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800ad8e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800ad90:	4b1a      	ldr	r3, [pc, #104]	@ (800adfc <USBD_LL_Init+0x94>)
 800ad92:	2204      	movs	r2, #4
 800ad94:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800ad96:	4b19      	ldr	r3, [pc, #100]	@ (800adfc <USBD_LL_Init+0x94>)
 800ad98:	2202      	movs	r2, #2
 800ad9a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800ad9c:	4b17      	ldr	r3, [pc, #92]	@ (800adfc <USBD_LL_Init+0x94>)
 800ad9e:	2200      	movs	r2, #0
 800ada0:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800ada2:	4b16      	ldr	r3, [pc, #88]	@ (800adfc <USBD_LL_Init+0x94>)
 800ada4:	2202      	movs	r2, #2
 800ada6:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800ada8:	4b14      	ldr	r3, [pc, #80]	@ (800adfc <USBD_LL_Init+0x94>)
 800adaa:	2200      	movs	r2, #0
 800adac:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800adae:	4b13      	ldr	r3, [pc, #76]	@ (800adfc <USBD_LL_Init+0x94>)
 800adb0:	2200      	movs	r2, #0
 800adb2:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800adb4:	4b11      	ldr	r3, [pc, #68]	@ (800adfc <USBD_LL_Init+0x94>)
 800adb6:	2200      	movs	r2, #0
 800adb8:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800adba:	4b10      	ldr	r3, [pc, #64]	@ (800adfc <USBD_LL_Init+0x94>)
 800adbc:	2200      	movs	r2, #0
 800adbe:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800adc0:	4b0e      	ldr	r3, [pc, #56]	@ (800adfc <USBD_LL_Init+0x94>)
 800adc2:	2200      	movs	r2, #0
 800adc4:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800adc6:	480d      	ldr	r0, [pc, #52]	@ (800adfc <USBD_LL_Init+0x94>)
 800adc8:	f7f9 f90d 	bl	8003fe6 <HAL_PCD_Init>
 800adcc:	4603      	mov	r3, r0
 800adce:	2b00      	cmp	r3, #0
 800add0:	d001      	beq.n	800add6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800add2:	f7f7 fbbf 	bl	8002554 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800add6:	2180      	movs	r1, #128	@ 0x80
 800add8:	4808      	ldr	r0, [pc, #32]	@ (800adfc <USBD_LL_Init+0x94>)
 800adda:	f7fa fb3a 	bl	8005452 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800adde:	2240      	movs	r2, #64	@ 0x40
 800ade0:	2100      	movs	r1, #0
 800ade2:	4806      	ldr	r0, [pc, #24]	@ (800adfc <USBD_LL_Init+0x94>)
 800ade4:	f7fa faee 	bl	80053c4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800ade8:	2280      	movs	r2, #128	@ 0x80
 800adea:	2101      	movs	r1, #1
 800adec:	4803      	ldr	r0, [pc, #12]	@ (800adfc <USBD_LL_Init+0x94>)
 800adee:	f7fa fae9 	bl	80053c4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800adf2:	2300      	movs	r3, #0
}
 800adf4:	4618      	mov	r0, r3
 800adf6:	3708      	adds	r7, #8
 800adf8:	46bd      	mov	sp, r7
 800adfa:	bd80      	pop	{r7, pc}
 800adfc:	200019c8 	.word	0x200019c8

0800ae00 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800ae00:	b580      	push	{r7, lr}
 800ae02:	b084      	sub	sp, #16
 800ae04:	af00      	add	r7, sp, #0
 800ae06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ae08:	2300      	movs	r3, #0
 800ae0a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ae0c:	2300      	movs	r3, #0
 800ae0e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ae16:	4618      	mov	r0, r3
 800ae18:	f7f9 f9f4 	bl	8004204 <HAL_PCD_Start>
 800ae1c:	4603      	mov	r3, r0
 800ae1e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ae20:	7bfb      	ldrb	r3, [r7, #15]
 800ae22:	4618      	mov	r0, r3
 800ae24:	f000 f942 	bl	800b0ac <USBD_Get_USB_Status>
 800ae28:	4603      	mov	r3, r0
 800ae2a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ae2c:	7bbb      	ldrb	r3, [r7, #14]
}
 800ae2e:	4618      	mov	r0, r3
 800ae30:	3710      	adds	r7, #16
 800ae32:	46bd      	mov	sp, r7
 800ae34:	bd80      	pop	{r7, pc}

0800ae36 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800ae36:	b580      	push	{r7, lr}
 800ae38:	b084      	sub	sp, #16
 800ae3a:	af00      	add	r7, sp, #0
 800ae3c:	6078      	str	r0, [r7, #4]
 800ae3e:	4608      	mov	r0, r1
 800ae40:	4611      	mov	r1, r2
 800ae42:	461a      	mov	r2, r3
 800ae44:	4603      	mov	r3, r0
 800ae46:	70fb      	strb	r3, [r7, #3]
 800ae48:	460b      	mov	r3, r1
 800ae4a:	70bb      	strb	r3, [r7, #2]
 800ae4c:	4613      	mov	r3, r2
 800ae4e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ae50:	2300      	movs	r3, #0
 800ae52:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ae54:	2300      	movs	r3, #0
 800ae56:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800ae5e:	78bb      	ldrb	r3, [r7, #2]
 800ae60:	883a      	ldrh	r2, [r7, #0]
 800ae62:	78f9      	ldrb	r1, [r7, #3]
 800ae64:	f7f9 fec8 	bl	8004bf8 <HAL_PCD_EP_Open>
 800ae68:	4603      	mov	r3, r0
 800ae6a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ae6c:	7bfb      	ldrb	r3, [r7, #15]
 800ae6e:	4618      	mov	r0, r3
 800ae70:	f000 f91c 	bl	800b0ac <USBD_Get_USB_Status>
 800ae74:	4603      	mov	r3, r0
 800ae76:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ae78:	7bbb      	ldrb	r3, [r7, #14]
}
 800ae7a:	4618      	mov	r0, r3
 800ae7c:	3710      	adds	r7, #16
 800ae7e:	46bd      	mov	sp, r7
 800ae80:	bd80      	pop	{r7, pc}

0800ae82 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ae82:	b580      	push	{r7, lr}
 800ae84:	b084      	sub	sp, #16
 800ae86:	af00      	add	r7, sp, #0
 800ae88:	6078      	str	r0, [r7, #4]
 800ae8a:	460b      	mov	r3, r1
 800ae8c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ae8e:	2300      	movs	r3, #0
 800ae90:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ae92:	2300      	movs	r3, #0
 800ae94:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ae9c:	78fa      	ldrb	r2, [r7, #3]
 800ae9e:	4611      	mov	r1, r2
 800aea0:	4618      	mov	r0, r3
 800aea2:	f7f9 ff13 	bl	8004ccc <HAL_PCD_EP_Close>
 800aea6:	4603      	mov	r3, r0
 800aea8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aeaa:	7bfb      	ldrb	r3, [r7, #15]
 800aeac:	4618      	mov	r0, r3
 800aeae:	f000 f8fd 	bl	800b0ac <USBD_Get_USB_Status>
 800aeb2:	4603      	mov	r3, r0
 800aeb4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aeb6:	7bbb      	ldrb	r3, [r7, #14]
}
 800aeb8:	4618      	mov	r0, r3
 800aeba:	3710      	adds	r7, #16
 800aebc:	46bd      	mov	sp, r7
 800aebe:	bd80      	pop	{r7, pc}

0800aec0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aec0:	b580      	push	{r7, lr}
 800aec2:	b084      	sub	sp, #16
 800aec4:	af00      	add	r7, sp, #0
 800aec6:	6078      	str	r0, [r7, #4]
 800aec8:	460b      	mov	r3, r1
 800aeca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aecc:	2300      	movs	r3, #0
 800aece:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aed0:	2300      	movs	r3, #0
 800aed2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800aeda:	78fa      	ldrb	r2, [r7, #3]
 800aedc:	4611      	mov	r1, r2
 800aede:	4618      	mov	r0, r3
 800aee0:	f7f9 ffcb 	bl	8004e7a <HAL_PCD_EP_SetStall>
 800aee4:	4603      	mov	r3, r0
 800aee6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aee8:	7bfb      	ldrb	r3, [r7, #15]
 800aeea:	4618      	mov	r0, r3
 800aeec:	f000 f8de 	bl	800b0ac <USBD_Get_USB_Status>
 800aef0:	4603      	mov	r3, r0
 800aef2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aef4:	7bbb      	ldrb	r3, [r7, #14]
}
 800aef6:	4618      	mov	r0, r3
 800aef8:	3710      	adds	r7, #16
 800aefa:	46bd      	mov	sp, r7
 800aefc:	bd80      	pop	{r7, pc}

0800aefe <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aefe:	b580      	push	{r7, lr}
 800af00:	b084      	sub	sp, #16
 800af02:	af00      	add	r7, sp, #0
 800af04:	6078      	str	r0, [r7, #4]
 800af06:	460b      	mov	r3, r1
 800af08:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800af0a:	2300      	movs	r3, #0
 800af0c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800af0e:	2300      	movs	r3, #0
 800af10:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800af18:	78fa      	ldrb	r2, [r7, #3]
 800af1a:	4611      	mov	r1, r2
 800af1c:	4618      	mov	r0, r3
 800af1e:	f7fa f80f 	bl	8004f40 <HAL_PCD_EP_ClrStall>
 800af22:	4603      	mov	r3, r0
 800af24:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800af26:	7bfb      	ldrb	r3, [r7, #15]
 800af28:	4618      	mov	r0, r3
 800af2a:	f000 f8bf 	bl	800b0ac <USBD_Get_USB_Status>
 800af2e:	4603      	mov	r3, r0
 800af30:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800af32:	7bbb      	ldrb	r3, [r7, #14]
}
 800af34:	4618      	mov	r0, r3
 800af36:	3710      	adds	r7, #16
 800af38:	46bd      	mov	sp, r7
 800af3a:	bd80      	pop	{r7, pc}

0800af3c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800af3c:	b480      	push	{r7}
 800af3e:	b085      	sub	sp, #20
 800af40:	af00      	add	r7, sp, #0
 800af42:	6078      	str	r0, [r7, #4]
 800af44:	460b      	mov	r3, r1
 800af46:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800af4e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800af50:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800af54:	2b00      	cmp	r3, #0
 800af56:	da0b      	bge.n	800af70 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800af58:	78fb      	ldrb	r3, [r7, #3]
 800af5a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800af5e:	68f9      	ldr	r1, [r7, #12]
 800af60:	4613      	mov	r3, r2
 800af62:	00db      	lsls	r3, r3, #3
 800af64:	4413      	add	r3, r2
 800af66:	009b      	lsls	r3, r3, #2
 800af68:	440b      	add	r3, r1
 800af6a:	3316      	adds	r3, #22
 800af6c:	781b      	ldrb	r3, [r3, #0]
 800af6e:	e00b      	b.n	800af88 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800af70:	78fb      	ldrb	r3, [r7, #3]
 800af72:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800af76:	68f9      	ldr	r1, [r7, #12]
 800af78:	4613      	mov	r3, r2
 800af7a:	00db      	lsls	r3, r3, #3
 800af7c:	4413      	add	r3, r2
 800af7e:	009b      	lsls	r3, r3, #2
 800af80:	440b      	add	r3, r1
 800af82:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800af86:	781b      	ldrb	r3, [r3, #0]
  }
}
 800af88:	4618      	mov	r0, r3
 800af8a:	3714      	adds	r7, #20
 800af8c:	46bd      	mov	sp, r7
 800af8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af92:	4770      	bx	lr

0800af94 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800af94:	b580      	push	{r7, lr}
 800af96:	b084      	sub	sp, #16
 800af98:	af00      	add	r7, sp, #0
 800af9a:	6078      	str	r0, [r7, #4]
 800af9c:	460b      	mov	r3, r1
 800af9e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800afa0:	2300      	movs	r3, #0
 800afa2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800afa4:	2300      	movs	r3, #0
 800afa6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800afae:	78fa      	ldrb	r2, [r7, #3]
 800afb0:	4611      	mov	r1, r2
 800afb2:	4618      	mov	r0, r3
 800afb4:	f7f9 fdfc 	bl	8004bb0 <HAL_PCD_SetAddress>
 800afb8:	4603      	mov	r3, r0
 800afba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800afbc:	7bfb      	ldrb	r3, [r7, #15]
 800afbe:	4618      	mov	r0, r3
 800afc0:	f000 f874 	bl	800b0ac <USBD_Get_USB_Status>
 800afc4:	4603      	mov	r3, r0
 800afc6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800afc8:	7bbb      	ldrb	r3, [r7, #14]
}
 800afca:	4618      	mov	r0, r3
 800afcc:	3710      	adds	r7, #16
 800afce:	46bd      	mov	sp, r7
 800afd0:	bd80      	pop	{r7, pc}

0800afd2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800afd2:	b580      	push	{r7, lr}
 800afd4:	b086      	sub	sp, #24
 800afd6:	af00      	add	r7, sp, #0
 800afd8:	60f8      	str	r0, [r7, #12]
 800afda:	607a      	str	r2, [r7, #4]
 800afdc:	603b      	str	r3, [r7, #0]
 800afde:	460b      	mov	r3, r1
 800afe0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800afe2:	2300      	movs	r3, #0
 800afe4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800afe6:	2300      	movs	r3, #0
 800afe8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800aff0:	7af9      	ldrb	r1, [r7, #11]
 800aff2:	683b      	ldr	r3, [r7, #0]
 800aff4:	687a      	ldr	r2, [r7, #4]
 800aff6:	f7f9 ff06 	bl	8004e06 <HAL_PCD_EP_Transmit>
 800affa:	4603      	mov	r3, r0
 800affc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800affe:	7dfb      	ldrb	r3, [r7, #23]
 800b000:	4618      	mov	r0, r3
 800b002:	f000 f853 	bl	800b0ac <USBD_Get_USB_Status>
 800b006:	4603      	mov	r3, r0
 800b008:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b00a:	7dbb      	ldrb	r3, [r7, #22]
}
 800b00c:	4618      	mov	r0, r3
 800b00e:	3718      	adds	r7, #24
 800b010:	46bd      	mov	sp, r7
 800b012:	bd80      	pop	{r7, pc}

0800b014 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b014:	b580      	push	{r7, lr}
 800b016:	b086      	sub	sp, #24
 800b018:	af00      	add	r7, sp, #0
 800b01a:	60f8      	str	r0, [r7, #12]
 800b01c:	607a      	str	r2, [r7, #4]
 800b01e:	603b      	str	r3, [r7, #0]
 800b020:	460b      	mov	r3, r1
 800b022:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b024:	2300      	movs	r3, #0
 800b026:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b028:	2300      	movs	r3, #0
 800b02a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800b032:	7af9      	ldrb	r1, [r7, #11]
 800b034:	683b      	ldr	r3, [r7, #0]
 800b036:	687a      	ldr	r2, [r7, #4]
 800b038:	f7f9 fe92 	bl	8004d60 <HAL_PCD_EP_Receive>
 800b03c:	4603      	mov	r3, r0
 800b03e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b040:	7dfb      	ldrb	r3, [r7, #23]
 800b042:	4618      	mov	r0, r3
 800b044:	f000 f832 	bl	800b0ac <USBD_Get_USB_Status>
 800b048:	4603      	mov	r3, r0
 800b04a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b04c:	7dbb      	ldrb	r3, [r7, #22]
}
 800b04e:	4618      	mov	r0, r3
 800b050:	3718      	adds	r7, #24
 800b052:	46bd      	mov	sp, r7
 800b054:	bd80      	pop	{r7, pc}

0800b056 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b056:	b580      	push	{r7, lr}
 800b058:	b082      	sub	sp, #8
 800b05a:	af00      	add	r7, sp, #0
 800b05c:	6078      	str	r0, [r7, #4]
 800b05e:	460b      	mov	r3, r1
 800b060:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b068:	78fa      	ldrb	r2, [r7, #3]
 800b06a:	4611      	mov	r1, r2
 800b06c:	4618      	mov	r0, r3
 800b06e:	f7f9 feb2 	bl	8004dd6 <HAL_PCD_EP_GetRxCount>
 800b072:	4603      	mov	r3, r0
}
 800b074:	4618      	mov	r0, r3
 800b076:	3708      	adds	r7, #8
 800b078:	46bd      	mov	sp, r7
 800b07a:	bd80      	pop	{r7, pc}

0800b07c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800b07c:	b480      	push	{r7}
 800b07e:	b083      	sub	sp, #12
 800b080:	af00      	add	r7, sp, #0
 800b082:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800b084:	4b03      	ldr	r3, [pc, #12]	@ (800b094 <USBD_static_malloc+0x18>)
}
 800b086:	4618      	mov	r0, r3
 800b088:	370c      	adds	r7, #12
 800b08a:	46bd      	mov	sp, r7
 800b08c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b090:	4770      	bx	lr
 800b092:	bf00      	nop
 800b094:	20001eac 	.word	0x20001eac

0800b098 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800b098:	b480      	push	{r7}
 800b09a:	b083      	sub	sp, #12
 800b09c:	af00      	add	r7, sp, #0
 800b09e:	6078      	str	r0, [r7, #4]

}
 800b0a0:	bf00      	nop
 800b0a2:	370c      	adds	r7, #12
 800b0a4:	46bd      	mov	sp, r7
 800b0a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0aa:	4770      	bx	lr

0800b0ac <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b0ac:	b480      	push	{r7}
 800b0ae:	b085      	sub	sp, #20
 800b0b0:	af00      	add	r7, sp, #0
 800b0b2:	4603      	mov	r3, r0
 800b0b4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b0b6:	2300      	movs	r3, #0
 800b0b8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b0ba:	79fb      	ldrb	r3, [r7, #7]
 800b0bc:	2b03      	cmp	r3, #3
 800b0be:	d817      	bhi.n	800b0f0 <USBD_Get_USB_Status+0x44>
 800b0c0:	a201      	add	r2, pc, #4	@ (adr r2, 800b0c8 <USBD_Get_USB_Status+0x1c>)
 800b0c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0c6:	bf00      	nop
 800b0c8:	0800b0d9 	.word	0x0800b0d9
 800b0cc:	0800b0df 	.word	0x0800b0df
 800b0d0:	0800b0e5 	.word	0x0800b0e5
 800b0d4:	0800b0eb 	.word	0x0800b0eb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800b0d8:	2300      	movs	r3, #0
 800b0da:	73fb      	strb	r3, [r7, #15]
    break;
 800b0dc:	e00b      	b.n	800b0f6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b0de:	2303      	movs	r3, #3
 800b0e0:	73fb      	strb	r3, [r7, #15]
    break;
 800b0e2:	e008      	b.n	800b0f6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b0e4:	2301      	movs	r3, #1
 800b0e6:	73fb      	strb	r3, [r7, #15]
    break;
 800b0e8:	e005      	b.n	800b0f6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b0ea:	2303      	movs	r3, #3
 800b0ec:	73fb      	strb	r3, [r7, #15]
    break;
 800b0ee:	e002      	b.n	800b0f6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800b0f0:	2303      	movs	r3, #3
 800b0f2:	73fb      	strb	r3, [r7, #15]
    break;
 800b0f4:	bf00      	nop
  }
  return usb_status;
 800b0f6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0f8:	4618      	mov	r0, r3
 800b0fa:	3714      	adds	r7, #20
 800b0fc:	46bd      	mov	sp, r7
 800b0fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b102:	4770      	bx	lr

0800b104 <checkButtons>:
 *  Created on: Oct 25, 2024
 *      Author: saman
 */
#include"Button.h"

int checkButtons(){
 800b104:	b580      	push	{r7, lr}
 800b106:	b082      	sub	sp, #8
 800b108:	af00      	add	r7, sp, #0
  bool flag_bt1  = true;
 800b10a:	2301      	movs	r3, #1
 800b10c:	71fb      	strb	r3, [r7, #7]
  bool flag_bt2  = true;
 800b10e:	2301      	movs	r3, #1
 800b110:	71bb      	strb	r3, [r7, #6]
  bool flag_both = true;
 800b112:	2301      	movs	r3, #1
 800b114:	717b      	strb	r3, [r7, #5]
  while(1){
    if(!DeviceState && TimerState){state=Lock;break;}
 800b116:	4b40      	ldr	r3, [pc, #256]	@ (800b218 <checkButtons+0x114>)
 800b118:	781b      	ldrb	r3, [r3, #0]
 800b11a:	f083 0301 	eor.w	r3, r3, #1
 800b11e:	b2db      	uxtb	r3, r3
 800b120:	2b00      	cmp	r3, #0
 800b122:	d009      	beq.n	800b138 <checkButtons+0x34>
 800b124:	4b3d      	ldr	r3, [pc, #244]	@ (800b21c <checkButtons+0x118>)
 800b126:	781b      	ldrb	r3, [r3, #0]
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d005      	beq.n	800b138 <checkButtons+0x34>
 800b12c:	4b3c      	ldr	r3, [pc, #240]	@ (800b220 <checkButtons+0x11c>)
 800b12e:	2200      	movs	r2, #0
 800b130:	701a      	strb	r2, [r3, #0]
 800b132:	bf00      	nop
    }else if(!Read_DOWN() && !flag_bt2 && flag_both){
      flag_bt2  = true;
      return 1;
    }
  }
  return 3;//nothing
 800b134:	2303      	movs	r3, #3
 800b136:	e06a      	b.n	800b20e <checkButtons+0x10a>
    if(Read_UP() && Read_DOWN() && flag_both){
 800b138:	f000 f874 	bl	800b224 <Read_UP>
 800b13c:	4603      	mov	r3, r0
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d00a      	beq.n	800b158 <checkButtons+0x54>
 800b142:	f000 f883 	bl	800b24c <Read_DOWN>
 800b146:	4603      	mov	r3, r0
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d005      	beq.n	800b158 <checkButtons+0x54>
 800b14c:	797b      	ldrb	r3, [r7, #5]
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d002      	beq.n	800b158 <checkButtons+0x54>
      flag_both = false;
 800b152:	2300      	movs	r3, #0
 800b154:	717b      	strb	r3, [r7, #5]
 800b156:	e059      	b.n	800b20c <checkButtons+0x108>
    }else if(Read_UP() && flag_bt1){
 800b158:	f000 f864 	bl	800b224 <Read_UP>
 800b15c:	4603      	mov	r3, r0
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d005      	beq.n	800b16e <checkButtons+0x6a>
 800b162:	79fb      	ldrb	r3, [r7, #7]
 800b164:	2b00      	cmp	r3, #0
 800b166:	d002      	beq.n	800b16e <checkButtons+0x6a>
      flag_bt1 = false;
 800b168:	2300      	movs	r3, #0
 800b16a:	71fb      	strb	r3, [r7, #7]
 800b16c:	e04e      	b.n	800b20c <checkButtons+0x108>
    }else if(Read_DOWN() && flag_bt2){
 800b16e:	f000 f86d 	bl	800b24c <Read_DOWN>
 800b172:	4603      	mov	r3, r0
 800b174:	2b00      	cmp	r3, #0
 800b176:	d005      	beq.n	800b184 <checkButtons+0x80>
 800b178:	79bb      	ldrb	r3, [r7, #6]
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d002      	beq.n	800b184 <checkButtons+0x80>
      flag_bt2 = false;
 800b17e:	2300      	movs	r3, #0
 800b180:	71bb      	strb	r3, [r7, #6]
 800b182:	e043      	b.n	800b20c <checkButtons+0x108>
    }else if(!Read_UP() && !Read_DOWN() && !flag_both){
 800b184:	f000 f84e 	bl	800b224 <Read_UP>
 800b188:	4603      	mov	r3, r0
 800b18a:	f083 0301 	eor.w	r3, r3, #1
 800b18e:	b2db      	uxtb	r3, r3
 800b190:	2b00      	cmp	r3, #0
 800b192:	d011      	beq.n	800b1b8 <checkButtons+0xb4>
 800b194:	f000 f85a 	bl	800b24c <Read_DOWN>
 800b198:	4603      	mov	r3, r0
 800b19a:	f083 0301 	eor.w	r3, r3, #1
 800b19e:	b2db      	uxtb	r3, r3
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d009      	beq.n	800b1b8 <checkButtons+0xb4>
 800b1a4:	797b      	ldrb	r3, [r7, #5]
 800b1a6:	f083 0301 	eor.w	r3, r3, #1
 800b1aa:	b2db      	uxtb	r3, r3
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d003      	beq.n	800b1b8 <checkButtons+0xb4>
      flag_both = true;
 800b1b0:	2301      	movs	r3, #1
 800b1b2:	717b      	strb	r3, [r7, #5]
      return 2;
 800b1b4:	2302      	movs	r3, #2
 800b1b6:	e02a      	b.n	800b20e <checkButtons+0x10a>
    }else if(!Read_UP() && !flag_bt1 && flag_both){
 800b1b8:	f000 f834 	bl	800b224 <Read_UP>
 800b1bc:	4603      	mov	r3, r0
 800b1be:	f083 0301 	eor.w	r3, r3, #1
 800b1c2:	b2db      	uxtb	r3, r3
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d00c      	beq.n	800b1e2 <checkButtons+0xde>
 800b1c8:	79fb      	ldrb	r3, [r7, #7]
 800b1ca:	f083 0301 	eor.w	r3, r3, #1
 800b1ce:	b2db      	uxtb	r3, r3
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d006      	beq.n	800b1e2 <checkButtons+0xde>
 800b1d4:	797b      	ldrb	r3, [r7, #5]
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d003      	beq.n	800b1e2 <checkButtons+0xde>
      flag_bt1  = true;
 800b1da:	2301      	movs	r3, #1
 800b1dc:	71fb      	strb	r3, [r7, #7]
      return 0;
 800b1de:	2300      	movs	r3, #0
 800b1e0:	e015      	b.n	800b20e <checkButtons+0x10a>
    }else if(!Read_DOWN() && !flag_bt2 && flag_both){
 800b1e2:	f000 f833 	bl	800b24c <Read_DOWN>
 800b1e6:	4603      	mov	r3, r0
 800b1e8:	f083 0301 	eor.w	r3, r3, #1
 800b1ec:	b2db      	uxtb	r3, r3
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d091      	beq.n	800b116 <checkButtons+0x12>
 800b1f2:	79bb      	ldrb	r3, [r7, #6]
 800b1f4:	f083 0301 	eor.w	r3, r3, #1
 800b1f8:	b2db      	uxtb	r3, r3
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d08b      	beq.n	800b116 <checkButtons+0x12>
 800b1fe:	797b      	ldrb	r3, [r7, #5]
 800b200:	2b00      	cmp	r3, #0
 800b202:	d088      	beq.n	800b116 <checkButtons+0x12>
      flag_bt2  = true;
 800b204:	2301      	movs	r3, #1
 800b206:	71bb      	strb	r3, [r7, #6]
      return 1;
 800b208:	2301      	movs	r3, #1
 800b20a:	e000      	b.n	800b20e <checkButtons+0x10a>
    if(!DeviceState && TimerState){state=Lock;break;}
 800b20c:	e783      	b.n	800b116 <checkButtons+0x12>
}
 800b20e:	4618      	mov	r0, r3
 800b210:	3708      	adds	r7, #8
 800b212:	46bd      	mov	sp, r7
 800b214:	bd80      	pop	{r7, pc}
 800b216:	bf00      	nop
 800b218:	200002ac 	.word	0x200002ac
 800b21c:	200002ab 	.word	0x200002ab
 800b220:	200002a9 	.word	0x200002a9

0800b224 <Read_UP>:

bool Read_UP(){
 800b224:	b580      	push	{r7, lr}
 800b226:	af00      	add	r7, sp, #0
  HAL_Delay(5);
 800b228:	2005      	movs	r0, #5
 800b22a:	f7f7 fbfd 	bl	8002a28 <HAL_Delay>
  return HAL_GPIO_ReadPin(UP_GPIO_Port, UP_Pin);
 800b22e:	2110      	movs	r1, #16
 800b230:	4805      	ldr	r0, [pc, #20]	@ (800b248 <Read_UP+0x24>)
 800b232:	f7f8 f8e5 	bl	8003400 <HAL_GPIO_ReadPin>
 800b236:	4603      	mov	r3, r0
 800b238:	2b00      	cmp	r3, #0
 800b23a:	bf14      	ite	ne
 800b23c:	2301      	movne	r3, #1
 800b23e:	2300      	moveq	r3, #0
 800b240:	b2db      	uxtb	r3, r3
}
 800b242:	4618      	mov	r0, r3
 800b244:	bd80      	pop	{r7, pc}
 800b246:	bf00      	nop
 800b248:	40020800 	.word	0x40020800

0800b24c <Read_DOWN>:

bool Read_DOWN(){
 800b24c:	b580      	push	{r7, lr}
 800b24e:	af00      	add	r7, sp, #0
  HAL_Delay(5);
 800b250:	2005      	movs	r0, #5
 800b252:	f7f7 fbe9 	bl	8002a28 <HAL_Delay>
  return HAL_GPIO_ReadPin(DOWN_GPIO_Port, DOWN_Pin);
 800b256:	2120      	movs	r1, #32
 800b258:	4805      	ldr	r0, [pc, #20]	@ (800b270 <Read_DOWN+0x24>)
 800b25a:	f7f8 f8d1 	bl	8003400 <HAL_GPIO_ReadPin>
 800b25e:	4603      	mov	r3, r0
 800b260:	2b00      	cmp	r3, #0
 800b262:	bf14      	ite	ne
 800b264:	2301      	movne	r3, #1
 800b266:	2300      	moveq	r3, #0
 800b268:	b2db      	uxtb	r3, r3
}
 800b26a:	4618      	mov	r0, r3
 800b26c:	bd80      	pop	{r7, pc}
 800b26e:	bf00      	nop
 800b270:	40020800 	.word	0x40020800

0800b274 <sha256>:
 *      Author: saman
 */

#include "Crypto.h"

void sha256(uint8_t *data,uint8_t *result,uint8_t DataSize){
 800b274:	b580      	push	{r7, lr}
 800b276:	b088      	sub	sp, #32
 800b278:	af02      	add	r7, sp, #8
 800b27a:	60f8      	str	r0, [r7, #12]
 800b27c:	60b9      	str	r1, [r7, #8]
 800b27e:	4613      	mov	r3, r2
 800b280:	71fb      	strb	r3, [r7, #7]
  size_t computed_size;
    cmox_hash_compute(CMOX_SHA256_ALGO,                /* Use SHA256 algorithm */
 800b282:	4b08      	ldr	r3, [pc, #32]	@ (800b2a4 <sha256+0x30>)
 800b284:	6818      	ldr	r0, [r3, #0]
 800b286:	79fa      	ldrb	r2, [r7, #7]
 800b288:	f107 0314 	add.w	r3, r7, #20
 800b28c:	9301      	str	r3, [sp, #4]
 800b28e:	2320      	movs	r3, #32
 800b290:	9300      	str	r3, [sp, #0]
 800b292:	68bb      	ldr	r3, [r7, #8]
 800b294:	68f9      	ldr	r1, [r7, #12]
 800b296:	f7f5 fd0b 	bl	8000cb0 <cmox_hash_compute>
                 data, DataSize,           /* Message to digest */
               result,                   /* Data buffer to receive digest data */
               CMOX_SHA256_SIZE,         /* Expected digest size */
               &computed_size);          /* Size of computed digest */
}
 800b29a:	bf00      	nop
 800b29c:	3718      	adds	r7, #24
 800b29e:	46bd      	mov	sp, r7
 800b2a0:	bd80      	pop	{r7, pc}
 800b2a2:	bf00      	nop
 800b2a4:	0800d888 	.word	0x0800d888

0800b2a8 <AESCBC>:

void AESCBC(uint8_t *Data, uint8_t DataSize, uint8_t *Key, uint8_t KeySize, uint8_t *IVF,uint8_t IVFSize, uint8_t *result){
 800b2a8:	b590      	push	{r4, r7, lr}
 800b2aa:	b08d      	sub	sp, #52	@ 0x34
 800b2ac:	af06      	add	r7, sp, #24
 800b2ae:	60f8      	str	r0, [r7, #12]
 800b2b0:	607a      	str	r2, [r7, #4]
 800b2b2:	461a      	mov	r2, r3
 800b2b4:	460b      	mov	r3, r1
 800b2b6:	72fb      	strb	r3, [r7, #11]
 800b2b8:	4613      	mov	r3, r2
 800b2ba:	72bb      	strb	r3, [r7, #10]
  size_t computed_size;
  cmox_cipher_encrypt(CMOX_AES_CBC_ENC_ALGO,                      /* Use AES CBC algorithm */
 800b2bc:	4b0b      	ldr	r3, [pc, #44]	@ (800b2ec <AESCBC+0x44>)
 800b2be:	6818      	ldr	r0, [r3, #0]
 800b2c0:	7afc      	ldrb	r4, [r7, #11]
 800b2c2:	7abb      	ldrb	r3, [r7, #10]
 800b2c4:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 800b2c8:	f107 0114 	add.w	r1, r7, #20
 800b2cc:	9104      	str	r1, [sp, #16]
 800b2ce:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800b2d0:	9103      	str	r1, [sp, #12]
 800b2d2:	9202      	str	r2, [sp, #8]
 800b2d4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b2d6:	9201      	str	r2, [sp, #4]
 800b2d8:	9300      	str	r3, [sp, #0]
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	4622      	mov	r2, r4
 800b2de:	68f9      	ldr	r1, [r7, #12]
 800b2e0:	f7f5 f9fa 	bl	80006d8 <cmox_cipher_encrypt>
                     Data, DataSize,            /* Plaintext to encrypt */
                     Key, KeySize,              /* AES key to use */
                     IVF, IVFSize,              /* Initialization vector */
                     result, &computed_size);   /* Data buffer to receive generated ciphertext */
}
 800b2e4:	bf00      	nop
 800b2e6:	371c      	adds	r7, #28
 800b2e8:	46bd      	mov	sp, r7
 800b2ea:	bd90      	pop	{r4, r7, pc}
 800b2ec:	0800d820 	.word	0x0800d820

0800b2f0 <DecryptAES>:

void DecryptAES(uint8_t *Data, uint8_t DataSize, uint8_t *Key, uint8_t KeySize, uint8_t *IVF,uint8_t IVFSize, uint8_t *result){
 800b2f0:	b590      	push	{r4, r7, lr}
 800b2f2:	b08d      	sub	sp, #52	@ 0x34
 800b2f4:	af06      	add	r7, sp, #24
 800b2f6:	60f8      	str	r0, [r7, #12]
 800b2f8:	607a      	str	r2, [r7, #4]
 800b2fa:	461a      	mov	r2, r3
 800b2fc:	460b      	mov	r3, r1
 800b2fe:	72fb      	strb	r3, [r7, #11]
 800b300:	4613      	mov	r3, r2
 800b302:	72bb      	strb	r3, [r7, #10]
  size_t computed_size;
  cmox_cipher_decrypt(CMOX_AES_CBC_DEC_ALGO,                 /* Use AES CBC algorithm */
 800b304:	4b0b      	ldr	r3, [pc, #44]	@ (800b334 <DecryptAES+0x44>)
 800b306:	6818      	ldr	r0, [r3, #0]
 800b308:	7afc      	ldrb	r4, [r7, #11]
 800b30a:	7abb      	ldrb	r3, [r7, #10]
 800b30c:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 800b310:	f107 0114 	add.w	r1, r7, #20
 800b314:	9104      	str	r1, [sp, #16]
 800b316:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800b318:	9103      	str	r1, [sp, #12]
 800b31a:	9202      	str	r2, [sp, #8]
 800b31c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b31e:	9201      	str	r2, [sp, #4]
 800b320:	9300      	str	r3, [sp, #0]
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	4622      	mov	r2, r4
 800b326:	68f9      	ldr	r1, [r7, #12]
 800b328:	f7f5 fa02 	bl	8000730 <cmox_cipher_decrypt>
                   Data, DataSize,             /* Ciphertext to decrypt */
                                 Key, KeySize,               /* AES key to use */
                   IVF, IVFSize,               /* Initialization vector */
                   result, &computed_size);    /* Data buffer to receive generated plaintext */
}
 800b32c:	bf00      	nop
 800b32e:	371c      	adds	r7, #28
 800b330:	46bd      	mov	sp, r7
 800b332:	bd90      	pop	{r4, r7, pc}
 800b334:	0800d814 	.word	0x0800d814

0800b338 <Startup>:
 *  Created on: Oct 25, 2024
 *      Author: saman
 */
#include "Menu.h"

void Startup() {
 800b338:	b580      	push	{r7, lr}
 800b33a:	b082      	sub	sp, #8
 800b33c:	af02      	add	r7, sp, #8
  DEBUG_PRINT("Startup\n");
 800b33e:	4831      	ldr	r0, [pc, #196]	@ (800b404 <Startup+0xcc>)
 800b340:	f001 f9c4 	bl	800c6cc <puts>
  // Read a single byte from the flash memory at BrandNew_address and store it in Brand_new.
  MY_FLASH_ReadN(BrandNew_address, &Brand_new, 1, DATA_TYPE_8);
 800b344:	2300      	movs	r3, #0
 800b346:	2201      	movs	r2, #1
 800b348:	492f      	ldr	r1, [pc, #188]	@ (800b408 <Startup+0xd0>)
 800b34a:	2000      	movs	r0, #0
 800b34c:	f7fc fe42 	bl	8007fd4 <MY_FLASH_ReadN>
  // Update the SSD1306 display to show the drawn bitmap.
  ssd1306_SetCursor (25,7);
 800b350:	2107      	movs	r1, #7
 800b352:	2019      	movs	r0, #25
 800b354:	f7fd f8e0 	bl	8008518 <ssd1306_SetCursor>
  ssd1306_WriteString("SecureX", Font_11x18, 1);
 800b358:	4b2c      	ldr	r3, [pc, #176]	@ (800b40c <Startup+0xd4>)
 800b35a:	2201      	movs	r2, #1
 800b35c:	9200      	str	r2, [sp, #0]
 800b35e:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b360:	482b      	ldr	r0, [pc, #172]	@ (800b410 <Startup+0xd8>)
 800b362:	f7fd f8b3 	bl	80084cc <ssd1306_WriteString>
  ssd1306_UpdateScreen();
 800b366:	f7fc ffa5 	bl	80082b4 <ssd1306_UpdateScreen>

  // Delay for 1000 milliseconds (1 second).
  HAL_Delay(1000);
 800b36a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800b36e:	f7f7 fb5b 	bl	8002a28 <HAL_Delay>

  // Clear the SSD1306 display.
  ssd1306_clear();
 800b372:	f7fc fedb 	bl	800812c <ssd1306_clear>

  // Read 8 bytes from the flash memory at GlobalSalt_address and store it in GlobalSalt.
  MY_FLASH_ReadN(GlobalSalt_address, GlobalSalt, 8, DATA_TYPE_8);
 800b376:	2300      	movs	r3, #0
 800b378:	2208      	movs	r2, #8
 800b37a:	4926      	ldr	r1, [pc, #152]	@ (800b414 <Startup+0xdc>)
 800b37c:	2003      	movs	r0, #3
 800b37e:	f7fc fe29 	bl	8007fd4 <MY_FLASH_ReadN>

  // Check if the device is brand new.
  if (Brand_new == 0) {
 800b382:	4b21      	ldr	r3, [pc, #132]	@ (800b408 <Startup+0xd0>)
 800b384:	781b      	ldrb	r3, [r3, #0]
 800b386:	2b00      	cmp	r3, #0
 800b388:	d12e      	bne.n	800b3e8 <Startup+0xb0>
    // Print the Brand_new value for debugging purposes.
    DEBUG_PRINT("Brand new = %02x\n", Brand_new);
 800b38a:	4b1f      	ldr	r3, [pc, #124]	@ (800b408 <Startup+0xd0>)
 800b38c:	781b      	ldrb	r3, [r3, #0]
 800b38e:	4619      	mov	r1, r3
 800b390:	4821      	ldr	r0, [pc, #132]	@ (800b418 <Startup+0xe0>)
 800b392:	f001 f92b 	bl	800c5ec <iprintf>

    // Clear the SSD1306 display.
    ssd1306_Fill(Black);
 800b396:	2000      	movs	r0, #0
 800b398:	f7fc ff74 	bl	8008284 <ssd1306_Fill>

    // Set the cursor position on the SSD1306 display.
    ssd1306_SetCursor(15, 7);
 800b39c:	2107      	movs	r1, #7
 800b39e:	200f      	movs	r0, #15
 800b3a0:	f7fd f8ba 	bl	8008518 <ssd1306_SetCursor>

    // Display "Brand new" text on the SSD1306 display using Font_11x18.
    ssd1306_WriteString("Brand new", Font_11x18, 1);
 800b3a4:	4b19      	ldr	r3, [pc, #100]	@ (800b40c <Startup+0xd4>)
 800b3a6:	2201      	movs	r2, #1
 800b3a8:	9200      	str	r2, [sp, #0]
 800b3aa:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b3ac:	481b      	ldr	r0, [pc, #108]	@ (800b41c <Startup+0xe4>)
 800b3ae:	f7fd f88d 	bl	80084cc <ssd1306_WriteString>

    // Update the SSD1306 display to show the text.
    ssd1306_UpdateScreen();
 800b3b2:	f7fc ff7f 	bl	80082b4 <ssd1306_UpdateScreen>

    // Delay for 2000 milliseconds (2 seconds).
    HAL_Delay(2000);
 800b3b6:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800b3ba:	f7f7 fb35 	bl	8002a28 <HAL_Delay>

    // Clear the SSD1306 display.
    ssd1306_clear();
 800b3be:	f7fc feb5 	bl	800812c <ssd1306_clear>
    // Generate a random number and store it in GlobalSalt.
    Get_rng(&hrng , GlobalSalt, 2);
 800b3c2:	2202      	movs	r2, #2
 800b3c4:	4913      	ldr	r1, [pc, #76]	@ (800b414 <Startup+0xdc>)
 800b3c6:	4816      	ldr	r0, [pc, #88]	@ (800b420 <Startup+0xe8>)
 800b3c8:	f000 ff04 	bl	800c1d4 <Get_rng>
    printArray("New Global Salt", GlobalSalt, sizeof(GlobalSalt));
 800b3cc:	2208      	movs	r2, #8
 800b3ce:	4911      	ldr	r1, [pc, #68]	@ (800b414 <Startup+0xdc>)
 800b3d0:	4814      	ldr	r0, [pc, #80]	@ (800b424 <Startup+0xec>)
 800b3d2:	f000 ffc5 	bl	800c360 <printArray>
    // Save the generated GlobalSalt to the flash memory at GlobalSalt_address.
    write_flash(GlobalSalt_address, GlobalSalt, 8);
 800b3d6:	2208      	movs	r2, #8
 800b3d8:	490e      	ldr	r1, [pc, #56]	@ (800b414 <Startup+0xdc>)
 800b3da:	2003      	movs	r0, #3
 800b3dc:	f7fc fe56 	bl	800808c <write_flash>

    // Set the system state to Enrollment.
    state = Enrollment;
 800b3e0:	4b11      	ldr	r3, [pc, #68]	@ (800b428 <Startup+0xf0>)
 800b3e2:	2203      	movs	r2, #3
 800b3e4:	701a      	strb	r2, [r3, #0]
    printArray("Saved Global Salt", GlobalSalt, sizeof(GlobalSalt));
    // Set the system state to Lock.
    state = Lock;
  }

}
 800b3e6:	e00a      	b.n	800b3fe <Startup+0xc6>
    DEBUG_PRINT("Not brand new\n");
 800b3e8:	4810      	ldr	r0, [pc, #64]	@ (800b42c <Startup+0xf4>)
 800b3ea:	f001 f96f 	bl	800c6cc <puts>
    printArray("Saved Global Salt", GlobalSalt, sizeof(GlobalSalt));
 800b3ee:	2208      	movs	r2, #8
 800b3f0:	4908      	ldr	r1, [pc, #32]	@ (800b414 <Startup+0xdc>)
 800b3f2:	480f      	ldr	r0, [pc, #60]	@ (800b430 <Startup+0xf8>)
 800b3f4:	f000 ffb4 	bl	800c360 <printArray>
    state = Lock;
 800b3f8:	4b0b      	ldr	r3, [pc, #44]	@ (800b428 <Startup+0xf0>)
 800b3fa:	2200      	movs	r2, #0
 800b3fc:	701a      	strb	r2, [r3, #0]
}
 800b3fe:	bf00      	nop
 800b400:	46bd      	mov	sp, r7
 800b402:	bd80      	pop	{r7, pc}
 800b404:	0800d580 	.word	0x0800d580
 800b408:	20000230 	.word	0x20000230
 800b40c:	0800f4c4 	.word	0x0800f4c4
 800b410:	0800d588 	.word	0x0800d588
 800b414:	20000234 	.word	0x20000234
 800b418:	0800d590 	.word	0x0800d590
 800b41c:	0800d5a4 	.word	0x0800d5a4
 800b420:	200001d8 	.word	0x200001d8
 800b424:	0800d5b0 	.word	0x0800d5b0
 800b428:	200002a9 	.word	0x200002a9
 800b42c:	0800d5c0 	.word	0x0800d5c0
 800b430:	0800d5d0 	.word	0x0800d5d0

0800b434 <MainMenu>:

void MainMenu() {
 800b434:	b580      	push	{r7, lr}
 800b436:	b084      	sub	sp, #16
 800b438:	af02      	add	r7, sp, #8
  DEBUG_PRINT("MainMenu\n");
 800b43a:	4878      	ldr	r0, [pc, #480]	@ (800b61c <MainMenu+0x1e8>)
 800b43c:	f001 f946 	bl	800c6cc <puts>
  // Clear the SSD1306 display.
  ssd1306_clear();
 800b440:	f7fc fe74 	bl	800812c <ssd1306_clear>

  // Display the menu options at specified coordinates using Font_7x10.
  ssd1306_SetCursor(17, 5);
 800b444:	2105      	movs	r1, #5
 800b446:	2011      	movs	r0, #17
 800b448:	f7fd f866 	bl	8008518 <ssd1306_SetCursor>
  ssd1306_WriteString("Lock", Font_6x8, 1);
 800b44c:	4b74      	ldr	r3, [pc, #464]	@ (800b620 <MainMenu+0x1ec>)
 800b44e:	2201      	movs	r2, #1
 800b450:	9200      	str	r2, [sp, #0]
 800b452:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b454:	4873      	ldr	r0, [pc, #460]	@ (800b624 <MainMenu+0x1f0>)
 800b456:	f7fd f839 	bl	80084cc <ssd1306_WriteString>

  ssd1306_SetCursor(14, 19);
 800b45a:	2113      	movs	r1, #19
 800b45c:	200e      	movs	r0, #14
 800b45e:	f7fd f85b 	bl	8008518 <ssd1306_SetCursor>
  ssd1306_WriteString("Reset", Font_6x8, 1);
 800b462:	4b6f      	ldr	r3, [pc, #444]	@ (800b620 <MainMenu+0x1ec>)
 800b464:	2201      	movs	r2, #1
 800b466:	9200      	str	r2, [sp, #0]
 800b468:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b46a:	486f      	ldr	r0, [pc, #444]	@ (800b628 <MainMenu+0x1f4>)
 800b46c:	f7fd f82e 	bl	80084cc <ssd1306_WriteString>

  ssd1306_SetCursor(52, 5);
 800b470:	2105      	movs	r1, #5
 800b472:	2034      	movs	r0, #52	@ 0x34
 800b474:	f7fd f850 	bl	8008518 <ssd1306_SetCursor>
  ssd1306_WriteString("Enrollment", Font_6x8, 1);
 800b478:	4b69      	ldr	r3, [pc, #420]	@ (800b620 <MainMenu+0x1ec>)
 800b47a:	2201      	movs	r2, #1
 800b47c:	9200      	str	r2, [sp, #0]
 800b47e:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b480:	486a      	ldr	r0, [pc, #424]	@ (800b62c <MainMenu+0x1f8>)
 800b482:	f7fd f823 	bl	80084cc <ssd1306_WriteString>

  ssd1306_SetCursor(61, 19);
 800b486:	2113      	movs	r1, #19
 800b488:	203d      	movs	r0, #61	@ 0x3d
 800b48a:	f7fd f845 	bl	8008518 <ssd1306_SetCursor>
  ssd1306_WriteString("Timeout", Font_6x8, 1);
 800b48e:	4b64      	ldr	r3, [pc, #400]	@ (800b620 <MainMenu+0x1ec>)
 800b490:	2201      	movs	r2, #1
 800b492:	9200      	str	r2, [sp, #0]
 800b494:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b496:	4866      	ldr	r0, [pc, #408]	@ (800b630 <MainMenu+0x1fc>)
 800b498:	f7fd f818 	bl	80084cc <ssd1306_WriteString>

  // Highlight the current menu option based on MenuState.
  if (MenuState == Lock) {
 800b49c:	4b65      	ldr	r3, [pc, #404]	@ (800b634 <MainMenu+0x200>)
 800b49e:	781b      	ldrb	r3, [r3, #0]
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d112      	bne.n	800b4ca <MainMenu+0x96>
    ssd1306_FillRectangle(14, 2, 41, 16, 1);
 800b4a4:	2301      	movs	r3, #1
 800b4a6:	9300      	str	r3, [sp, #0]
 800b4a8:	2310      	movs	r3, #16
 800b4aa:	2229      	movs	r2, #41	@ 0x29
 800b4ac:	2102      	movs	r1, #2
 800b4ae:	200e      	movs	r0, #14
 800b4b0:	f7fd f8b6 	bl	8008620 <ssd1306_FillRectangle>
    ssd1306_SetCursor(17, 5);
 800b4b4:	2105      	movs	r1, #5
 800b4b6:	2011      	movs	r0, #17
 800b4b8:	f7fd f82e 	bl	8008518 <ssd1306_SetCursor>
    ssd1306_WriteString("Lock", Font_6x8, 0);
 800b4bc:	4b58      	ldr	r3, [pc, #352]	@ (800b620 <MainMenu+0x1ec>)
 800b4be:	2200      	movs	r2, #0
 800b4c0:	9200      	str	r2, [sp, #0]
 800b4c2:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b4c4:	4857      	ldr	r0, [pc, #348]	@ (800b624 <MainMenu+0x1f0>)
 800b4c6:	f7fd f801 	bl	80084cc <ssd1306_WriteString>
  }
  if (MenuState == Reset) {
 800b4ca:	4b5a      	ldr	r3, [pc, #360]	@ (800b634 <MainMenu+0x200>)
 800b4cc:	781b      	ldrb	r3, [r3, #0]
 800b4ce:	2b01      	cmp	r3, #1
 800b4d0:	d112      	bne.n	800b4f8 <MainMenu+0xc4>
    ssd1306_FillRectangle(11, 16, 47, 29, 1);
 800b4d2:	2301      	movs	r3, #1
 800b4d4:	9300      	str	r3, [sp, #0]
 800b4d6:	231d      	movs	r3, #29
 800b4d8:	222f      	movs	r2, #47	@ 0x2f
 800b4da:	2110      	movs	r1, #16
 800b4dc:	200b      	movs	r0, #11
 800b4de:	f7fd f89f 	bl	8008620 <ssd1306_FillRectangle>
    ssd1306_SetCursor(14, 19);
 800b4e2:	2113      	movs	r1, #19
 800b4e4:	200e      	movs	r0, #14
 800b4e6:	f7fd f817 	bl	8008518 <ssd1306_SetCursor>
    ssd1306_WriteString("Reset", Font_6x8, 0);
 800b4ea:	4b4d      	ldr	r3, [pc, #308]	@ (800b620 <MainMenu+0x1ec>)
 800b4ec:	2200      	movs	r2, #0
 800b4ee:	9200      	str	r2, [sp, #0]
 800b4f0:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b4f2:	484d      	ldr	r0, [pc, #308]	@ (800b628 <MainMenu+0x1f4>)
 800b4f4:	f7fc ffea 	bl	80084cc <ssd1306_WriteString>
  }
  if (MenuState == Timeout) {
 800b4f8:	4b4e      	ldr	r3, [pc, #312]	@ (800b634 <MainMenu+0x200>)
 800b4fa:	781b      	ldrb	r3, [r3, #0]
 800b4fc:	2b02      	cmp	r3, #2
 800b4fe:	d112      	bne.n	800b526 <MainMenu+0xf2>
    ssd1306_FillRectangle(58, 16, 106, 29, 1);
 800b500:	2301      	movs	r3, #1
 800b502:	9300      	str	r3, [sp, #0]
 800b504:	231d      	movs	r3, #29
 800b506:	226a      	movs	r2, #106	@ 0x6a
 800b508:	2110      	movs	r1, #16
 800b50a:	203a      	movs	r0, #58	@ 0x3a
 800b50c:	f7fd f888 	bl	8008620 <ssd1306_FillRectangle>
    ssd1306_SetCursor(61, 19);
 800b510:	2113      	movs	r1, #19
 800b512:	203d      	movs	r0, #61	@ 0x3d
 800b514:	f7fd f800 	bl	8008518 <ssd1306_SetCursor>
    ssd1306_WriteString("Timeout", Font_6x8, 0);
 800b518:	4b41      	ldr	r3, [pc, #260]	@ (800b620 <MainMenu+0x1ec>)
 800b51a:	2200      	movs	r2, #0
 800b51c:	9200      	str	r2, [sp, #0]
 800b51e:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b520:	4843      	ldr	r0, [pc, #268]	@ (800b630 <MainMenu+0x1fc>)
 800b522:	f7fc ffd3 	bl	80084cc <ssd1306_WriteString>
  }
  if (MenuState == Enrollment) {
 800b526:	4b43      	ldr	r3, [pc, #268]	@ (800b634 <MainMenu+0x200>)
 800b528:	781b      	ldrb	r3, [r3, #0]
 800b52a:	2b03      	cmp	r3, #3
 800b52c:	d112      	bne.n	800b554 <MainMenu+0x120>
    ssd1306_FillRectangle(49, 2, 115, 16, 1);
 800b52e:	2301      	movs	r3, #1
 800b530:	9300      	str	r3, [sp, #0]
 800b532:	2310      	movs	r3, #16
 800b534:	2273      	movs	r2, #115	@ 0x73
 800b536:	2102      	movs	r1, #2
 800b538:	2031      	movs	r0, #49	@ 0x31
 800b53a:	f7fd f871 	bl	8008620 <ssd1306_FillRectangle>
    ssd1306_SetCursor(52, 5);
 800b53e:	2105      	movs	r1, #5
 800b540:	2034      	movs	r0, #52	@ 0x34
 800b542:	f7fc ffe9 	bl	8008518 <ssd1306_SetCursor>
    ssd1306_WriteString("Enrollment", Font_6x8, 0);
 800b546:	4b36      	ldr	r3, [pc, #216]	@ (800b620 <MainMenu+0x1ec>)
 800b548:	2200      	movs	r2, #0
 800b54a:	9200      	str	r2, [sp, #0]
 800b54c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b54e:	4837      	ldr	r0, [pc, #220]	@ (800b62c <MainMenu+0x1f8>)
 800b550:	f7fc ffbc 	bl	80084cc <ssd1306_WriteString>
  }

  // Update the SSD1306 display to show the menu.
  ssd1306_UpdateScreen();
 800b554:	f7fc feae 	bl	80082b4 <ssd1306_UpdateScreen>

  while (1) {
    // If the device state is inactive, set the state to Lock and exit the loop.
    if (!DeviceState) {
 800b558:	4b37      	ldr	r3, [pc, #220]	@ (800b638 <MainMenu+0x204>)
 800b55a:	781b      	ldrb	r3, [r3, #0]
 800b55c:	f083 0301 	eor.w	r3, r3, #1
 800b560:	b2db      	uxtb	r3, r3
 800b562:	2b00      	cmp	r3, #0
 800b564:	d003      	beq.n	800b56e <MainMenu+0x13a>
      state = Lock;
 800b566:	4b35      	ldr	r3, [pc, #212]	@ (800b63c <MainMenu+0x208>)
 800b568:	2200      	movs	r2, #0
 800b56a:	701a      	strb	r2, [r3, #0]
      break;
 800b56c:	e052      	b.n	800b614 <MainMenu+0x1e0>
    }

    // Check the button state.
    uint8_t btn_state = checkButtons();
 800b56e:	f7ff fdc9 	bl	800b104 <checkButtons>
 800b572:	4603      	mov	r3, r0
 800b574:	71fb      	strb	r3, [r7, #7]

    // If the 'up' button is pressed, decrement the menu state.
    if (btn_state == 0) { // up
 800b576:	79fb      	ldrb	r3, [r7, #7]
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d110      	bne.n	800b59e <MainMenu+0x16a>
      MenuState--;
 800b57c:	4b2d      	ldr	r3, [pc, #180]	@ (800b634 <MainMenu+0x200>)
 800b57e:	781b      	ldrb	r3, [r3, #0]
 800b580:	3b01      	subs	r3, #1
 800b582:	b2da      	uxtb	r2, r3
 800b584:	4b2b      	ldr	r3, [pc, #172]	@ (800b634 <MainMenu+0x200>)
 800b586:	701a      	strb	r2, [r3, #0]
      // If MenuState underflows, set it to the last menu option.
      if (MenuState == 255) MenuState = 3;
 800b588:	4b2a      	ldr	r3, [pc, #168]	@ (800b634 <MainMenu+0x200>)
 800b58a:	781b      	ldrb	r3, [r3, #0]
 800b58c:	2bff      	cmp	r3, #255	@ 0xff
 800b58e:	d102      	bne.n	800b596 <MainMenu+0x162>
 800b590:	4b28      	ldr	r3, [pc, #160]	@ (800b634 <MainMenu+0x200>)
 800b592:	2203      	movs	r2, #3
 800b594:	701a      	strb	r2, [r3, #0]
      state = Menu;
 800b596:	4b29      	ldr	r3, [pc, #164]	@ (800b63c <MainMenu+0x208>)
 800b598:	2204      	movs	r2, #4
 800b59a:	701a      	strb	r2, [r3, #0]
      break;
 800b59c:	e03a      	b.n	800b614 <MainMenu+0x1e0>
    }
    // If the 'down' button is pressed, increment the menu state.
    else if (btn_state == 1) { // down
 800b59e:	79fb      	ldrb	r3, [r7, #7]
 800b5a0:	2b01      	cmp	r3, #1
 800b5a2:	d110      	bne.n	800b5c6 <MainMenu+0x192>
      MenuState++;
 800b5a4:	4b23      	ldr	r3, [pc, #140]	@ (800b634 <MainMenu+0x200>)
 800b5a6:	781b      	ldrb	r3, [r3, #0]
 800b5a8:	3301      	adds	r3, #1
 800b5aa:	b2da      	uxtb	r2, r3
 800b5ac:	4b21      	ldr	r3, [pc, #132]	@ (800b634 <MainMenu+0x200>)
 800b5ae:	701a      	strb	r2, [r3, #0]
      // If MenuState overflows, set it to the first menu option.
      if (MenuState == 4) MenuState = 0;
 800b5b0:	4b20      	ldr	r3, [pc, #128]	@ (800b634 <MainMenu+0x200>)
 800b5b2:	781b      	ldrb	r3, [r3, #0]
 800b5b4:	2b04      	cmp	r3, #4
 800b5b6:	d102      	bne.n	800b5be <MainMenu+0x18a>
 800b5b8:	4b1e      	ldr	r3, [pc, #120]	@ (800b634 <MainMenu+0x200>)
 800b5ba:	2200      	movs	r2, #0
 800b5bc:	701a      	strb	r2, [r3, #0]
      state = Menu;
 800b5be:	4b1f      	ldr	r3, [pc, #124]	@ (800b63c <MainMenu+0x208>)
 800b5c0:	2204      	movs	r2, #4
 800b5c2:	701a      	strb	r2, [r3, #0]
      break;
 800b5c4:	e026      	b.n	800b614 <MainMenu+0x1e0>
    }
    // If both buttons are pressed, set the state based on the current menu option.
    else if (btn_state == 2) { // both
 800b5c6:	79fb      	ldrb	r3, [r7, #7]
 800b5c8:	2b02      	cmp	r3, #2
 800b5ca:	d1c5      	bne.n	800b558 <MainMenu+0x124>
      if (MenuState == 0) state = Lock;
 800b5cc:	4b19      	ldr	r3, [pc, #100]	@ (800b634 <MainMenu+0x200>)
 800b5ce:	781b      	ldrb	r3, [r3, #0]
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d102      	bne.n	800b5da <MainMenu+0x1a6>
 800b5d4:	4b19      	ldr	r3, [pc, #100]	@ (800b63c <MainMenu+0x208>)
 800b5d6:	2200      	movs	r2, #0
 800b5d8:	701a      	strb	r2, [r3, #0]
      if (MenuState == 1) state = Reset;
 800b5da:	4b16      	ldr	r3, [pc, #88]	@ (800b634 <MainMenu+0x200>)
 800b5dc:	781b      	ldrb	r3, [r3, #0]
 800b5de:	2b01      	cmp	r3, #1
 800b5e0:	d102      	bne.n	800b5e8 <MainMenu+0x1b4>
 800b5e2:	4b16      	ldr	r3, [pc, #88]	@ (800b63c <MainMenu+0x208>)
 800b5e4:	2201      	movs	r2, #1
 800b5e6:	701a      	strb	r2, [r3, #0]
      if (MenuState == 2) state = Timeout;
 800b5e8:	4b12      	ldr	r3, [pc, #72]	@ (800b634 <MainMenu+0x200>)
 800b5ea:	781b      	ldrb	r3, [r3, #0]
 800b5ec:	2b02      	cmp	r3, #2
 800b5ee:	d102      	bne.n	800b5f6 <MainMenu+0x1c2>
 800b5f0:	4b12      	ldr	r3, [pc, #72]	@ (800b63c <MainMenu+0x208>)
 800b5f2:	2202      	movs	r2, #2
 800b5f4:	701a      	strb	r2, [r3, #0]
      if (MenuState == 3) state = Enrollment;
 800b5f6:	4b0f      	ldr	r3, [pc, #60]	@ (800b634 <MainMenu+0x200>)
 800b5f8:	781b      	ldrb	r3, [r3, #0]
 800b5fa:	2b03      	cmp	r3, #3
 800b5fc:	d102      	bne.n	800b604 <MainMenu+0x1d0>
 800b5fe:	4b0f      	ldr	r3, [pc, #60]	@ (800b63c <MainMenu+0x208>)
 800b600:	2203      	movs	r2, #3
 800b602:	701a      	strb	r2, [r3, #0]
      if (MenuState == 4) state = Menu;
 800b604:	4b0b      	ldr	r3, [pc, #44]	@ (800b634 <MainMenu+0x200>)
 800b606:	781b      	ldrb	r3, [r3, #0]
 800b608:	2b04      	cmp	r3, #4
 800b60a:	d102      	bne.n	800b612 <MainMenu+0x1de>
 800b60c:	4b0b      	ldr	r3, [pc, #44]	@ (800b63c <MainMenu+0x208>)
 800b60e:	2204      	movs	r2, #4
 800b610:	701a      	strb	r2, [r3, #0]
      break;
 800b612:	bf00      	nop
    }
  }
}
 800b614:	bf00      	nop
 800b616:	3708      	adds	r7, #8
 800b618:	46bd      	mov	sp, r7
 800b61a:	bd80      	pop	{r7, pc}
 800b61c:	0800d5e4 	.word	0x0800d5e4
 800b620:	0800f4ac 	.word	0x0800f4ac
 800b624:	0800d5f0 	.word	0x0800d5f0
 800b628:	0800d5f8 	.word	0x0800d5f8
 800b62c:	0800d600 	.word	0x0800d600
 800b630:	0800d60c 	.word	0x0800d60c
 800b634:	200002aa 	.word	0x200002aa
 800b638:	200002ac 	.word	0x200002ac
 800b63c:	200002a9 	.word	0x200002a9

0800b640 <TimeoutMenu>:

void TimeoutMenu() {
 800b640:	b580      	push	{r7, lr}
 800b642:	b086      	sub	sp, #24
 800b644:	af02      	add	r7, sp, #8
  DEBUG_PRINT("TimeoutMenu\n");
 800b646:	4818      	ldr	r0, [pc, #96]	@ (800b6a8 <TimeoutMenu+0x68>)
 800b648:	f001 f840 	bl	800c6cc <puts>
  // Static variable to store the previous reverse timer value. Initialized to the maximum 32-bit unsigned integer value.
  static uint32_t previousRevTimer = 0xFFFFFFFF;

  // Calculate the remaining timeout value by subtracting the current timer value from the timeout value.
  uint32_t RevTimer = TimeoutValue - Timer;
 800b64c:	4b17      	ldr	r3, [pc, #92]	@ (800b6ac <TimeoutMenu+0x6c>)
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	f1c3 0378 	rsb	r3, r3, #120	@ 0x78
 800b654:	60fb      	str	r3, [r7, #12]

  // If the current reverse timer value is different from the previous value, update the display.
  if (RevTimer != previousRevTimer) {
 800b656:	4b16      	ldr	r3, [pc, #88]	@ (800b6b0 <TimeoutMenu+0x70>)
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	68fa      	ldr	r2, [r7, #12]
 800b65c:	429a      	cmp	r2, r3
 800b65e:	d01e      	beq.n	800b69e <TimeoutMenu+0x5e>
    // Update the previous reverse timer value with the current value.
    previousRevTimer = RevTimer;
 800b660:	4a13      	ldr	r2, [pc, #76]	@ (800b6b0 <TimeoutMenu+0x70>)
 800b662:	68fb      	ldr	r3, [r7, #12]
 800b664:	6013      	str	r3, [r2, #0]

    // Clear the SSD1306 display.
    ssd1306_clear();
 800b666:	f7fc fd61 	bl	800812c <ssd1306_clear>

    // Set the cursor position on the SSD1306 display.
    ssd1306_SetCursor(15, 13);
 800b66a:	210d      	movs	r1, #13
 800b66c:	200f      	movs	r0, #15
 800b66e:	f7fc ff53 	bl	8008518 <ssd1306_SetCursor>

    // Display the "Timeout in " text on the SSD1306 display using Font_7x10.
    ssd1306_WriteString("Timeout in ", Font_7x10, 1);
 800b672:	4b10      	ldr	r3, [pc, #64]	@ (800b6b4 <TimeoutMenu+0x74>)
 800b674:	2201      	movs	r2, #1
 800b676:	9200      	str	r2, [sp, #0]
 800b678:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b67a:	480f      	ldr	r0, [pc, #60]	@ (800b6b8 <TimeoutMenu+0x78>)
 800b67c:	f7fc ff26 	bl	80084cc <ssd1306_WriteString>

    // Convert the reverse timer value to a string.
    char str[12];
    itoa(RevTimer, str, 10);
 800b680:	68fb      	ldr	r3, [r7, #12]
 800b682:	4639      	mov	r1, r7
 800b684:	220a      	movs	r2, #10
 800b686:	4618      	mov	r0, r3
 800b688:	f000 feaa 	bl	800c3e0 <itoa>

    // Display the reverse timer value on the SSD1306 display using Font_7x10.
    ssd1306_WriteString(str, Font_7x10, 1);
 800b68c:	4b09      	ldr	r3, [pc, #36]	@ (800b6b4 <TimeoutMenu+0x74>)
 800b68e:	4638      	mov	r0, r7
 800b690:	2201      	movs	r2, #1
 800b692:	9200      	str	r2, [sp, #0]
 800b694:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b696:	f7fc ff19 	bl	80084cc <ssd1306_WriteString>

    // Update the SSD1306 display to show the new content.
    ssd1306_UpdateScreen();
 800b69a:	f7fc fe0b 	bl	80082b4 <ssd1306_UpdateScreen>
  }
}
 800b69e:	bf00      	nop
 800b6a0:	3710      	adds	r7, #16
 800b6a2:	46bd      	mov	sp, r7
 800b6a4:	bd80      	pop	{r7, pc}
 800b6a6:	bf00      	nop
 800b6a8:	0800d614 	.word	0x0800d614
 800b6ac:	200002b0 	.word	0x200002b0
 800b6b0:	200000fc 	.word	0x200000fc
 800b6b4:	0800f4b8 	.word	0x0800f4b8
 800b6b8:	0800d620 	.word	0x0800d620

0800b6bc <Enroll>:

void Enroll() {
 800b6bc:	b580      	push	{r7, lr}
 800b6be:	b098      	sub	sp, #96	@ 0x60
 800b6c0:	af04      	add	r7, sp, #16
  // Print "Enroll" for debugging purposes.
  DEBUG_PRINT("Enroll\n");
 800b6c2:	4824      	ldr	r0, [pc, #144]	@ (800b754 <Enroll+0x98>)
 800b6c4:	f001 f802 	bl	800c6cc <puts>

  // Clear the SSD1306 display.
  ssd1306_clear();
 800b6c8:	f7fc fd30 	bl	800812c <ssd1306_clear>

  // Display "Enter new pin" at the specified coordinates using Font_7x10.
  ssd1306_SetCursor(20, 2);
 800b6cc:	2102      	movs	r1, #2
 800b6ce:	2014      	movs	r0, #20
 800b6d0:	f7fc ff22 	bl	8008518 <ssd1306_SetCursor>
  ssd1306_WriteString("Enter new pin", Font_7x10, 1);
 800b6d4:	4b20      	ldr	r3, [pc, #128]	@ (800b758 <Enroll+0x9c>)
 800b6d6:	2201      	movs	r2, #1
 800b6d8:	9200      	str	r2, [sp, #0]
 800b6da:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b6dc:	481f      	ldr	r0, [pc, #124]	@ (800b75c <Enroll+0xa0>)
 800b6de:	f7fc fef5 	bl	80084cc <ssd1306_WriteString>

  // Draw a filled rectangle to create a box for the PIN input.
  //ssd1306_FillRectangle(3, 10, 122, 10, 1);

  // Draw lines to separate individual PIN input positions.
  for (int i = 0; i < 12; i++) {
 800b6e2:	2300      	movs	r3, #0
 800b6e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b6e6:	e01a      	b.n	800b71e <Enroll+0x62>
    ssd1306_Line(6 + i*10, 27, 12 + i*10, 27, 1);
 800b6e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b6ea:	b2db      	uxtb	r3, r3
 800b6ec:	461a      	mov	r2, r3
 800b6ee:	0092      	lsls	r2, r2, #2
 800b6f0:	4413      	add	r3, r2
 800b6f2:	005b      	lsls	r3, r3, #1
 800b6f4:	b2db      	uxtb	r3, r3
 800b6f6:	3306      	adds	r3, #6
 800b6f8:	b2d8      	uxtb	r0, r3
 800b6fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b6fc:	b2db      	uxtb	r3, r3
 800b6fe:	461a      	mov	r2, r3
 800b700:	0092      	lsls	r2, r2, #2
 800b702:	4413      	add	r3, r2
 800b704:	005b      	lsls	r3, r3, #1
 800b706:	b2db      	uxtb	r3, r3
 800b708:	330c      	adds	r3, #12
 800b70a:	b2da      	uxtb	r2, r3
 800b70c:	2301      	movs	r3, #1
 800b70e:	9300      	str	r3, [sp, #0]
 800b710:	231b      	movs	r3, #27
 800b712:	211b      	movs	r1, #27
 800b714:	f7fc ff18 	bl	8008548 <ssd1306_Line>
  for (int i = 0; i < 12; i++) {
 800b718:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b71a:	3301      	adds	r3, #1
 800b71c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b71e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b720:	2b0b      	cmp	r3, #11
 800b722:	dde1      	ble.n	800b6e8 <Enroll+0x2c>
  }

  // Set the cursor to the first PIN input position and display '!' as a starting character.
  ssd1306_SetCursor(6, 18);
 800b724:	2112      	movs	r1, #18
 800b726:	2006      	movs	r0, #6
 800b728:	f7fc fef6 	bl	8008518 <ssd1306_SetCursor>
  ssd1306_WriteChar('!', Font_7x10, 1);
 800b72c:	4b0a      	ldr	r3, [pc, #40]	@ (800b758 <Enroll+0x9c>)
 800b72e:	2201      	movs	r2, #1
 800b730:	9200      	str	r2, [sp, #0]
 800b732:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b734:	2021      	movs	r0, #33	@ 0x21
 800b736:	f7fc fe39 	bl	80083ac <ssd1306_WriteChar>

  // Update the SSD1306 display to show the initial PIN entry screen.
  ssd1306_UpdateScreen();
 800b73a:	f7fc fdbb 	bl	80082b4 <ssd1306_UpdateScreen>

  // Initialize the flag to true to start the while loop, index to 0, and temp_num to 33 (ASCII '!')
  bool flag = true;
 800b73e:	2301      	movs	r3, #1
 800b740:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  uint8_t index = 0;
 800b744:	2300      	movs	r3, #0
 800b746:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  uint8_t temp_num = 33;
 800b74a:	2321      	movs	r3, #33	@ 0x21
 800b74c:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49

  // Loop to handle PIN entry until the flag is set to false.
  while (flag) {
 800b750:	e1a6      	b.n	800baa0 <Enroll+0x3e4>
 800b752:	bf00      	nop
 800b754:	0800d62c 	.word	0x0800d62c
 800b758:	0800f4b8 	.word	0x0800f4b8
 800b75c:	0800d634 	.word	0x0800d634
    // Check the state of the buttons.
    uint8_t temp = checkButtons();
 800b760:	f7ff fcd0 	bl	800b104 <checkButtons>
 800b764:	4603      	mov	r3, r0
 800b766:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48

    // If the 'up' button is pressed, increment temp_num and wrap around if it exceeds 126.
    if (temp == 0) {
 800b76a:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d122      	bne.n	800b7b8 <Enroll+0xfc>
      temp_num++;
 800b772:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 800b776:	3301      	adds	r3, #1
 800b778:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
      if (temp_num == 127) temp_num = 33;
 800b77c:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 800b780:	2b7f      	cmp	r3, #127	@ 0x7f
 800b782:	d102      	bne.n	800b78a <Enroll+0xce>
 800b784:	2321      	movs	r3, #33	@ 0x21
 800b786:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
      ssd1306_SetCursor(6 + index*10, 18);
 800b78a:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 800b78e:	461a      	mov	r2, r3
 800b790:	0092      	lsls	r2, r2, #2
 800b792:	4413      	add	r3, r2
 800b794:	005b      	lsls	r3, r3, #1
 800b796:	b2db      	uxtb	r3, r3
 800b798:	3306      	adds	r3, #6
 800b79a:	b2db      	uxtb	r3, r3
 800b79c:	2112      	movs	r1, #18
 800b79e:	4618      	mov	r0, r3
 800b7a0:	f7fc feba 	bl	8008518 <ssd1306_SetCursor>
      ssd1306_WriteChar((char)temp_num, Font_7x10, 1);
 800b7a4:	4bc3      	ldr	r3, [pc, #780]	@ (800bab4 <Enroll+0x3f8>)
 800b7a6:	f897 0049 	ldrb.w	r0, [r7, #73]	@ 0x49
 800b7aa:	2201      	movs	r2, #1
 800b7ac:	9200      	str	r2, [sp, #0]
 800b7ae:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b7b0:	f7fc fdfc 	bl	80083ac <ssd1306_WriteChar>
      ssd1306_UpdateScreen();
 800b7b4:	f7fc fd7e 	bl	80082b4 <ssd1306_UpdateScreen>
    }

    // If the 'down' button is pressed, decrement temp_num and wrap around if it goes below 33.
    if (temp == 1) {
 800b7b8:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 800b7bc:	2b01      	cmp	r3, #1
 800b7be:	d122      	bne.n	800b806 <Enroll+0x14a>
      temp_num--;
 800b7c0:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 800b7c4:	3b01      	subs	r3, #1
 800b7c6:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
      if (temp_num < 33) temp_num = 126;
 800b7ca:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 800b7ce:	2b20      	cmp	r3, #32
 800b7d0:	d802      	bhi.n	800b7d8 <Enroll+0x11c>
 800b7d2:	237e      	movs	r3, #126	@ 0x7e
 800b7d4:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
      ssd1306_SetCursor(6 + index*10, 18);
 800b7d8:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 800b7dc:	461a      	mov	r2, r3
 800b7de:	0092      	lsls	r2, r2, #2
 800b7e0:	4413      	add	r3, r2
 800b7e2:	005b      	lsls	r3, r3, #1
 800b7e4:	b2db      	uxtb	r3, r3
 800b7e6:	3306      	adds	r3, #6
 800b7e8:	b2db      	uxtb	r3, r3
 800b7ea:	2112      	movs	r1, #18
 800b7ec:	4618      	mov	r0, r3
 800b7ee:	f7fc fe93 	bl	8008518 <ssd1306_SetCursor>
      ssd1306_WriteChar((char)temp_num, Font_7x10, 1);
 800b7f2:	4bb0      	ldr	r3, [pc, #704]	@ (800bab4 <Enroll+0x3f8>)
 800b7f4:	f897 0049 	ldrb.w	r0, [r7, #73]	@ 0x49
 800b7f8:	2201      	movs	r2, #1
 800b7fa:	9200      	str	r2, [sp, #0]
 800b7fc:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b7fe:	f7fc fdd5 	bl	80083ac <ssd1306_WriteChar>
      ssd1306_UpdateScreen();
 800b802:	f7fc fd57 	bl	80082b4 <ssd1306_UpdateScreen>
    }

    // If both buttons are pressed, handle the PIN entry.
    if (temp == 2) {
 800b806:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 800b80a:	2b02      	cmp	r3, #2
 800b80c:	f040 8148 	bne.w	800baa0 <Enroll+0x3e4>
      // If the index is 11 (last position), save the entered PIN and exit the loop.
      if (index == 11) {
 800b810:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 800b814:	2b0b      	cmp	r3, #11
 800b816:	f040 8108 	bne.w	800ba2a <Enroll+0x36e>
        password[index] = temp_num;
 800b81a:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 800b81e:	49a6      	ldr	r1, [pc, #664]	@ (800bab8 <Enroll+0x3fc>)
 800b820:	f897 2049 	ldrb.w	r2, [r7, #73]	@ 0x49
 800b824:	54ca      	strb	r2, [r1, r3]
        flag = false;
 800b826:	2300      	movs	r3, #0
 800b828:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
        ssd1306_SetCursor(6 + index*10, 18);
 800b82c:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 800b830:	461a      	mov	r2, r3
 800b832:	0092      	lsls	r2, r2, #2
 800b834:	4413      	add	r3, r2
 800b836:	005b      	lsls	r3, r3, #1
 800b838:	b2db      	uxtb	r3, r3
 800b83a:	3306      	adds	r3, #6
 800b83c:	b2db      	uxtb	r3, r3
 800b83e:	2112      	movs	r1, #18
 800b840:	4618      	mov	r0, r3
 800b842:	f7fc fe69 	bl	8008518 <ssd1306_SetCursor>
        ssd1306_WriteChar('*', Font_7x10, 1);
 800b846:	4b9b      	ldr	r3, [pc, #620]	@ (800bab4 <Enroll+0x3f8>)
 800b848:	2201      	movs	r2, #1
 800b84a:	9200      	str	r2, [sp, #0]
 800b84c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b84e:	202a      	movs	r0, #42	@ 0x2a
 800b850:	f7fc fdac 	bl	80083ac <ssd1306_WriteChar>
        ssd1306_UpdateScreen();
 800b854:	f7fc fd2e 	bl	80082b4 <ssd1306_UpdateScreen>
        printArray("Input password ", password, sizeof(password));
 800b858:	220c      	movs	r2, #12
 800b85a:	4997      	ldr	r1, [pc, #604]	@ (800bab8 <Enroll+0x3fc>)
 800b85c:	4897      	ldr	r0, [pc, #604]	@ (800babc <Enroll+0x400>)
 800b85e:	f000 fd7f 	bl	800c360 <printArray>
        // Read the number of users from flash memory.
        MY_FLASH_ReadN(Nusers_address, &user_num, 1, DATA_TYPE_8);
 800b862:	2300      	movs	r3, #0
 800b864:	2201      	movs	r2, #1
 800b866:	4996      	ldr	r1, [pc, #600]	@ (800bac0 <Enroll+0x404>)
 800b868:	2001      	movs	r0, #1
 800b86a:	f7fc fbb3 	bl	8007fd4 <MY_FLASH_ReadN>
        DEBUG_PRINT("Num of Users %d\n",user_num);
 800b86e:	4b94      	ldr	r3, [pc, #592]	@ (800bac0 <Enroll+0x404>)
 800b870:	781b      	ldrb	r3, [r3, #0]
 800b872:	4619      	mov	r1, r3
 800b874:	4893      	ldr	r0, [pc, #588]	@ (800bac4 <Enroll+0x408>)
 800b876:	f000 feb9 	bl	800c5ec <iprintf>
        // Generate and save a local salt.
        Get_rng(&hrng, LocalSalt, 2);
 800b87a:	2202      	movs	r2, #2
 800b87c:	4992      	ldr	r1, [pc, #584]	@ (800bac8 <Enroll+0x40c>)
 800b87e:	4893      	ldr	r0, [pc, #588]	@ (800bacc <Enroll+0x410>)
 800b880:	f000 fca8 	bl	800c1d4 <Get_rng>
        printArray("Local salt ", LocalSalt, sizeof(LocalSalt));
 800b884:	2208      	movs	r2, #8
 800b886:	4990      	ldr	r1, [pc, #576]	@ (800bac8 <Enroll+0x40c>)
 800b888:	4891      	ldr	r0, [pc, #580]	@ (800bad0 <Enroll+0x414>)
 800b88a:	f000 fd69 	bl	800c360 <printArray>
        write_flash(MemDatastartpoint + (user_num * 72), LocalSalt, 8);
 800b88e:	4b8c      	ldr	r3, [pc, #560]	@ (800bac0 <Enroll+0x404>)
 800b890:	781b      	ldrb	r3, [r3, #0]
 800b892:	461a      	mov	r2, r3
 800b894:	4613      	mov	r3, r2
 800b896:	00db      	lsls	r3, r3, #3
 800b898:	4413      	add	r3, r2
 800b89a:	00db      	lsls	r3, r3, #3
 800b89c:	330b      	adds	r3, #11
 800b89e:	2208      	movs	r2, #8
 800b8a0:	4989      	ldr	r1, [pc, #548]	@ (800bac8 <Enroll+0x40c>)
 800b8a2:	4618      	mov	r0, r3
 800b8a4:	f7fc fbf2 	bl	800808c <write_flash>

        // Generate and save an initialization vector (IV).
        Get_rng(&hrng, IV, 4);
 800b8a8:	2204      	movs	r2, #4
 800b8aa:	498a      	ldr	r1, [pc, #552]	@ (800bad4 <Enroll+0x418>)
 800b8ac:	4887      	ldr	r0, [pc, #540]	@ (800bacc <Enroll+0x410>)
 800b8ae:	f000 fc91 	bl	800c1d4 <Get_rng>
        printArray("IV ", IV, sizeof(IV));
 800b8b2:	2210      	movs	r2, #16
 800b8b4:	4987      	ldr	r1, [pc, #540]	@ (800bad4 <Enroll+0x418>)
 800b8b6:	4888      	ldr	r0, [pc, #544]	@ (800bad8 <Enroll+0x41c>)
 800b8b8:	f000 fd52 	bl	800c360 <printArray>
        write_flash(MemDatastartpoint + 8 + (user_num * 72), IV, 16);
 800b8bc:	4b80      	ldr	r3, [pc, #512]	@ (800bac0 <Enroll+0x404>)
 800b8be:	781b      	ldrb	r3, [r3, #0]
 800b8c0:	461a      	mov	r2, r3
 800b8c2:	4613      	mov	r3, r2
 800b8c4:	00db      	lsls	r3, r3, #3
 800b8c6:	4413      	add	r3, r2
 800b8c8:	00db      	lsls	r3, r3, #3
 800b8ca:	3313      	adds	r3, #19
 800b8cc:	2210      	movs	r2, #16
 800b8ce:	4981      	ldr	r1, [pc, #516]	@ (800bad4 <Enroll+0x418>)
 800b8d0:	4618      	mov	r0, r3
 800b8d2:	f7fc fbdb 	bl	800808c <write_flash>

        // Read the global salt from flash memory.
        MY_FLASH_ReadN(GlobalSalt_address, GlobalSalt, 8, DATA_TYPE_8);
 800b8d6:	2300      	movs	r3, #0
 800b8d8:	2208      	movs	r2, #8
 800b8da:	4980      	ldr	r1, [pc, #512]	@ (800badc <Enroll+0x420>)
 800b8dc:	2003      	movs	r0, #3
 800b8de:	f7fc fb79 	bl	8007fd4 <MY_FLASH_ReadN>
        printArray("GlobalSalt ", GlobalSalt, sizeof(GlobalSalt));
 800b8e2:	2208      	movs	r2, #8
 800b8e4:	497d      	ldr	r1, [pc, #500]	@ (800badc <Enroll+0x420>)
 800b8e6:	487e      	ldr	r0, [pc, #504]	@ (800bae0 <Enroll+0x424>)
 800b8e8:	f000 fd3a 	bl	800c360 <printArray>
        // Concatenate the global salt and password, and compute the SHA-256 hash.
        uint8_t temp[20];
        memcpy(temp, GlobalSalt, sizeof(GlobalSalt));
 800b8ec:	4a7b      	ldr	r2, [pc, #492]	@ (800badc <Enroll+0x420>)
 800b8ee:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800b8f2:	6810      	ldr	r0, [r2, #0]
 800b8f4:	6851      	ldr	r1, [r2, #4]
 800b8f6:	c303      	stmia	r3!, {r0, r1}
        memcpy(temp + sizeof(GlobalSalt), password, sizeof(password));
 800b8f8:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800b8fc:	3308      	adds	r3, #8
 800b8fe:	4a6e      	ldr	r2, [pc, #440]	@ (800bab8 <Enroll+0x3fc>)
 800b900:	6810      	ldr	r0, [r2, #0]
 800b902:	6851      	ldr	r1, [r2, #4]
 800b904:	6892      	ldr	r2, [r2, #8]
 800b906:	6018      	str	r0, [r3, #0]
 800b908:	6059      	str	r1, [r3, #4]
 800b90a:	609a      	str	r2, [r3, #8]
        printArray("Concatenated password ", temp, sizeof(temp));
 800b90c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800b910:	2214      	movs	r2, #20
 800b912:	4619      	mov	r1, r3
 800b914:	4873      	ldr	r0, [pc, #460]	@ (800bae4 <Enroll+0x428>)
 800b916:	f000 fd23 	bl	800c360 <printArray>
        uint8_t computedSha256[32];
        sha256(temp, computedSha256, sizeof(temp));
 800b91a:	4639      	mov	r1, r7
 800b91c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800b920:	2214      	movs	r2, #20
 800b922:	4618      	mov	r0, r3
 800b924:	f7ff fca6 	bl	800b274 <sha256>
        printArray("Hashed password ", computedSha256, sizeof(computedSha256));
 800b928:	463b      	mov	r3, r7
 800b92a:	2220      	movs	r2, #32
 800b92c:	4619      	mov	r1, r3
 800b92e:	486e      	ldr	r0, [pc, #440]	@ (800bae8 <Enroll+0x42c>)
 800b930:	f000 fd16 	bl	800c360 <printArray>
        // Save the computed SHA-256 hash of the password.
        write_flash(MemDatastartpoint + 8 + 16 + (user_num * 72), computedSha256, 32);
 800b934:	4b62      	ldr	r3, [pc, #392]	@ (800bac0 <Enroll+0x404>)
 800b936:	781b      	ldrb	r3, [r3, #0]
 800b938:	461a      	mov	r2, r3
 800b93a:	4613      	mov	r3, r2
 800b93c:	00db      	lsls	r3, r3, #3
 800b93e:	4413      	add	r3, r2
 800b940:	00db      	lsls	r3, r3, #3
 800b942:	3323      	adds	r3, #35	@ 0x23
 800b944:	4618      	mov	r0, r3
 800b946:	463b      	mov	r3, r7
 800b948:	2220      	movs	r2, #32
 800b94a:	4619      	mov	r1, r3
 800b94c:	f7fc fb9e 	bl	800808c <write_flash>

        // Generate a master key.
        Get_rng(&hrng ,MasterKey, 4);
 800b950:	2204      	movs	r2, #4
 800b952:	4966      	ldr	r1, [pc, #408]	@ (800baec <Enroll+0x430>)
 800b954:	485d      	ldr	r0, [pc, #372]	@ (800bacc <Enroll+0x410>)
 800b956:	f000 fc3d 	bl	800c1d4 <Get_rng>
        printArray("MasterKey ", MasterKey, sizeof(MasterKey));
 800b95a:	2210      	movs	r2, #16
 800b95c:	4963      	ldr	r1, [pc, #396]	@ (800baec <Enroll+0x430>)
 800b95e:	4864      	ldr	r0, [pc, #400]	@ (800baf0 <Enroll+0x434>)
 800b960:	f000 fcfe 	bl	800c360 <printArray>
        // Concatenate the local salt and password, and compute the SHA-256 hash.
        memcpy(temp, LocalSalt, sizeof(LocalSalt));
 800b964:	4a58      	ldr	r2, [pc, #352]	@ (800bac8 <Enroll+0x40c>)
 800b966:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800b96a:	6810      	ldr	r0, [r2, #0]
 800b96c:	6851      	ldr	r1, [r2, #4]
 800b96e:	c303      	stmia	r3!, {r0, r1}
        memcpy(temp + sizeof(LocalSalt), password, sizeof(password));
 800b970:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800b974:	3308      	adds	r3, #8
 800b976:	4a50      	ldr	r2, [pc, #320]	@ (800bab8 <Enroll+0x3fc>)
 800b978:	6810      	ldr	r0, [r2, #0]
 800b97a:	6851      	ldr	r1, [r2, #4]
 800b97c:	6892      	ldr	r2, [r2, #8]
 800b97e:	6018      	str	r0, [r3, #0]
 800b980:	6059      	str	r1, [r3, #4]
 800b982:	609a      	str	r2, [r3, #8]
        printArray("Concatenated masterKey ", temp, sizeof(temp));
 800b984:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800b988:	2214      	movs	r2, #20
 800b98a:	4619      	mov	r1, r3
 800b98c:	4859      	ldr	r0, [pc, #356]	@ (800baf4 <Enroll+0x438>)
 800b98e:	f000 fce7 	bl	800c360 <printArray>
        sha256(temp, computedSha256, sizeof(temp));
 800b992:	4639      	mov	r1, r7
 800b994:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800b998:	2214      	movs	r2, #20
 800b99a:	4618      	mov	r0, r3
 800b99c:	f7ff fc6a 	bl	800b274 <sha256>
        printArray("Hashed masterKey ", temp, sizeof(temp));
 800b9a0:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800b9a4:	2214      	movs	r2, #20
 800b9a6:	4619      	mov	r1, r3
 800b9a8:	4853      	ldr	r0, [pc, #332]	@ (800baf8 <Enroll+0x43c>)
 800b9aa:	f000 fcd9 	bl	800c360 <printArray>
        // Encrypt the master key using AES-CBC.
        uint8_t computedAES[16];
        AESCBC(MasterKey, sizeof(MasterKey), computedSha256, sizeof(computedSha256), IV, sizeof(IV), computedAES);
 800b9ae:	463a      	mov	r2, r7
 800b9b0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b9b4:	9302      	str	r3, [sp, #8]
 800b9b6:	2310      	movs	r3, #16
 800b9b8:	9301      	str	r3, [sp, #4]
 800b9ba:	4b46      	ldr	r3, [pc, #280]	@ (800bad4 <Enroll+0x418>)
 800b9bc:	9300      	str	r3, [sp, #0]
 800b9be:	2320      	movs	r3, #32
 800b9c0:	2110      	movs	r1, #16
 800b9c2:	484a      	ldr	r0, [pc, #296]	@ (800baec <Enroll+0x430>)
 800b9c4:	f7ff fc70 	bl	800b2a8 <AESCBC>
        printArray("Encrypted masterKey ", computedAES, sizeof(computedAES));
 800b9c8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b9cc:	2210      	movs	r2, #16
 800b9ce:	4619      	mov	r1, r3
 800b9d0:	484a      	ldr	r0, [pc, #296]	@ (800bafc <Enroll+0x440>)
 800b9d2:	f000 fcc5 	bl	800c360 <printArray>
        // Save the encrypted master key.
        write_flash(MemDatastartpoint + 8 + 16 + 32 + (user_num * 72), computedAES, 16);
 800b9d6:	4b3a      	ldr	r3, [pc, #232]	@ (800bac0 <Enroll+0x404>)
 800b9d8:	781b      	ldrb	r3, [r3, #0]
 800b9da:	461a      	mov	r2, r3
 800b9dc:	4613      	mov	r3, r2
 800b9de:	00db      	lsls	r3, r3, #3
 800b9e0:	4413      	add	r3, r2
 800b9e2:	00db      	lsls	r3, r3, #3
 800b9e4:	3343      	adds	r3, #67	@ 0x43
 800b9e6:	4618      	mov	r0, r3
 800b9e8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b9ec:	2210      	movs	r2, #16
 800b9ee:	4619      	mov	r1, r3
 800b9f0:	f7fc fb4c 	bl	800808c <write_flash>

        // Update the "brand new" status in flash memory.
        uint8_t value = 1;
 800b9f4:	2301      	movs	r3, #1
 800b9f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        write_flash(BrandNew_address, &value, 1);
 800b9fa:	f107 0323 	add.w	r3, r7, #35	@ 0x23
 800b9fe:	2201      	movs	r2, #1
 800ba00:	4619      	mov	r1, r3
 800ba02:	2000      	movs	r0, #0
 800ba04:	f7fc fb42 	bl	800808c <write_flash>

        // Increment and save the number of users.
        user_num++;
 800ba08:	4b2d      	ldr	r3, [pc, #180]	@ (800bac0 <Enroll+0x404>)
 800ba0a:	781b      	ldrb	r3, [r3, #0]
 800ba0c:	3301      	adds	r3, #1
 800ba0e:	b2da      	uxtb	r2, r3
 800ba10:	4b2b      	ldr	r3, [pc, #172]	@ (800bac0 <Enroll+0x404>)
 800ba12:	701a      	strb	r2, [r3, #0]
        write_flash(Nusers_address, &user_num, 1);
 800ba14:	2201      	movs	r2, #1
 800ba16:	492a      	ldr	r1, [pc, #168]	@ (800bac0 <Enroll+0x404>)
 800ba18:	2001      	movs	r0, #1
 800ba1a:	f7fc fb37 	bl	800808c <write_flash>

        // Blink to indicate successful enrollment and clear the display.
        //blink();
        ssd1306_clear();
 800ba1e:	f7fc fb85 	bl	800812c <ssd1306_clear>

        // Set the system state to Lock.
        state = Lock;
 800ba22:	4b37      	ldr	r3, [pc, #220]	@ (800bb00 <Enroll+0x444>)
 800ba24:	2200      	movs	r2, #0
 800ba26:	701a      	strb	r2, [r3, #0]
 800ba28:	e03a      	b.n	800baa0 <Enroll+0x3e4>
      } else {
        // Save the entered character in the password array and move to the next position.
        password[index] = temp_num;
 800ba2a:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 800ba2e:	4922      	ldr	r1, [pc, #136]	@ (800bab8 <Enroll+0x3fc>)
 800ba30:	f897 2049 	ldrb.w	r2, [r7, #73]	@ 0x49
 800ba34:	54ca      	strb	r2, [r1, r3]
        temp_num = 33;
 800ba36:	2321      	movs	r3, #33	@ 0x21
 800ba38:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
        ssd1306_SetCursor(6 + index*10, 18);
 800ba3c:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 800ba40:	461a      	mov	r2, r3
 800ba42:	0092      	lsls	r2, r2, #2
 800ba44:	4413      	add	r3, r2
 800ba46:	005b      	lsls	r3, r3, #1
 800ba48:	b2db      	uxtb	r3, r3
 800ba4a:	3306      	adds	r3, #6
 800ba4c:	b2db      	uxtb	r3, r3
 800ba4e:	2112      	movs	r1, #18
 800ba50:	4618      	mov	r0, r3
 800ba52:	f7fc fd61 	bl	8008518 <ssd1306_SetCursor>
        ssd1306_WriteChar('*', Font_7x10, 1);
 800ba56:	4b17      	ldr	r3, [pc, #92]	@ (800bab4 <Enroll+0x3f8>)
 800ba58:	2201      	movs	r2, #1
 800ba5a:	9200      	str	r2, [sp, #0]
 800ba5c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800ba5e:	202a      	movs	r0, #42	@ 0x2a
 800ba60:	f7fc fca4 	bl	80083ac <ssd1306_WriteChar>
        ssd1306_UpdateScreen();
 800ba64:	f7fc fc26 	bl	80082b4 <ssd1306_UpdateScreen>
        index++;
 800ba68:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 800ba6c:	3301      	adds	r3, #1
 800ba6e:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
        ssd1306_SetCursor(6 + index*10, 18);
 800ba72:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 800ba76:	461a      	mov	r2, r3
 800ba78:	0092      	lsls	r2, r2, #2
 800ba7a:	4413      	add	r3, r2
 800ba7c:	005b      	lsls	r3, r3, #1
 800ba7e:	b2db      	uxtb	r3, r3
 800ba80:	3306      	adds	r3, #6
 800ba82:	b2db      	uxtb	r3, r3
 800ba84:	2112      	movs	r1, #18
 800ba86:	4618      	mov	r0, r3
 800ba88:	f7fc fd46 	bl	8008518 <ssd1306_SetCursor>
        ssd1306_WriteChar((char)temp_num, Font_7x10, 1);
 800ba8c:	4b09      	ldr	r3, [pc, #36]	@ (800bab4 <Enroll+0x3f8>)
 800ba8e:	f897 0049 	ldrb.w	r0, [r7, #73]	@ 0x49
 800ba92:	2201      	movs	r2, #1
 800ba94:	9200      	str	r2, [sp, #0]
 800ba96:	cb0e      	ldmia	r3, {r1, r2, r3}
 800ba98:	f7fc fc88 	bl	80083ac <ssd1306_WriteChar>
        ssd1306_UpdateScreen();
 800ba9c:	f7fc fc0a 	bl	80082b4 <ssd1306_UpdateScreen>
  while (flag) {
 800baa0:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	f47f ae5b 	bne.w	800b760 <Enroll+0xa4>
      }
    }
  }
}
 800baaa:	bf00      	nop
 800baac:	bf00      	nop
 800baae:	3750      	adds	r7, #80	@ 0x50
 800bab0:	46bd      	mov	sp, r7
 800bab2:	bd80      	pop	{r7, pc}
 800bab4:	0800f4b8 	.word	0x0800f4b8
 800bab8:	20000254 	.word	0x20000254
 800babc:	0800d644 	.word	0x0800d644
 800bac0:	20000270 	.word	0x20000270
 800bac4:	0800d654 	.word	0x0800d654
 800bac8:	2000023c 	.word	0x2000023c
 800bacc:	200001d8 	.word	0x200001d8
 800bad0:	0800d668 	.word	0x0800d668
 800bad4:	20000244 	.word	0x20000244
 800bad8:	0800d674 	.word	0x0800d674
 800badc:	20000234 	.word	0x20000234
 800bae0:	0800d678 	.word	0x0800d678
 800bae4:	0800d684 	.word	0x0800d684
 800bae8:	0800d69c 	.word	0x0800d69c
 800baec:	20000260 	.word	0x20000260
 800baf0:	0800d6b0 	.word	0x0800d6b0
 800baf4:	0800d6bc 	.word	0x0800d6bc
 800baf8:	0800d6d4 	.word	0x0800d6d4
 800bafc:	0800d6e8 	.word	0x0800d6e8
 800bb00:	200002a9 	.word	0x200002a9

0800bb04 <LockDevice>:

void LockDevice() {
 800bb04:	b580      	push	{r7, lr}
 800bb06:	b094      	sub	sp, #80	@ 0x50
 800bb08:	af04      	add	r7, sp, #16
  DEBUG_PRINT("LockDevice\n");
 800bb0a:	48ac      	ldr	r0, [pc, #688]	@ (800bdbc <LockDevice+0x2b8>)
 800bb0c:	f000 fdde 	bl	800c6cc <puts>
  // Set the device and timer states to false, indicating the device is locked and the timer is inactive.
  DeviceState = false;
 800bb10:	4bab      	ldr	r3, [pc, #684]	@ (800bdc0 <LockDevice+0x2bc>)
 800bb12:	2200      	movs	r2, #0
 800bb14:	701a      	strb	r2, [r3, #0]
  TimerState = false;
 800bb16:	4bab      	ldr	r3, [pc, #684]	@ (800bdc4 <LockDevice+0x2c0>)
 800bb18:	2200      	movs	r2, #0
 800bb1a:	701a      	strb	r2, [r3, #0]

  // Clear the SSD1306 display.
  ssd1306_clear();
 800bb1c:	f7fc fb06 	bl	800812c <ssd1306_clear>

  // Display "Enter pin" at the specified coordinates using Font_7x10.
  ssd1306_SetCursor(32, 2);
 800bb20:	2102      	movs	r1, #2
 800bb22:	2020      	movs	r0, #32
 800bb24:	f7fc fcf8 	bl	8008518 <ssd1306_SetCursor>
  ssd1306_WriteString("Enter pin", Font_7x10, 1);
 800bb28:	4ba7      	ldr	r3, [pc, #668]	@ (800bdc8 <LockDevice+0x2c4>)
 800bb2a:	2201      	movs	r2, #1
 800bb2c:	9200      	str	r2, [sp, #0]
 800bb2e:	cb0e      	ldmia	r3, {r1, r2, r3}
 800bb30:	48a6      	ldr	r0, [pc, #664]	@ (800bdcc <LockDevice+0x2c8>)
 800bb32:	f7fc fccb 	bl	80084cc <ssd1306_WriteString>

  // Draw a filled rectangle to create a box for the PIN input.
  //ssd1306_FillRectangle(3, 20, 122, 30, 1);

  // Draw lines to separate individual PIN input positions.
  for (int i = 0; i < 12; i++) {
 800bb36:	2300      	movs	r3, #0
 800bb38:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bb3a:	e01a      	b.n	800bb72 <LockDevice+0x6e>
    ssd1306_Line(6 + i*10, 27, 12 + i*10, 27, 1);
 800bb3c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bb3e:	b2db      	uxtb	r3, r3
 800bb40:	461a      	mov	r2, r3
 800bb42:	0092      	lsls	r2, r2, #2
 800bb44:	4413      	add	r3, r2
 800bb46:	005b      	lsls	r3, r3, #1
 800bb48:	b2db      	uxtb	r3, r3
 800bb4a:	3306      	adds	r3, #6
 800bb4c:	b2d8      	uxtb	r0, r3
 800bb4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bb50:	b2db      	uxtb	r3, r3
 800bb52:	461a      	mov	r2, r3
 800bb54:	0092      	lsls	r2, r2, #2
 800bb56:	4413      	add	r3, r2
 800bb58:	005b      	lsls	r3, r3, #1
 800bb5a:	b2db      	uxtb	r3, r3
 800bb5c:	330c      	adds	r3, #12
 800bb5e:	b2da      	uxtb	r2, r3
 800bb60:	2301      	movs	r3, #1
 800bb62:	9300      	str	r3, [sp, #0]
 800bb64:	231b      	movs	r3, #27
 800bb66:	211b      	movs	r1, #27
 800bb68:	f7fc fcee 	bl	8008548 <ssd1306_Line>
  for (int i = 0; i < 12; i++) {
 800bb6c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bb6e:	3301      	adds	r3, #1
 800bb70:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bb72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bb74:	2b0b      	cmp	r3, #11
 800bb76:	dde1      	ble.n	800bb3c <LockDevice+0x38>
  }

  // Set the cursor to the first PIN input position and display '!' as a starting character.
  ssd1306_SetCursor(6, 18);
 800bb78:	2112      	movs	r1, #18
 800bb7a:	2006      	movs	r0, #6
 800bb7c:	f7fc fccc 	bl	8008518 <ssd1306_SetCursor>
  ssd1306_WriteChar('!', Font_7x10, 1);
 800bb80:	4b91      	ldr	r3, [pc, #580]	@ (800bdc8 <LockDevice+0x2c4>)
 800bb82:	2201      	movs	r2, #1
 800bb84:	9200      	str	r2, [sp, #0]
 800bb86:	cb0e      	ldmia	r3, {r1, r2, r3}
 800bb88:	2021      	movs	r0, #33	@ 0x21
 800bb8a:	f7fc fc0f 	bl	80083ac <ssd1306_WriteChar>

  // Update the SSD1306 display to show the initial PIN entry screen.
  ssd1306_UpdateScreen();
 800bb8e:	f7fc fb91 	bl	80082b4 <ssd1306_UpdateScreen>

  // Initialize the flag to true to start the while loop, index to 0, and temp_num to 33 (ASCII '!').
  bool flag = true;
 800bb92:	2301      	movs	r3, #1
 800bb94:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  uint8_t index = 0;
 800bb98:	2300      	movs	r3, #0
 800bb9a:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  uint8_t temp_num = 33;
 800bb9e:	2321      	movs	r3, #33	@ 0x21
 800bba0:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39

  // Loop to handle PIN entry until the flag is set to false.
  while (flag) {
 800bba4:	e167      	b.n	800be76 <LockDevice+0x372>
    // Check the state of the buttons.
    uint8_t temp = checkButtons();
 800bba6:	f7ff faad 	bl	800b104 <checkButtons>
 800bbaa:	4603      	mov	r3, r0
 800bbac:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38

    // If the 'up' button is pressed, increment temp_num and wrap around if it exceeds 126.
    if (temp == 0) {
 800bbb0:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d122      	bne.n	800bbfe <LockDevice+0xfa>
      temp_num++;
 800bbb8:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800bbbc:	3301      	adds	r3, #1
 800bbbe:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
      if (temp_num == 127) temp_num = 33;
 800bbc2:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800bbc6:	2b7f      	cmp	r3, #127	@ 0x7f
 800bbc8:	d102      	bne.n	800bbd0 <LockDevice+0xcc>
 800bbca:	2321      	movs	r3, #33	@ 0x21
 800bbcc:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
      ssd1306_SetCursor(6 + index*10, 18);
 800bbd0:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 800bbd4:	461a      	mov	r2, r3
 800bbd6:	0092      	lsls	r2, r2, #2
 800bbd8:	4413      	add	r3, r2
 800bbda:	005b      	lsls	r3, r3, #1
 800bbdc:	b2db      	uxtb	r3, r3
 800bbde:	3306      	adds	r3, #6
 800bbe0:	b2db      	uxtb	r3, r3
 800bbe2:	2112      	movs	r1, #18
 800bbe4:	4618      	mov	r0, r3
 800bbe6:	f7fc fc97 	bl	8008518 <ssd1306_SetCursor>
      ssd1306_WriteChar((char)temp_num, Font_7x10, 1);
 800bbea:	4b77      	ldr	r3, [pc, #476]	@ (800bdc8 <LockDevice+0x2c4>)
 800bbec:	f897 0039 	ldrb.w	r0, [r7, #57]	@ 0x39
 800bbf0:	2201      	movs	r2, #1
 800bbf2:	9200      	str	r2, [sp, #0]
 800bbf4:	cb0e      	ldmia	r3, {r1, r2, r3}
 800bbf6:	f7fc fbd9 	bl	80083ac <ssd1306_WriteChar>
      ssd1306_UpdateScreen();
 800bbfa:	f7fc fb5b 	bl	80082b4 <ssd1306_UpdateScreen>
    }

    // If the 'down' button is pressed, decrement temp_num and wrap around if it goes below 33.
    if (temp == 1) {
 800bbfe:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 800bc02:	2b01      	cmp	r3, #1
 800bc04:	d122      	bne.n	800bc4c <LockDevice+0x148>
      temp_num--;
 800bc06:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800bc0a:	3b01      	subs	r3, #1
 800bc0c:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
      if (temp_num < 33) temp_num = 126;
 800bc10:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800bc14:	2b20      	cmp	r3, #32
 800bc16:	d802      	bhi.n	800bc1e <LockDevice+0x11a>
 800bc18:	237e      	movs	r3, #126	@ 0x7e
 800bc1a:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
      ssd1306_SetCursor(6 + index*10, 18);
 800bc1e:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 800bc22:	461a      	mov	r2, r3
 800bc24:	0092      	lsls	r2, r2, #2
 800bc26:	4413      	add	r3, r2
 800bc28:	005b      	lsls	r3, r3, #1
 800bc2a:	b2db      	uxtb	r3, r3
 800bc2c:	3306      	adds	r3, #6
 800bc2e:	b2db      	uxtb	r3, r3
 800bc30:	2112      	movs	r1, #18
 800bc32:	4618      	mov	r0, r3
 800bc34:	f7fc fc70 	bl	8008518 <ssd1306_SetCursor>
      ssd1306_WriteChar((char)temp_num, Font_7x10, 1);
 800bc38:	4b63      	ldr	r3, [pc, #396]	@ (800bdc8 <LockDevice+0x2c4>)
 800bc3a:	f897 0039 	ldrb.w	r0, [r7, #57]	@ 0x39
 800bc3e:	2201      	movs	r2, #1
 800bc40:	9200      	str	r2, [sp, #0]
 800bc42:	cb0e      	ldmia	r3, {r1, r2, r3}
 800bc44:	f7fc fbb2 	bl	80083ac <ssd1306_WriteChar>
      ssd1306_UpdateScreen();
 800bc48:	f7fc fb34 	bl	80082b4 <ssd1306_UpdateScreen>
    }

    // If both buttons are pressed, handle the PIN entry.
    if (temp == 2) {
 800bc4c:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 800bc50:	2b02      	cmp	r3, #2
 800bc52:	f040 8110 	bne.w	800be76 <LockDevice+0x372>
      // If the index is 11 (last position), save the entered PIN and exit the loop.
      if (index == 11) {
 800bc56:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 800bc5a:	2b0b      	cmp	r3, #11
 800bc5c:	f040 80d0 	bne.w	800be00 <LockDevice+0x2fc>
        password[index] = temp_num;
 800bc60:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 800bc64:	495a      	ldr	r1, [pc, #360]	@ (800bdd0 <LockDevice+0x2cc>)
 800bc66:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 800bc6a:	54ca      	strb	r2, [r1, r3]
        flag = false;
 800bc6c:	2300      	movs	r3, #0
 800bc6e:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
        ssd1306_SetCursor(6 + index*10, 18);
 800bc72:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 800bc76:	461a      	mov	r2, r3
 800bc78:	0092      	lsls	r2, r2, #2
 800bc7a:	4413      	add	r3, r2
 800bc7c:	005b      	lsls	r3, r3, #1
 800bc7e:	b2db      	uxtb	r3, r3
 800bc80:	3306      	adds	r3, #6
 800bc82:	b2db      	uxtb	r3, r3
 800bc84:	2112      	movs	r1, #18
 800bc86:	4618      	mov	r0, r3
 800bc88:	f7fc fc46 	bl	8008518 <ssd1306_SetCursor>
        ssd1306_WriteChar('*', Font_7x10, 1);
 800bc8c:	4b4e      	ldr	r3, [pc, #312]	@ (800bdc8 <LockDevice+0x2c4>)
 800bc8e:	2201      	movs	r2, #1
 800bc90:	9200      	str	r2, [sp, #0]
 800bc92:	cb0e      	ldmia	r3, {r1, r2, r3}
 800bc94:	202a      	movs	r0, #42	@ 0x2a
 800bc96:	f7fc fb89 	bl	80083ac <ssd1306_WriteChar>
        ssd1306_UpdateScreen();
 800bc9a:	f7fc fb0b 	bl	80082b4 <ssd1306_UpdateScreen>
        printArray("Input password", password, sizeof(password));
 800bc9e:	220c      	movs	r2, #12
 800bca0:	494b      	ldr	r1, [pc, #300]	@ (800bdd0 <LockDevice+0x2cc>)
 800bca2:	484c      	ldr	r0, [pc, #304]	@ (800bdd4 <LockDevice+0x2d0>)
 800bca4:	f000 fb5c 	bl	800c360 <printArray>
        // Check if the entered password is correct.
        if (CheckPassword()) {
 800bca8:	f000 fa34 	bl	800c114 <CheckPassword>
 800bcac:	4603      	mov	r3, r0
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	d05b      	beq.n	800bd6a <LockDevice+0x266>
          DEBUG_PRINT("Password is correct\n");
 800bcb2:	4849      	ldr	r0, [pc, #292]	@ (800bdd8 <LockDevice+0x2d4>)
 800bcb4:	f000 fd0a 	bl	800c6cc <puts>
          // If the password is correct, load the user's salt, IV, and encrypted master key.
          MY_FLASH_ReadN(MemDatastartpoint + (CurrentUser*72), CurrentLocalSalt, 8, DATA_TYPE_8);
 800bcb8:	4b48      	ldr	r3, [pc, #288]	@ (800bddc <LockDevice+0x2d8>)
 800bcba:	781b      	ldrb	r3, [r3, #0]
 800bcbc:	461a      	mov	r2, r3
 800bcbe:	4613      	mov	r3, r2
 800bcc0:	00db      	lsls	r3, r3, #3
 800bcc2:	4413      	add	r3, r2
 800bcc4:	00db      	lsls	r3, r3, #3
 800bcc6:	330b      	adds	r3, #11
 800bcc8:	4618      	mov	r0, r3
 800bcca:	2300      	movs	r3, #0
 800bccc:	2208      	movs	r2, #8
 800bcce:	4944      	ldr	r1, [pc, #272]	@ (800bde0 <LockDevice+0x2dc>)
 800bcd0:	f7fc f980 	bl	8007fd4 <MY_FLASH_ReadN>
          MY_FLASH_ReadN(MemDatastartpoint + 8 + (CurrentUser*72), CurrentIV, 16, DATA_TYPE_8);
 800bcd4:	4b41      	ldr	r3, [pc, #260]	@ (800bddc <LockDevice+0x2d8>)
 800bcd6:	781b      	ldrb	r3, [r3, #0]
 800bcd8:	461a      	mov	r2, r3
 800bcda:	4613      	mov	r3, r2
 800bcdc:	00db      	lsls	r3, r3, #3
 800bcde:	4413      	add	r3, r2
 800bce0:	00db      	lsls	r3, r3, #3
 800bce2:	3313      	adds	r3, #19
 800bce4:	4618      	mov	r0, r3
 800bce6:	2300      	movs	r3, #0
 800bce8:	2210      	movs	r2, #16
 800bcea:	493e      	ldr	r1, [pc, #248]	@ (800bde4 <LockDevice+0x2e0>)
 800bcec:	f7fc f972 	bl	8007fd4 <MY_FLASH_ReadN>
          MY_FLASH_ReadN(MemDatastartpoint + 8 + 16 + 32 + (CurrentUser*72), CurrentMasterKey, 16, DATA_TYPE_8);
 800bcf0:	4b3a      	ldr	r3, [pc, #232]	@ (800bddc <LockDevice+0x2d8>)
 800bcf2:	781b      	ldrb	r3, [r3, #0]
 800bcf4:	461a      	mov	r2, r3
 800bcf6:	4613      	mov	r3, r2
 800bcf8:	00db      	lsls	r3, r3, #3
 800bcfa:	4413      	add	r3, r2
 800bcfc:	00db      	lsls	r3, r3, #3
 800bcfe:	3343      	adds	r3, #67	@ 0x43
 800bd00:	4618      	mov	r0, r3
 800bd02:	2300      	movs	r3, #0
 800bd04:	2210      	movs	r2, #16
 800bd06:	4938      	ldr	r1, [pc, #224]	@ (800bde8 <LockDevice+0x2e4>)
 800bd08:	f7fc f964 	bl	8007fd4 <MY_FLASH_ReadN>

          // Compute the SHA-256 hash of the concatenation of the local salt and password.
          uint8_t temp[20];
          memcpy(temp, CurrentLocalSalt, sizeof(CurrentLocalSalt));
 800bd0c:	4a34      	ldr	r2, [pc, #208]	@ (800bde0 <LockDevice+0x2dc>)
 800bd0e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800bd12:	6810      	ldr	r0, [r2, #0]
 800bd14:	6851      	ldr	r1, [r2, #4]
 800bd16:	c303      	stmia	r3!, {r0, r1}
          memcpy(temp + sizeof(CurrentLocalSalt), CurrentPassword, sizeof(CurrentPassword));
 800bd18:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800bd1c:	3308      	adds	r3, #8
 800bd1e:	4a33      	ldr	r2, [pc, #204]	@ (800bdec <LockDevice+0x2e8>)
 800bd20:	6810      	ldr	r0, [r2, #0]
 800bd22:	6851      	ldr	r1, [r2, #4]
 800bd24:	6892      	ldr	r2, [r2, #8]
 800bd26:	6018      	str	r0, [r3, #0]
 800bd28:	6059      	str	r1, [r3, #4]
 800bd2a:	609a      	str	r2, [r3, #8]
          uint8_t computedSha256[32];
          sha256(temp, computedSha256, sizeof(temp));
 800bd2c:	1d39      	adds	r1, r7, #4
 800bd2e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800bd32:	2214      	movs	r2, #20
 800bd34:	4618      	mov	r0, r3
 800bd36:	f7ff fa9d 	bl	800b274 <sha256>

          // Decrypt the master key using AES with the computed SHA-256 hash as the key.
          DecryptAES(CurrentMasterKey, sizeof(CurrentMasterKey), computedSha256, sizeof(computedSha256), CurrentIV, sizeof(CurrentIV), CurrentMasterKey);
 800bd3a:	1d3a      	adds	r2, r7, #4
 800bd3c:	4b2a      	ldr	r3, [pc, #168]	@ (800bde8 <LockDevice+0x2e4>)
 800bd3e:	9302      	str	r3, [sp, #8]
 800bd40:	2310      	movs	r3, #16
 800bd42:	9301      	str	r3, [sp, #4]
 800bd44:	4b27      	ldr	r3, [pc, #156]	@ (800bde4 <LockDevice+0x2e0>)
 800bd46:	9300      	str	r3, [sp, #0]
 800bd48:	2320      	movs	r3, #32
 800bd4a:	2110      	movs	r1, #16
 800bd4c:	4826      	ldr	r0, [pc, #152]	@ (800bde8 <LockDevice+0x2e4>)
 800bd4e:	f7ff facf 	bl	800b2f0 <DecryptAES>

          // Print the decrypted master key for debugging purposes.
          printArray("Decrypted master key ", CurrentMasterKey, sizeof(CurrentMasterKey));
 800bd52:	2210      	movs	r2, #16
 800bd54:	4924      	ldr	r1, [pc, #144]	@ (800bde8 <LockDevice+0x2e4>)
 800bd56:	4826      	ldr	r0, [pc, #152]	@ (800bdf0 <LockDevice+0x2ec>)
 800bd58:	f000 fb02 	bl	800c360 <printArray>

          // Blink to indicate successful decryption, set the device state to true, and change the state to Menu.
          //blink();
          DeviceState = true;
 800bd5c:	4b18      	ldr	r3, [pc, #96]	@ (800bdc0 <LockDevice+0x2bc>)
 800bd5e:	2201      	movs	r2, #1
 800bd60:	701a      	strb	r2, [r3, #0]
          state = Menu;
 800bd62:	4b24      	ldr	r3, [pc, #144]	@ (800bdf4 <LockDevice+0x2f0>)
 800bd64:	2204      	movs	r2, #4
 800bd66:	701a      	strb	r2, [r3, #0]
 800bd68:	e024      	b.n	800bdb4 <LockDevice+0x2b0>
        } else {
          DEBUG_PRINT("Password is wrong\n");
 800bd6a:	4823      	ldr	r0, [pc, #140]	@ (800bdf8 <LockDevice+0x2f4>)
 800bd6c:	f000 fcae 	bl	800c6cc <puts>
          // If the password is incorrect, increment the wrong password counter.
          MY_FLASH_ReadN(WrongPassword_address, &WrongPassword, 1, DATA_TYPE_8);
 800bd70:	2300      	movs	r3, #0
 800bd72:	2201      	movs	r2, #1
 800bd74:	4921      	ldr	r1, [pc, #132]	@ (800bdfc <LockDevice+0x2f8>)
 800bd76:	2002      	movs	r0, #2
 800bd78:	f7fc f92c 	bl	8007fd4 <MY_FLASH_ReadN>
          WrongPassword++;
 800bd7c:	4b1f      	ldr	r3, [pc, #124]	@ (800bdfc <LockDevice+0x2f8>)
 800bd7e:	781b      	ldrb	r3, [r3, #0]
 800bd80:	3301      	adds	r3, #1
 800bd82:	b2da      	uxtb	r2, r3
 800bd84:	4b1d      	ldr	r3, [pc, #116]	@ (800bdfc <LockDevice+0x2f8>)
 800bd86:	701a      	strb	r2, [r3, #0]
          if (WrongPassword < 5) {
 800bd88:	4b1c      	ldr	r3, [pc, #112]	@ (800bdfc <LockDevice+0x2f8>)
 800bd8a:	781b      	ldrb	r3, [r3, #0]
 800bd8c:	2b04      	cmp	r3, #4
 800bd8e:	d80a      	bhi.n	800bda6 <LockDevice+0x2a2>
            // If the wrong password counter is less than 5, update the corresponding LED and flash memory.
            write_flash(WrongPassword_address, &WrongPassword, 1);
 800bd90:	2201      	movs	r2, #1
 800bd92:	491a      	ldr	r1, [pc, #104]	@ (800bdfc <LockDevice+0x2f8>)
 800bd94:	2002      	movs	r0, #2
 800bd96:	f7fc f979 	bl	800808c <write_flash>

            // Trigger an alarm on the OLED and reset the state to Lock.
            OledAlarm();
 800bd9a:	f000 f97f 	bl	800c09c <OledAlarm>
            state = Lock;
 800bd9e:	4b15      	ldr	r3, [pc, #84]	@ (800bdf4 <LockDevice+0x2f0>)
 800bda0:	2200      	movs	r2, #0
 800bda2:	701a      	strb	r2, [r3, #0]
 800bda4:	e006      	b.n	800bdb4 <LockDevice+0x2b0>
          } else {
            // If the wrong password counter reaches 5, erase memory and reset the LEDs.
            EraseAlaram();
 800bda6:	f000 f875 	bl	800be94 <EraseAlaram>
            EraseMem();
 800bdaa:	f000 f895 	bl	800bed8 <EraseMem>
            //blink();
            // Set the state to Enrollment for re-enrollment.
            state = Enrollment;
 800bdae:	4b11      	ldr	r3, [pc, #68]	@ (800bdf4 <LockDevice+0x2f0>)
 800bdb0:	2203      	movs	r2, #3
 800bdb2:	701a      	strb	r2, [r3, #0]
          }
        }

        // Clear the SSD1306 display.
        ssd1306_clear();
 800bdb4:	f7fc f9ba 	bl	800812c <ssd1306_clear>
 800bdb8:	e05d      	b.n	800be76 <LockDevice+0x372>
 800bdba:	bf00      	nop
 800bdbc:	0800d700 	.word	0x0800d700
 800bdc0:	200002ac 	.word	0x200002ac
 800bdc4:	200002ab 	.word	0x200002ab
 800bdc8:	0800f4b8 	.word	0x0800f4b8
 800bdcc:	0800d70c 	.word	0x0800d70c
 800bdd0:	20000254 	.word	0x20000254
 800bdd4:	0800d718 	.word	0x0800d718
 800bdd8:	0800d728 	.word	0x0800d728
 800bddc:	20000271 	.word	0x20000271
 800bde0:	20000290 	.word	0x20000290
 800bde4:	20000298 	.word	0x20000298
 800bde8:	20000280 	.word	0x20000280
 800bdec:	20000274 	.word	0x20000274
 800bdf0:	0800d73c 	.word	0x0800d73c
 800bdf4:	200002a9 	.word	0x200002a9
 800bdf8:	0800d754 	.word	0x0800d754
 800bdfc:	200002a8 	.word	0x200002a8
      } else {
        // Save the entered character in the password array and move to the next position.
        password[index] = temp_num;
 800be00:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 800be04:	4921      	ldr	r1, [pc, #132]	@ (800be8c <LockDevice+0x388>)
 800be06:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 800be0a:	54ca      	strb	r2, [r1, r3]
        temp_num = 33;
 800be0c:	2321      	movs	r3, #33	@ 0x21
 800be0e:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
        ssd1306_SetCursor(6 + index*10, 18);
 800be12:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 800be16:	461a      	mov	r2, r3
 800be18:	0092      	lsls	r2, r2, #2
 800be1a:	4413      	add	r3, r2
 800be1c:	005b      	lsls	r3, r3, #1
 800be1e:	b2db      	uxtb	r3, r3
 800be20:	3306      	adds	r3, #6
 800be22:	b2db      	uxtb	r3, r3
 800be24:	2112      	movs	r1, #18
 800be26:	4618      	mov	r0, r3
 800be28:	f7fc fb76 	bl	8008518 <ssd1306_SetCursor>
        ssd1306_WriteChar('*', Font_7x10, 1);
 800be2c:	4b18      	ldr	r3, [pc, #96]	@ (800be90 <LockDevice+0x38c>)
 800be2e:	2201      	movs	r2, #1
 800be30:	9200      	str	r2, [sp, #0]
 800be32:	cb0e      	ldmia	r3, {r1, r2, r3}
 800be34:	202a      	movs	r0, #42	@ 0x2a
 800be36:	f7fc fab9 	bl	80083ac <ssd1306_WriteChar>
        ssd1306_UpdateScreen();
 800be3a:	f7fc fa3b 	bl	80082b4 <ssd1306_UpdateScreen>
        index++;
 800be3e:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 800be42:	3301      	adds	r3, #1
 800be44:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
        ssd1306_SetCursor(6 + index*10, 18);
 800be48:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 800be4c:	461a      	mov	r2, r3
 800be4e:	0092      	lsls	r2, r2, #2
 800be50:	4413      	add	r3, r2
 800be52:	005b      	lsls	r3, r3, #1
 800be54:	b2db      	uxtb	r3, r3
 800be56:	3306      	adds	r3, #6
 800be58:	b2db      	uxtb	r3, r3
 800be5a:	2112      	movs	r1, #18
 800be5c:	4618      	mov	r0, r3
 800be5e:	f7fc fb5b 	bl	8008518 <ssd1306_SetCursor>
        ssd1306_WriteChar((char)temp_num, Font_7x10, 1);
 800be62:	4b0b      	ldr	r3, [pc, #44]	@ (800be90 <LockDevice+0x38c>)
 800be64:	f897 0039 	ldrb.w	r0, [r7, #57]	@ 0x39
 800be68:	2201      	movs	r2, #1
 800be6a:	9200      	str	r2, [sp, #0]
 800be6c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800be6e:	f7fc fa9d 	bl	80083ac <ssd1306_WriteChar>
        ssd1306_UpdateScreen();
 800be72:	f7fc fa1f 	bl	80082b4 <ssd1306_UpdateScreen>
  while (flag) {
 800be76:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	f47f ae93 	bne.w	800bba6 <LockDevice+0xa2>
      }
    }
  }
}
 800be80:	bf00      	nop
 800be82:	bf00      	nop
 800be84:	3740      	adds	r7, #64	@ 0x40
 800be86:	46bd      	mov	sp, r7
 800be88:	bd80      	pop	{r7, pc}
 800be8a:	bf00      	nop
 800be8c:	20000254 	.word	0x20000254
 800be90:	0800f4b8 	.word	0x0800f4b8

0800be94 <EraseAlaram>:

void EraseAlaram() {
 800be94:	b580      	push	{r7, lr}
 800be96:	b082      	sub	sp, #8
 800be98:	af02      	add	r7, sp, #8
  DEBUG_PRINT("Erase memory\n");
 800be9a:	480c      	ldr	r0, [pc, #48]	@ (800becc <EraseAlaram+0x38>)
 800be9c:	f000 fc16 	bl	800c6cc <puts>
  // Clear the SSD1306 display.
  ssd1306_clear();
 800bea0:	f7fc f944 	bl	800812c <ssd1306_clear>

  // Display "Memory" message at the specified coordinates using Font_11x18.
  ssd1306_SetCursor(8, 11);
 800bea4:	210b      	movs	r1, #11
 800bea6:	2008      	movs	r0, #8
 800bea8:	f7fc fb36 	bl	8008518 <ssd1306_SetCursor>
  ssd1306_WriteString("Memory erasing:(", Font_7x10, 1);
 800beac:	4b08      	ldr	r3, [pc, #32]	@ (800bed0 <EraseAlaram+0x3c>)
 800beae:	2201      	movs	r2, #1
 800beb0:	9200      	str	r2, [sp, #0]
 800beb2:	cb0e      	ldmia	r3, {r1, r2, r3}
 800beb4:	4807      	ldr	r0, [pc, #28]	@ (800bed4 <EraseAlaram+0x40>)
 800beb6:	f7fc fb09 	bl	80084cc <ssd1306_WriteString>

  // Update the SSD1306 display to show the memory erasing message.
  ssd1306_UpdateScreen();
 800beba:	f7fc f9fb 	bl	80082b4 <ssd1306_UpdateScreen>

  // Delay for 3000 milliseconds (3 seconds) to allow the user to read the memory erasing message.
  HAL_Delay(3000);
 800bebe:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800bec2:	f7f6 fdb1 	bl	8002a28 <HAL_Delay>
}
 800bec6:	bf00      	nop
 800bec8:	46bd      	mov	sp, r7
 800beca:	bd80      	pop	{r7, pc}
 800becc:	0800d768 	.word	0x0800d768
 800bed0:	0800f4b8 	.word	0x0800f4b8
 800bed4:	0800d778 	.word	0x0800d778

0800bed8 <EraseMem>:

void EraseMem(){
 800bed8:	b580      	push	{r7, lr}
 800beda:	f5ad 7d7a 	sub.w	sp, sp, #1000	@ 0x3e8
 800bede:	af00      	add	r7, sp, #0
  uint8_t All_0[1000] = {0};
 800bee0:	f507 737a 	add.w	r3, r7, #1000	@ 0x3e8
 800bee4:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 800bee8:	2200      	movs	r2, #0
 800beea:	601a      	str	r2, [r3, #0]
 800beec:	3304      	adds	r3, #4
 800beee:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 800bef2:	2100      	movs	r1, #0
 800bef4:	4618      	mov	r0, r3
 800bef6:	f000 fcd9 	bl	800c8ac <memset>
  write_flash(0, All_0, 1000);
 800befa:	463b      	mov	r3, r7
 800befc:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800bf00:	4619      	mov	r1, r3
 800bf02:	2000      	movs	r0, #0
 800bf04:	f7fc f8c2 	bl	800808c <write_flash>
}
 800bf08:	bf00      	nop
 800bf0a:	f507 777a 	add.w	r7, r7, #1000	@ 0x3e8
 800bf0e:	46bd      	mov	sp, r7
 800bf10:	bd80      	pop	{r7, pc}
	...

0800bf14 <ResetFactory>:

void ResetFactory() {
 800bf14:	b580      	push	{r7, lr}
 800bf16:	b084      	sub	sp, #16
 800bf18:	af02      	add	r7, sp, #8
  DEBUG_PRINT("Reset factory\n");
 800bf1a:	4858      	ldr	r0, [pc, #352]	@ (800c07c <ResetFactory+0x168>)
 800bf1c:	f000 fbd6 	bl	800c6cc <puts>
  // Clear the SSD1306 display.
  ssd1306_clear();
 800bf20:	f7fc f904 	bl	800812c <ssd1306_clear>

  // Draw a filled rectangle around the "No" option.
  //ssd1306_FillRectangle(71, 17, 25, 6, 1);

  // Display "Reset factory" at the specified coordinates using Font_7x10.
  ssd1306_SetCursor(18, 8);
 800bf24:	2108      	movs	r1, #8
 800bf26:	2012      	movs	r0, #18
 800bf28:	f7fc faf6 	bl	8008518 <ssd1306_SetCursor>
  ssd1306_WriteString("Reset factory", Font_7x10, 1);
 800bf2c:	4b54      	ldr	r3, [pc, #336]	@ (800c080 <ResetFactory+0x16c>)
 800bf2e:	2201      	movs	r2, #1
 800bf30:	9200      	str	r2, [sp, #0]
 800bf32:	cb0e      	ldmia	r3, {r1, r2, r3}
 800bf34:	4851      	ldr	r0, [pc, #324]	@ (800c07c <ResetFactory+0x168>)
 800bf36:	f7fc fac9 	bl	80084cc <ssd1306_WriteString>

  // Display "Yes" and "No" options at the specified coordinates.
  ssd1306_SetCursor(38, 18);
 800bf3a:	2112      	movs	r1, #18
 800bf3c:	2026      	movs	r0, #38	@ 0x26
 800bf3e:	f7fc faeb 	bl	8008518 <ssd1306_SetCursor>
  ssd1306_WriteString("Yes", Font_7x10, 1);
 800bf42:	4b4f      	ldr	r3, [pc, #316]	@ (800c080 <ResetFactory+0x16c>)
 800bf44:	2201      	movs	r2, #1
 800bf46:	9200      	str	r2, [sp, #0]
 800bf48:	cb0e      	ldmia	r3, {r1, r2, r3}
 800bf4a:	484e      	ldr	r0, [pc, #312]	@ (800c084 <ResetFactory+0x170>)
 800bf4c:	f7fc fabe 	bl	80084cc <ssd1306_WriteString>
  ssd1306_SetCursor(78, 18);
 800bf50:	2112      	movs	r1, #18
 800bf52:	204e      	movs	r0, #78	@ 0x4e
 800bf54:	f7fc fae0 	bl	8008518 <ssd1306_SetCursor>
  ssd1306_WriteString("No", Font_7x10, 0);
 800bf58:	4b49      	ldr	r3, [pc, #292]	@ (800c080 <ResetFactory+0x16c>)
 800bf5a:	2200      	movs	r2, #0
 800bf5c:	9200      	str	r2, [sp, #0]
 800bf5e:	cb0e      	ldmia	r3, {r1, r2, r3}
 800bf60:	4849      	ldr	r0, [pc, #292]	@ (800c088 <ResetFactory+0x174>)
 800bf62:	f7fc fab3 	bl	80084cc <ssd1306_WriteString>

  // Update the SSD1306 display to show the initial reset factory screen.
  ssd1306_UpdateScreen();
 800bf66:	f7fc f9a5 	bl	80082b4 <ssd1306_UpdateScreen>

  // Initialize the YesNo flag to false, indicating "No" is currently selected.
  bool YesNo = false;
 800bf6a:	2300      	movs	r3, #0
 800bf6c:	71fb      	strb	r3, [r7, #7]

  // Loop to handle user input until the device state changes or the user makes a selection.
  while (1) {
    // If the device is locked, change the state to Lock and break the loop.
    if (!DeviceState) {
 800bf6e:	4b47      	ldr	r3, [pc, #284]	@ (800c08c <ResetFactory+0x178>)
 800bf70:	781b      	ldrb	r3, [r3, #0]
 800bf72:	f083 0301 	eor.w	r3, r3, #1
 800bf76:	b2db      	uxtb	r3, r3
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d003      	beq.n	800bf84 <ResetFactory+0x70>
      state = Lock;
 800bf7c:	4b44      	ldr	r3, [pc, #272]	@ (800c090 <ResetFactory+0x17c>)
 800bf7e:	2200      	movs	r2, #0
 800bf80:	701a      	strb	r2, [r3, #0]
      break;
 800bf82:	e076      	b.n	800c072 <ResetFactory+0x15e>
    }

    // Check the state of the buttons.
    uint8_t btn_state = checkButtons();
 800bf84:	f7ff f8be 	bl	800b104 <checkButtons>
 800bf88:	4603      	mov	r3, r0
 800bf8a:	71bb      	strb	r3, [r7, #6]

    // If the 'up' button is pressed, select "Yes" and update the display.
    if (btn_state == 0) { // up
 800bf8c:	79bb      	ldrb	r3, [r7, #6]
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d127      	bne.n	800bfe2 <ResetFactory+0xce>
      ssd1306_clear();
 800bf92:	f7fc f8cb 	bl	800812c <ssd1306_clear>
      //ssd1306_FillRectangle(36, 35, 25, 12, 1);
      ssd1306_SetCursor(18, 8);
 800bf96:	2108      	movs	r1, #8
 800bf98:	2012      	movs	r0, #18
 800bf9a:	f7fc fabd 	bl	8008518 <ssd1306_SetCursor>
      ssd1306_WriteString("Reset factory", Font_7x10, 1);
 800bf9e:	4b38      	ldr	r3, [pc, #224]	@ (800c080 <ResetFactory+0x16c>)
 800bfa0:	2201      	movs	r2, #1
 800bfa2:	9200      	str	r2, [sp, #0]
 800bfa4:	cb0e      	ldmia	r3, {r1, r2, r3}
 800bfa6:	4835      	ldr	r0, [pc, #212]	@ (800c07c <ResetFactory+0x168>)
 800bfa8:	f7fc fa90 	bl	80084cc <ssd1306_WriteString>
      ssd1306_SetCursor(38, 18);
 800bfac:	2112      	movs	r1, #18
 800bfae:	2026      	movs	r0, #38	@ 0x26
 800bfb0:	f7fc fab2 	bl	8008518 <ssd1306_SetCursor>
      ssd1306_WriteString("Yes", Font_7x10, 0);
 800bfb4:	4b32      	ldr	r3, [pc, #200]	@ (800c080 <ResetFactory+0x16c>)
 800bfb6:	2200      	movs	r2, #0
 800bfb8:	9200      	str	r2, [sp, #0]
 800bfba:	cb0e      	ldmia	r3, {r1, r2, r3}
 800bfbc:	4831      	ldr	r0, [pc, #196]	@ (800c084 <ResetFactory+0x170>)
 800bfbe:	f7fc fa85 	bl	80084cc <ssd1306_WriteString>
      ssd1306_SetCursor(78, 18);
 800bfc2:	2112      	movs	r1, #18
 800bfc4:	204e      	movs	r0, #78	@ 0x4e
 800bfc6:	f7fc faa7 	bl	8008518 <ssd1306_SetCursor>
      ssd1306_WriteString("No", Font_7x10, 1);
 800bfca:	4b2d      	ldr	r3, [pc, #180]	@ (800c080 <ResetFactory+0x16c>)
 800bfcc:	2201      	movs	r2, #1
 800bfce:	9200      	str	r2, [sp, #0]
 800bfd0:	cb0e      	ldmia	r3, {r1, r2, r3}
 800bfd2:	482d      	ldr	r0, [pc, #180]	@ (800c088 <ResetFactory+0x174>)
 800bfd4:	f7fc fa7a 	bl	80084cc <ssd1306_WriteString>
      ssd1306_UpdateScreen();
 800bfd8:	f7fc f96c 	bl	80082b4 <ssd1306_UpdateScreen>
      YesNo = true;
 800bfdc:	2301      	movs	r3, #1
 800bfde:	71fb      	strb	r3, [r7, #7]
 800bfe0:	e7c5      	b.n	800bf6e <ResetFactory+0x5a>
    }

    // If the 'down' button is pressed, select "No" and update the display.
    else if (btn_state == 1) { // down
 800bfe2:	79bb      	ldrb	r3, [r7, #6]
 800bfe4:	2b01      	cmp	r3, #1
 800bfe6:	d127      	bne.n	800c038 <ResetFactory+0x124>
      ssd1306_clear();
 800bfe8:	f7fc f8a0 	bl	800812c <ssd1306_clear>
      //ssd1306_FillRectangle(71, 35, 25, 12, 1);
      ssd1306_SetCursor(18, 8);
 800bfec:	2108      	movs	r1, #8
 800bfee:	2012      	movs	r0, #18
 800bff0:	f7fc fa92 	bl	8008518 <ssd1306_SetCursor>
      ssd1306_WriteString("Reset factory", Font_7x10, 1);
 800bff4:	4b22      	ldr	r3, [pc, #136]	@ (800c080 <ResetFactory+0x16c>)
 800bff6:	2201      	movs	r2, #1
 800bff8:	9200      	str	r2, [sp, #0]
 800bffa:	cb0e      	ldmia	r3, {r1, r2, r3}
 800bffc:	481f      	ldr	r0, [pc, #124]	@ (800c07c <ResetFactory+0x168>)
 800bffe:	f7fc fa65 	bl	80084cc <ssd1306_WriteString>
      ssd1306_SetCursor(38, 18);
 800c002:	2112      	movs	r1, #18
 800c004:	2026      	movs	r0, #38	@ 0x26
 800c006:	f7fc fa87 	bl	8008518 <ssd1306_SetCursor>
      ssd1306_WriteString("Yes", Font_7x10, 1);
 800c00a:	4b1d      	ldr	r3, [pc, #116]	@ (800c080 <ResetFactory+0x16c>)
 800c00c:	2201      	movs	r2, #1
 800c00e:	9200      	str	r2, [sp, #0]
 800c010:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c012:	481c      	ldr	r0, [pc, #112]	@ (800c084 <ResetFactory+0x170>)
 800c014:	f7fc fa5a 	bl	80084cc <ssd1306_WriteString>
      ssd1306_SetCursor(78, 18);
 800c018:	2112      	movs	r1, #18
 800c01a:	204e      	movs	r0, #78	@ 0x4e
 800c01c:	f7fc fa7c 	bl	8008518 <ssd1306_SetCursor>
      ssd1306_WriteString("No", Font_7x10, 0);
 800c020:	4b17      	ldr	r3, [pc, #92]	@ (800c080 <ResetFactory+0x16c>)
 800c022:	2200      	movs	r2, #0
 800c024:	9200      	str	r2, [sp, #0]
 800c026:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c028:	4817      	ldr	r0, [pc, #92]	@ (800c088 <ResetFactory+0x174>)
 800c02a:	f7fc fa4f 	bl	80084cc <ssd1306_WriteString>
      ssd1306_UpdateScreen();
 800c02e:	f7fc f941 	bl	80082b4 <ssd1306_UpdateScreen>
      YesNo = false;
 800c032:	2300      	movs	r3, #0
 800c034:	71fb      	strb	r3, [r7, #7]
 800c036:	e79a      	b.n	800bf6e <ResetFactory+0x5a>
    }

    // If both buttons are pressed, perform the action based on the selected option.
    else if (btn_state == 2) { // both
 800c038:	79bb      	ldrb	r3, [r7, #6]
 800c03a:	2b02      	cmp	r3, #2
 800c03c:	d197      	bne.n	800bf6e <ResetFactory+0x5a>
      // If "Yes" is selected, erase alarms and memory, reset LEDs, and change state to Enrollment.
      if (YesNo) {
 800c03e:	79fb      	ldrb	r3, [r7, #7]
 800c040:	2b00      	cmp	r3, #0
 800c042:	d009      	beq.n	800c058 <ResetFactory+0x144>
        DEBUG_PRINT("Reset factory is applied\n");
 800c044:	4813      	ldr	r0, [pc, #76]	@ (800c094 <ResetFactory+0x180>)
 800c046:	f000 fb41 	bl	800c6cc <puts>
        EraseAlaram();
 800c04a:	f7ff ff23 	bl	800be94 <EraseAlaram>
        EraseMem();
 800c04e:	f7ff ff43 	bl	800bed8 <EraseMem>
        state = Enrollment;
 800c052:	4b0f      	ldr	r3, [pc, #60]	@ (800c090 <ResetFactory+0x17c>)
 800c054:	2203      	movs	r2, #3
 800c056:	701a      	strb	r2, [r3, #0]
      }

      // If "No" is selected, change the state back to Menu.
      if (!YesNo) {
 800c058:	79fb      	ldrb	r3, [r7, #7]
 800c05a:	f083 0301 	eor.w	r3, r3, #1
 800c05e:	b2db      	uxtb	r3, r3
 800c060:	2b00      	cmp	r3, #0
 800c062:	d005      	beq.n	800c070 <ResetFactory+0x15c>
        DEBUG_PRINT("Reset factory is denied\n");
 800c064:	480c      	ldr	r0, [pc, #48]	@ (800c098 <ResetFactory+0x184>)
 800c066:	f000 fb31 	bl	800c6cc <puts>
        state = Menu;
 800c06a:	4b09      	ldr	r3, [pc, #36]	@ (800c090 <ResetFactory+0x17c>)
 800c06c:	2204      	movs	r2, #4
 800c06e:	701a      	strb	r2, [r3, #0]
      }
      // Break the loop after making a selection.
      break;
 800c070:	bf00      	nop
    }
  }
}
 800c072:	bf00      	nop
 800c074:	3708      	adds	r7, #8
 800c076:	46bd      	mov	sp, r7
 800c078:	bd80      	pop	{r7, pc}
 800c07a:	bf00      	nop
 800c07c:	0800d78c 	.word	0x0800d78c
 800c080:	0800f4b8 	.word	0x0800f4b8
 800c084:	0800d79c 	.word	0x0800d79c
 800c088:	0800d7a0 	.word	0x0800d7a0
 800c08c:	200002ac 	.word	0x200002ac
 800c090:	200002a9 	.word	0x200002a9
 800c094:	0800d7a4 	.word	0x0800d7a4
 800c098:	0800d7c0 	.word	0x0800d7c0

0800c09c <OledAlarm>:


void OledAlarm() {
 800c09c:	b580      	push	{r7, lr}
 800c09e:	b082      	sub	sp, #8
 800c0a0:	af02      	add	r7, sp, #8
  DEBUG_PRINT("OLED alarm\n");
 800c0a2:	4817      	ldr	r0, [pc, #92]	@ (800c100 <OledAlarm+0x64>)
 800c0a4:	f000 fb12 	bl	800c6cc <puts>
  // Clear the SSD1306 display.
  ssd1306_clear();
 800c0a8:	f7fc f840 	bl	800812c <ssd1306_clear>

  // Display "Warning" message at the specified coordinates using Font_11x18.
  ssd1306_SetCursor(39, 4);
 800c0ac:	2104      	movs	r1, #4
 800c0ae:	2027      	movs	r0, #39	@ 0x27
 800c0b0:	f7fc fa32 	bl	8008518 <ssd1306_SetCursor>
  ssd1306_WriteString("Warning", Font_7x10, 1);
 800c0b4:	4b13      	ldr	r3, [pc, #76]	@ (800c104 <OledAlarm+0x68>)
 800c0b6:	2201      	movs	r2, #1
 800c0b8:	9200      	str	r2, [sp, #0]
 800c0ba:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c0bc:	4812      	ldr	r0, [pc, #72]	@ (800c108 <OledAlarm+0x6c>)
 800c0be:	f7fc fa05 	bl	80084cc <ssd1306_WriteString>

  // Calculate the remaining attempts and display it.
  ssd1306_SetCursor(4, 18);
 800c0c2:	2112      	movs	r1, #18
 800c0c4:	2004      	movs	r0, #4
 800c0c6:	f7fc fa27 	bl	8008518 <ssd1306_SetCursor>
  ssd1306_WriteChar(4 - WrongPassword + '0', Font_7x10, 1);  // Display the number of remaining attempts.
 800c0ca:	4b10      	ldr	r3, [pc, #64]	@ (800c10c <OledAlarm+0x70>)
 800c0cc:	781b      	ldrb	r3, [r3, #0]
 800c0ce:	f1c3 0334 	rsb	r3, r3, #52	@ 0x34
 800c0d2:	b2d8      	uxtb	r0, r3
 800c0d4:	4b0b      	ldr	r3, [pc, #44]	@ (800c104 <OledAlarm+0x68>)
 800c0d6:	2201      	movs	r2, #1
 800c0d8:	9200      	str	r2, [sp, #0]
 800c0da:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c0dc:	f7fc f966 	bl	80083ac <ssd1306_WriteChar>

  // Display " more attempts" message at the specified coordinates using Font_7x10.
  ssd1306_WriteString(" more attempts", Font_7x10, 1);
 800c0e0:	4b08      	ldr	r3, [pc, #32]	@ (800c104 <OledAlarm+0x68>)
 800c0e2:	2201      	movs	r2, #1
 800c0e4:	9200      	str	r2, [sp, #0]
 800c0e6:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c0e8:	4809      	ldr	r0, [pc, #36]	@ (800c110 <OledAlarm+0x74>)
 800c0ea:	f7fc f9ef 	bl	80084cc <ssd1306_WriteString>

  // Update the SSD1306 display to show the warning message and remaining attempts.
  ssd1306_UpdateScreen();
 800c0ee:	f7fc f8e1 	bl	80082b4 <ssd1306_UpdateScreen>

  // Delay for 3000 milliseconds (3 seconds) to allow the user to read the warning message.
  HAL_Delay(3000);
 800c0f2:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800c0f6:	f7f6 fc97 	bl	8002a28 <HAL_Delay>
}
 800c0fa:	bf00      	nop
 800c0fc:	46bd      	mov	sp, r7
 800c0fe:	bd80      	pop	{r7, pc}
 800c100:	0800d7d8 	.word	0x0800d7d8
 800c104:	0800f4b8 	.word	0x0800f4b8
 800c108:	0800d7e4 	.word	0x0800d7e4
 800c10c:	200002a8 	.word	0x200002a8
 800c110:	0800d7ec 	.word	0x0800d7ec

0800c114 <CheckPassword>:

bool CheckPassword() {
 800c114:	b580      	push	{r7, lr}
 800c116:	b096      	sub	sp, #88	@ 0x58
 800c118:	af00      	add	r7, sp, #0
  uint8_t tempPassword[32]; // Buffer to hold a hashed password read from memory

  // Read the number of users stored in flash memory
  MY_FLASH_ReadN(Nusers_address, &user_num, 1, DATA_TYPE_8);
 800c11a:	2300      	movs	r3, #0
 800c11c:	2201      	movs	r2, #1
 800c11e:	4928      	ldr	r1, [pc, #160]	@ (800c1c0 <CheckPassword+0xac>)
 800c120:	2001      	movs	r0, #1
 800c122:	f7fb ff57 	bl	8007fd4 <MY_FLASH_ReadN>

  // Iterate through each user's stored password to check against the provided password
  for (int i = 0; i < user_num; i++) {
 800c126:	2300      	movs	r3, #0
 800c128:	657b      	str	r3, [r7, #84]	@ 0x54
 800c12a:	e03e      	b.n	800c1aa <CheckPassword+0x96>
    // Construct the hash of the provided password combined with the global salt
    uint8_t temp[20];
    memcpy(temp, GlobalSalt, sizeof(GlobalSalt)); // Copy global salt into temp buffer
 800c12c:	4a25      	ldr	r2, [pc, #148]	@ (800c1c4 <CheckPassword+0xb0>)
 800c12e:	f107 0320 	add.w	r3, r7, #32
 800c132:	6810      	ldr	r0, [r2, #0]
 800c134:	6851      	ldr	r1, [r2, #4]
 800c136:	c303      	stmia	r3!, {r0, r1}
    memcpy(temp + sizeof(GlobalSalt), password, sizeof(password)); // Append password to temp buffer
 800c138:	f107 0320 	add.w	r3, r7, #32
 800c13c:	3308      	adds	r3, #8
 800c13e:	4a22      	ldr	r2, [pc, #136]	@ (800c1c8 <CheckPassword+0xb4>)
 800c140:	6810      	ldr	r0, [r2, #0]
 800c142:	6851      	ldr	r1, [r2, #4]
 800c144:	6892      	ldr	r2, [r2, #8]
 800c146:	6018      	str	r0, [r3, #0]
 800c148:	6059      	str	r1, [r3, #4]
 800c14a:	609a      	str	r2, [r3, #8]
    uint8_t computedSha256[32];
    sha256(temp, computedSha256, sizeof(temp)); // Compute SHA-256 hash of temp buffer
 800c14c:	4639      	mov	r1, r7
 800c14e:	f107 0320 	add.w	r3, r7, #32
 800c152:	2214      	movs	r2, #20
 800c154:	4618      	mov	r0, r3
 800c156:	f7ff f88d 	bl	800b274 <sha256>

    // Read the stored hashed password from flash memory
    MY_FLASH_ReadN(MemDatastartpoint + 8 + 16 + (i * 72), tempPassword, 32, DATA_TYPE_8);
 800c15a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800c15c:	4613      	mov	r3, r2
 800c15e:	00db      	lsls	r3, r3, #3
 800c160:	4413      	add	r3, r2
 800c162:	00db      	lsls	r3, r3, #3
 800c164:	3323      	adds	r3, #35	@ 0x23
 800c166:	4618      	mov	r0, r3
 800c168:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 800c16c:	2300      	movs	r3, #0
 800c16e:	2220      	movs	r2, #32
 800c170:	f7fb ff30 	bl	8007fd4 <MY_FLASH_ReadN>

    // Compare computed hash with stored hashed password
    if (memcmp(tempPassword, computedSha256, 32) == 0) {
 800c174:	4639      	mov	r1, r7
 800c176:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800c17a:	2220      	movs	r2, #32
 800c17c:	4618      	mov	r0, r3
 800c17e:	f000 fb85 	bl	800c88c <memcmp>
 800c182:	4603      	mov	r3, r0
 800c184:	2b00      	cmp	r3, #0
 800c186:	d10d      	bne.n	800c1a4 <CheckPassword+0x90>
      // If passwords match, store the current user and password for future reference
      CurrentUser = i;
 800c188:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c18a:	b2da      	uxtb	r2, r3
 800c18c:	4b0f      	ldr	r3, [pc, #60]	@ (800c1cc <CheckPassword+0xb8>)
 800c18e:	701a      	strb	r2, [r3, #0]
      memcpy(CurrentPassword, password, sizeof(password));
 800c190:	4b0f      	ldr	r3, [pc, #60]	@ (800c1d0 <CheckPassword+0xbc>)
 800c192:	4a0d      	ldr	r2, [pc, #52]	@ (800c1c8 <CheckPassword+0xb4>)
 800c194:	6810      	ldr	r0, [r2, #0]
 800c196:	6851      	ldr	r1, [r2, #4]
 800c198:	6892      	ldr	r2, [r2, #8]
 800c19a:	6018      	str	r0, [r3, #0]
 800c19c:	6059      	str	r1, [r3, #4]
 800c19e:	609a      	str	r2, [r3, #8]
      return true; // Password match found, return true
 800c1a0:	2301      	movs	r3, #1
 800c1a2:	e009      	b.n	800c1b8 <CheckPassword+0xa4>
  for (int i = 0; i < user_num; i++) {
 800c1a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c1a6:	3301      	adds	r3, #1
 800c1a8:	657b      	str	r3, [r7, #84]	@ 0x54
 800c1aa:	4b05      	ldr	r3, [pc, #20]	@ (800c1c0 <CheckPassword+0xac>)
 800c1ac:	781b      	ldrb	r3, [r3, #0]
 800c1ae:	461a      	mov	r2, r3
 800c1b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c1b2:	4293      	cmp	r3, r2
 800c1b4:	dbba      	blt.n	800c12c <CheckPassword+0x18>
    }
  }

  return false; // No matching password found among stored hashes, return false
 800c1b6:	2300      	movs	r3, #0
}
 800c1b8:	4618      	mov	r0, r3
 800c1ba:	3758      	adds	r7, #88	@ 0x58
 800c1bc:	46bd      	mov	sp, r7
 800c1be:	bd80      	pop	{r7, pc}
 800c1c0:	20000270 	.word	0x20000270
 800c1c4:	20000234 	.word	0x20000234
 800c1c8:	20000254 	.word	0x20000254
 800c1cc:	20000271 	.word	0x20000271
 800c1d0:	20000274 	.word	0x20000274

0800c1d4 <Get_rng>:
 *      Author: saman
 */

#include "RNG.h"
bool rngflag =0;
void Get_rng(RNG_HandleTypeDef *hrng, uint8_t *rng,uint8_t NumRNG){
 800c1d4:	b580      	push	{r7, lr}
 800c1d6:	b088      	sub	sp, #32
 800c1d8:	af00      	add	r7, sp, #0
 800c1da:	60f8      	str	r0, [r7, #12]
 800c1dc:	60b9      	str	r1, [r7, #8]
 800c1de:	4613      	mov	r3, r2
 800c1e0:	71fb      	strb	r3, [r7, #7]
  for(int i=0;i<NumRNG;i++){
 800c1e2:	2300      	movs	r3, #0
 800c1e4:	61fb      	str	r3, [r7, #28]
 800c1e6:	e02b      	b.n	800c240 <Get_rng+0x6c>
    HAL_RNG_GenerateRandomNumber_IT(hrng);
 800c1e8:	68f8      	ldr	r0, [r7, #12]
 800c1ea:	f7f9 fdfd 	bl	8005de8 <HAL_RNG_GenerateRandomNumber_IT>
    while(!rngflag);
 800c1ee:	bf00      	nop
 800c1f0:	4b18      	ldr	r3, [pc, #96]	@ (800c254 <Get_rng+0x80>)
 800c1f2:	781b      	ldrb	r3, [r3, #0]
 800c1f4:	f083 0301 	eor.w	r3, r3, #1
 800c1f8:	b2db      	uxtb	r3, r3
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	d1f8      	bne.n	800c1f0 <Get_rng+0x1c>
    rngflag =0;
 800c1fe:	4b15      	ldr	r3, [pc, #84]	@ (800c254 <Get_rng+0x80>)
 800c200:	2200      	movs	r2, #0
 800c202:	701a      	strb	r2, [r3, #0]
    uint32_t temp_rng = HAL_RNG_ReadLastRandomNumber(hrng);
 800c204:	68f8      	ldr	r0, [r7, #12]
 800c206:	f7f9 fe72 	bl	8005eee <HAL_RNG_ReadLastRandomNumber>
 800c20a:	6178      	str	r0, [r7, #20]
    for(int j=0;j<4;j++){
 800c20c:	2300      	movs	r3, #0
 800c20e:	61bb      	str	r3, [r7, #24]
 800c210:	e010      	b.n	800c234 <Get_rng+0x60>
      rng[j+i*4] = (uint8_t)(temp_rng >> (j*8));
 800c212:	69bb      	ldr	r3, [r7, #24]
 800c214:	00db      	lsls	r3, r3, #3
 800c216:	697a      	ldr	r2, [r7, #20]
 800c218:	fa22 f103 	lsr.w	r1, r2, r3
 800c21c:	69fb      	ldr	r3, [r7, #28]
 800c21e:	009a      	lsls	r2, r3, #2
 800c220:	69bb      	ldr	r3, [r7, #24]
 800c222:	4413      	add	r3, r2
 800c224:	461a      	mov	r2, r3
 800c226:	68bb      	ldr	r3, [r7, #8]
 800c228:	4413      	add	r3, r2
 800c22a:	b2ca      	uxtb	r2, r1
 800c22c:	701a      	strb	r2, [r3, #0]
    for(int j=0;j<4;j++){
 800c22e:	69bb      	ldr	r3, [r7, #24]
 800c230:	3301      	adds	r3, #1
 800c232:	61bb      	str	r3, [r7, #24]
 800c234:	69bb      	ldr	r3, [r7, #24]
 800c236:	2b03      	cmp	r3, #3
 800c238:	ddeb      	ble.n	800c212 <Get_rng+0x3e>
  for(int i=0;i<NumRNG;i++){
 800c23a:	69fb      	ldr	r3, [r7, #28]
 800c23c:	3301      	adds	r3, #1
 800c23e:	61fb      	str	r3, [r7, #28]
 800c240:	79fb      	ldrb	r3, [r7, #7]
 800c242:	69fa      	ldr	r2, [r7, #28]
 800c244:	429a      	cmp	r2, r3
 800c246:	dbcf      	blt.n	800c1e8 <Get_rng+0x14>
    }
  }
}
 800c248:	bf00      	nop
 800c24a:	bf00      	nop
 800c24c:	3720      	adds	r7, #32
 800c24e:	46bd      	mov	sp, r7
 800c250:	bd80      	pop	{r7, pc}
 800c252:	bf00      	nop
 800c254:	200020cc 	.word	0x200020cc

0800c258 <HAL_RNG_ReadyDataCallback>:

void HAL_RNG_ReadyDataCallback(RNG_HandleTypeDef *hrng, uint32_t random32bit){
 800c258:	b480      	push	{r7}
 800c25a:	b083      	sub	sp, #12
 800c25c:	af00      	add	r7, sp, #0
 800c25e:	6078      	str	r0, [r7, #4]
 800c260:	6039      	str	r1, [r7, #0]
  UNUSED(hrng);
  UNUSED(random32bit);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_ReadyDataCallback must be implemented in the user file.
   */
  rngflag =1;
 800c262:	4b04      	ldr	r3, [pc, #16]	@ (800c274 <HAL_RNG_ReadyDataCallback+0x1c>)
 800c264:	2201      	movs	r2, #1
 800c266:	701a      	strb	r2, [r3, #0]
}
 800c268:	bf00      	nop
 800c26a:	370c      	adds	r7, #12
 800c26c:	46bd      	mov	sp, r7
 800c26e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c272:	4770      	bx	lr
 800c274:	200020cc 	.word	0x200020cc

0800c278 <HAL_TIM_PeriodElapsedCallback>:
 *  Created on: Oct 26, 2024
 *      Author: saman
 */
#include "Timer.h"
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c278:	b480      	push	{r7}
 800c27a:	b083      	sub	sp, #12
 800c27c:	af00      	add	r7, sp, #0
 800c27e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
  if(DeviceState){
 800c280:	4b11      	ldr	r3, [pc, #68]	@ (800c2c8 <HAL_TIM_PeriodElapsedCallback+0x50>)
 800c282:	781b      	ldrb	r3, [r3, #0]
 800c284:	2b00      	cmp	r3, #0
 800c286:	d015      	beq.n	800c2b4 <HAL_TIM_PeriodElapsedCallback+0x3c>
    Timer++;
 800c288:	4b10      	ldr	r3, [pc, #64]	@ (800c2cc <HAL_TIM_PeriodElapsedCallback+0x54>)
 800c28a:	681b      	ldr	r3, [r3, #0]
 800c28c:	3301      	adds	r3, #1
 800c28e:	4a0f      	ldr	r2, [pc, #60]	@ (800c2cc <HAL_TIM_PeriodElapsedCallback+0x54>)
 800c290:	6013      	str	r3, [r2, #0]
    if(Timer == TimeoutValue){
 800c292:	4b0e      	ldr	r3, [pc, #56]	@ (800c2cc <HAL_TIM_PeriodElapsedCallback+0x54>)
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	2b78      	cmp	r3, #120	@ 0x78
 800c298:	d10f      	bne.n	800c2ba <HAL_TIM_PeriodElapsedCallback+0x42>
      DeviceState=false;
 800c29a:	4b0b      	ldr	r3, [pc, #44]	@ (800c2c8 <HAL_TIM_PeriodElapsedCallback+0x50>)
 800c29c:	2200      	movs	r2, #0
 800c29e:	701a      	strb	r2, [r3, #0]
      TimerState=true;    //false is lock, true unlock
 800c2a0:	4b0b      	ldr	r3, [pc, #44]	@ (800c2d0 <HAL_TIM_PeriodElapsedCallback+0x58>)
 800c2a2:	2201      	movs	r2, #1
 800c2a4:	701a      	strb	r2, [r3, #0]
      state=Lock;
 800c2a6:	4b0b      	ldr	r3, [pc, #44]	@ (800c2d4 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 800c2a8:	2200      	movs	r2, #0
 800c2aa:	701a      	strb	r2, [r3, #0]
      Timer=0;
 800c2ac:	4b07      	ldr	r3, [pc, #28]	@ (800c2cc <HAL_TIM_PeriodElapsedCallback+0x54>)
 800c2ae:	2200      	movs	r2, #0
 800c2b0:	601a      	str	r2, [r3, #0]
    }
  }else{
    Timer=0;
  }
}
 800c2b2:	e002      	b.n	800c2ba <HAL_TIM_PeriodElapsedCallback+0x42>
    Timer=0;
 800c2b4:	4b05      	ldr	r3, [pc, #20]	@ (800c2cc <HAL_TIM_PeriodElapsedCallback+0x54>)
 800c2b6:	2200      	movs	r2, #0
 800c2b8:	601a      	str	r2, [r3, #0]
}
 800c2ba:	bf00      	nop
 800c2bc:	370c      	adds	r7, #12
 800c2be:	46bd      	mov	sp, r7
 800c2c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2c4:	4770      	bx	lr
 800c2c6:	bf00      	nop
 800c2c8:	200002ac 	.word	0x200002ac
 800c2cc:	200002b0 	.word	0x200002b0
 800c2d0:	200002ab 	.word	0x200002ab
 800c2d4:	200002a9 	.word	0x200002a9

0800c2d8 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800c2d8:	b480      	push	{r7}
 800c2da:	b083      	sub	sp, #12
 800c2dc:	af00      	add	r7, sp, #0
 800c2de:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800c2e0:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800c2e4:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 800c2e8:	f003 0301 	and.w	r3, r3, #1
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	d013      	beq.n	800c318 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800c2f0:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800c2f4:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 800c2f8:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	d00b      	beq.n	800c318 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800c300:	e000      	b.n	800c304 <ITM_SendChar+0x2c>
    {
      __NOP();
 800c302:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800c304:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800c308:	681b      	ldr	r3, [r3, #0]
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	d0f9      	beq.n	800c302 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800c30e:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800c312:	687a      	ldr	r2, [r7, #4]
 800c314:	b2d2      	uxtb	r2, r2
 800c316:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800c318:	687b      	ldr	r3, [r7, #4]
}
 800c31a:	4618      	mov	r0, r3
 800c31c:	370c      	adds	r7, #12
 800c31e:	46bd      	mov	sp, r7
 800c320:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c324:	4770      	bx	lr

0800c326 <_write>:
 *  Created on: Oct 25, 2024
 *      Author: saman
 */

#include "printf_redirect.h"
int _write(int file, char *ptr, int len){
 800c326:	b580      	push	{r7, lr}
 800c328:	b086      	sub	sp, #24
 800c32a:	af00      	add	r7, sp, #0
 800c32c:	60f8      	str	r0, [r7, #12]
 800c32e:	60b9      	str	r1, [r7, #8]
 800c330:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800c332:	2300      	movs	r3, #0
 800c334:	617b      	str	r3, [r7, #20]
 800c336:	e009      	b.n	800c34c <_write+0x26>
  {
    ITM_SendChar(*ptr++);
 800c338:	68bb      	ldr	r3, [r7, #8]
 800c33a:	1c5a      	adds	r2, r3, #1
 800c33c:	60ba      	str	r2, [r7, #8]
 800c33e:	781b      	ldrb	r3, [r3, #0]
 800c340:	4618      	mov	r0, r3
 800c342:	f7ff ffc9 	bl	800c2d8 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800c346:	697b      	ldr	r3, [r7, #20]
 800c348:	3301      	adds	r3, #1
 800c34a:	617b      	str	r3, [r7, #20]
 800c34c:	697a      	ldr	r2, [r7, #20]
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	429a      	cmp	r2, r3
 800c352:	dbf1      	blt.n	800c338 <_write+0x12>
  }
  return len;
 800c354:	687b      	ldr	r3, [r7, #4]
}
 800c356:	4618      	mov	r0, r3
 800c358:	3718      	adds	r7, #24
 800c35a:	46bd      	mov	sp, r7
 800c35c:	bd80      	pop	{r7, pc}
	...

0800c360 <printArray>:


void printArray(const char *arrayName, uint8_t *array, size_t size) {
 800c360:	b580      	push	{r7, lr}
 800c362:	b086      	sub	sp, #24
 800c364:	af00      	add	r7, sp, #0
 800c366:	60f8      	str	r0, [r7, #12]
 800c368:	60b9      	str	r1, [r7, #8]
 800c36a:	607a      	str	r2, [r7, #4]
    DEBUG_PRINT("%s: ", arrayName);
 800c36c:	68f9      	ldr	r1, [r7, #12]
 800c36e:	480e      	ldr	r0, [pc, #56]	@ (800c3a8 <printArray+0x48>)
 800c370:	f000 f93c 	bl	800c5ec <iprintf>
    for (size_t i = 0; i < size; i++) {
 800c374:	2300      	movs	r3, #0
 800c376:	617b      	str	r3, [r7, #20]
 800c378:	e00a      	b.n	800c390 <printArray+0x30>
      DEBUG_PRINT("0x%02X ", array[i]);
 800c37a:	68ba      	ldr	r2, [r7, #8]
 800c37c:	697b      	ldr	r3, [r7, #20]
 800c37e:	4413      	add	r3, r2
 800c380:	781b      	ldrb	r3, [r3, #0]
 800c382:	4619      	mov	r1, r3
 800c384:	4809      	ldr	r0, [pc, #36]	@ (800c3ac <printArray+0x4c>)
 800c386:	f000 f931 	bl	800c5ec <iprintf>
    for (size_t i = 0; i < size; i++) {
 800c38a:	697b      	ldr	r3, [r7, #20]
 800c38c:	3301      	adds	r3, #1
 800c38e:	617b      	str	r3, [r7, #20]
 800c390:	697a      	ldr	r2, [r7, #20]
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	429a      	cmp	r2, r3
 800c396:	d3f0      	bcc.n	800c37a <printArray+0x1a>
    }
    DEBUG_PRINT("\n");
 800c398:	200a      	movs	r0, #10
 800c39a:	f000 f939 	bl	800c610 <putchar>
}
 800c39e:	bf00      	nop
 800c3a0:	3718      	adds	r7, #24
 800c3a2:	46bd      	mov	sp, r7
 800c3a4:	bd80      	pop	{r7, pc}
 800c3a6:	bf00      	nop
 800c3a8:	0800d7fc 	.word	0x0800d7fc
 800c3ac:	0800d804 	.word	0x0800d804

0800c3b0 <__itoa>:
 800c3b0:	1e93      	subs	r3, r2, #2
 800c3b2:	2b22      	cmp	r3, #34	@ 0x22
 800c3b4:	b510      	push	{r4, lr}
 800c3b6:	460c      	mov	r4, r1
 800c3b8:	d904      	bls.n	800c3c4 <__itoa+0x14>
 800c3ba:	2300      	movs	r3, #0
 800c3bc:	700b      	strb	r3, [r1, #0]
 800c3be:	461c      	mov	r4, r3
 800c3c0:	4620      	mov	r0, r4
 800c3c2:	bd10      	pop	{r4, pc}
 800c3c4:	2a0a      	cmp	r2, #10
 800c3c6:	d109      	bne.n	800c3dc <__itoa+0x2c>
 800c3c8:	2800      	cmp	r0, #0
 800c3ca:	da07      	bge.n	800c3dc <__itoa+0x2c>
 800c3cc:	232d      	movs	r3, #45	@ 0x2d
 800c3ce:	700b      	strb	r3, [r1, #0]
 800c3d0:	4240      	negs	r0, r0
 800c3d2:	2101      	movs	r1, #1
 800c3d4:	4421      	add	r1, r4
 800c3d6:	f000 f805 	bl	800c3e4 <__utoa>
 800c3da:	e7f1      	b.n	800c3c0 <__itoa+0x10>
 800c3dc:	2100      	movs	r1, #0
 800c3de:	e7f9      	b.n	800c3d4 <__itoa+0x24>

0800c3e0 <itoa>:
 800c3e0:	f7ff bfe6 	b.w	800c3b0 <__itoa>

0800c3e4 <__utoa>:
 800c3e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c3e6:	4c1f      	ldr	r4, [pc, #124]	@ (800c464 <__utoa+0x80>)
 800c3e8:	b08b      	sub	sp, #44	@ 0x2c
 800c3ea:	4605      	mov	r5, r0
 800c3ec:	460b      	mov	r3, r1
 800c3ee:	466e      	mov	r6, sp
 800c3f0:	f104 0c20 	add.w	ip, r4, #32
 800c3f4:	6820      	ldr	r0, [r4, #0]
 800c3f6:	6861      	ldr	r1, [r4, #4]
 800c3f8:	4637      	mov	r7, r6
 800c3fa:	c703      	stmia	r7!, {r0, r1}
 800c3fc:	3408      	adds	r4, #8
 800c3fe:	4564      	cmp	r4, ip
 800c400:	463e      	mov	r6, r7
 800c402:	d1f7      	bne.n	800c3f4 <__utoa+0x10>
 800c404:	7921      	ldrb	r1, [r4, #4]
 800c406:	7139      	strb	r1, [r7, #4]
 800c408:	1e91      	subs	r1, r2, #2
 800c40a:	6820      	ldr	r0, [r4, #0]
 800c40c:	6038      	str	r0, [r7, #0]
 800c40e:	2922      	cmp	r1, #34	@ 0x22
 800c410:	f04f 0100 	mov.w	r1, #0
 800c414:	d904      	bls.n	800c420 <__utoa+0x3c>
 800c416:	7019      	strb	r1, [r3, #0]
 800c418:	460b      	mov	r3, r1
 800c41a:	4618      	mov	r0, r3
 800c41c:	b00b      	add	sp, #44	@ 0x2c
 800c41e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c420:	1e58      	subs	r0, r3, #1
 800c422:	4684      	mov	ip, r0
 800c424:	fbb5 f7f2 	udiv	r7, r5, r2
 800c428:	fb02 5617 	mls	r6, r2, r7, r5
 800c42c:	3628      	adds	r6, #40	@ 0x28
 800c42e:	446e      	add	r6, sp
 800c430:	460c      	mov	r4, r1
 800c432:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800c436:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800c43a:	462e      	mov	r6, r5
 800c43c:	42b2      	cmp	r2, r6
 800c43e:	f101 0101 	add.w	r1, r1, #1
 800c442:	463d      	mov	r5, r7
 800c444:	d9ee      	bls.n	800c424 <__utoa+0x40>
 800c446:	2200      	movs	r2, #0
 800c448:	545a      	strb	r2, [r3, r1]
 800c44a:	1919      	adds	r1, r3, r4
 800c44c:	1aa5      	subs	r5, r4, r2
 800c44e:	42aa      	cmp	r2, r5
 800c450:	dae3      	bge.n	800c41a <__utoa+0x36>
 800c452:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800c456:	780e      	ldrb	r6, [r1, #0]
 800c458:	7006      	strb	r6, [r0, #0]
 800c45a:	3201      	adds	r2, #1
 800c45c:	f801 5901 	strb.w	r5, [r1], #-1
 800c460:	e7f4      	b.n	800c44c <__utoa+0x68>
 800c462:	bf00      	nop
 800c464:	0800f4d0 	.word	0x0800f4d0

0800c468 <std>:
 800c468:	2300      	movs	r3, #0
 800c46a:	b510      	push	{r4, lr}
 800c46c:	4604      	mov	r4, r0
 800c46e:	e9c0 3300 	strd	r3, r3, [r0]
 800c472:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c476:	6083      	str	r3, [r0, #8]
 800c478:	8181      	strh	r1, [r0, #12]
 800c47a:	6643      	str	r3, [r0, #100]	@ 0x64
 800c47c:	81c2      	strh	r2, [r0, #14]
 800c47e:	6183      	str	r3, [r0, #24]
 800c480:	4619      	mov	r1, r3
 800c482:	2208      	movs	r2, #8
 800c484:	305c      	adds	r0, #92	@ 0x5c
 800c486:	f000 fa11 	bl	800c8ac <memset>
 800c48a:	4b0d      	ldr	r3, [pc, #52]	@ (800c4c0 <std+0x58>)
 800c48c:	6263      	str	r3, [r4, #36]	@ 0x24
 800c48e:	4b0d      	ldr	r3, [pc, #52]	@ (800c4c4 <std+0x5c>)
 800c490:	62a3      	str	r3, [r4, #40]	@ 0x28
 800c492:	4b0d      	ldr	r3, [pc, #52]	@ (800c4c8 <std+0x60>)
 800c494:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800c496:	4b0d      	ldr	r3, [pc, #52]	@ (800c4cc <std+0x64>)
 800c498:	6323      	str	r3, [r4, #48]	@ 0x30
 800c49a:	4b0d      	ldr	r3, [pc, #52]	@ (800c4d0 <std+0x68>)
 800c49c:	6224      	str	r4, [r4, #32]
 800c49e:	429c      	cmp	r4, r3
 800c4a0:	d006      	beq.n	800c4b0 <std+0x48>
 800c4a2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800c4a6:	4294      	cmp	r4, r2
 800c4a8:	d002      	beq.n	800c4b0 <std+0x48>
 800c4aa:	33d0      	adds	r3, #208	@ 0xd0
 800c4ac:	429c      	cmp	r4, r3
 800c4ae:	d105      	bne.n	800c4bc <std+0x54>
 800c4b0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800c4b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c4b8:	f000 ba70 	b.w	800c99c <__retarget_lock_init_recursive>
 800c4bc:	bd10      	pop	{r4, pc}
 800c4be:	bf00      	nop
 800c4c0:	0800c6dd 	.word	0x0800c6dd
 800c4c4:	0800c6ff 	.word	0x0800c6ff
 800c4c8:	0800c737 	.word	0x0800c737
 800c4cc:	0800c75b 	.word	0x0800c75b
 800c4d0:	200020d0 	.word	0x200020d0

0800c4d4 <stdio_exit_handler>:
 800c4d4:	4a02      	ldr	r2, [pc, #8]	@ (800c4e0 <stdio_exit_handler+0xc>)
 800c4d6:	4903      	ldr	r1, [pc, #12]	@ (800c4e4 <stdio_exit_handler+0x10>)
 800c4d8:	4803      	ldr	r0, [pc, #12]	@ (800c4e8 <stdio_exit_handler+0x14>)
 800c4da:	f000 b869 	b.w	800c5b0 <_fwalk_sglue>
 800c4de:	bf00      	nop
 800c4e0:	20000100 	.word	0x20000100
 800c4e4:	0800d261 	.word	0x0800d261
 800c4e8:	20000110 	.word	0x20000110

0800c4ec <cleanup_stdio>:
 800c4ec:	6841      	ldr	r1, [r0, #4]
 800c4ee:	4b0c      	ldr	r3, [pc, #48]	@ (800c520 <cleanup_stdio+0x34>)
 800c4f0:	4299      	cmp	r1, r3
 800c4f2:	b510      	push	{r4, lr}
 800c4f4:	4604      	mov	r4, r0
 800c4f6:	d001      	beq.n	800c4fc <cleanup_stdio+0x10>
 800c4f8:	f000 feb2 	bl	800d260 <_fflush_r>
 800c4fc:	68a1      	ldr	r1, [r4, #8]
 800c4fe:	4b09      	ldr	r3, [pc, #36]	@ (800c524 <cleanup_stdio+0x38>)
 800c500:	4299      	cmp	r1, r3
 800c502:	d002      	beq.n	800c50a <cleanup_stdio+0x1e>
 800c504:	4620      	mov	r0, r4
 800c506:	f000 feab 	bl	800d260 <_fflush_r>
 800c50a:	68e1      	ldr	r1, [r4, #12]
 800c50c:	4b06      	ldr	r3, [pc, #24]	@ (800c528 <cleanup_stdio+0x3c>)
 800c50e:	4299      	cmp	r1, r3
 800c510:	d004      	beq.n	800c51c <cleanup_stdio+0x30>
 800c512:	4620      	mov	r0, r4
 800c514:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c518:	f000 bea2 	b.w	800d260 <_fflush_r>
 800c51c:	bd10      	pop	{r4, pc}
 800c51e:	bf00      	nop
 800c520:	200020d0 	.word	0x200020d0
 800c524:	20002138 	.word	0x20002138
 800c528:	200021a0 	.word	0x200021a0

0800c52c <global_stdio_init.part.0>:
 800c52c:	b510      	push	{r4, lr}
 800c52e:	4b0b      	ldr	r3, [pc, #44]	@ (800c55c <global_stdio_init.part.0+0x30>)
 800c530:	4c0b      	ldr	r4, [pc, #44]	@ (800c560 <global_stdio_init.part.0+0x34>)
 800c532:	4a0c      	ldr	r2, [pc, #48]	@ (800c564 <global_stdio_init.part.0+0x38>)
 800c534:	601a      	str	r2, [r3, #0]
 800c536:	4620      	mov	r0, r4
 800c538:	2200      	movs	r2, #0
 800c53a:	2104      	movs	r1, #4
 800c53c:	f7ff ff94 	bl	800c468 <std>
 800c540:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800c544:	2201      	movs	r2, #1
 800c546:	2109      	movs	r1, #9
 800c548:	f7ff ff8e 	bl	800c468 <std>
 800c54c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800c550:	2202      	movs	r2, #2
 800c552:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c556:	2112      	movs	r1, #18
 800c558:	f7ff bf86 	b.w	800c468 <std>
 800c55c:	20002208 	.word	0x20002208
 800c560:	200020d0 	.word	0x200020d0
 800c564:	0800c4d5 	.word	0x0800c4d5

0800c568 <__sfp_lock_acquire>:
 800c568:	4801      	ldr	r0, [pc, #4]	@ (800c570 <__sfp_lock_acquire+0x8>)
 800c56a:	f000 ba18 	b.w	800c99e <__retarget_lock_acquire_recursive>
 800c56e:	bf00      	nop
 800c570:	20002211 	.word	0x20002211

0800c574 <__sfp_lock_release>:
 800c574:	4801      	ldr	r0, [pc, #4]	@ (800c57c <__sfp_lock_release+0x8>)
 800c576:	f000 ba13 	b.w	800c9a0 <__retarget_lock_release_recursive>
 800c57a:	bf00      	nop
 800c57c:	20002211 	.word	0x20002211

0800c580 <__sinit>:
 800c580:	b510      	push	{r4, lr}
 800c582:	4604      	mov	r4, r0
 800c584:	f7ff fff0 	bl	800c568 <__sfp_lock_acquire>
 800c588:	6a23      	ldr	r3, [r4, #32]
 800c58a:	b11b      	cbz	r3, 800c594 <__sinit+0x14>
 800c58c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c590:	f7ff bff0 	b.w	800c574 <__sfp_lock_release>
 800c594:	4b04      	ldr	r3, [pc, #16]	@ (800c5a8 <__sinit+0x28>)
 800c596:	6223      	str	r3, [r4, #32]
 800c598:	4b04      	ldr	r3, [pc, #16]	@ (800c5ac <__sinit+0x2c>)
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	d1f5      	bne.n	800c58c <__sinit+0xc>
 800c5a0:	f7ff ffc4 	bl	800c52c <global_stdio_init.part.0>
 800c5a4:	e7f2      	b.n	800c58c <__sinit+0xc>
 800c5a6:	bf00      	nop
 800c5a8:	0800c4ed 	.word	0x0800c4ed
 800c5ac:	20002208 	.word	0x20002208

0800c5b0 <_fwalk_sglue>:
 800c5b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c5b4:	4607      	mov	r7, r0
 800c5b6:	4688      	mov	r8, r1
 800c5b8:	4614      	mov	r4, r2
 800c5ba:	2600      	movs	r6, #0
 800c5bc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c5c0:	f1b9 0901 	subs.w	r9, r9, #1
 800c5c4:	d505      	bpl.n	800c5d2 <_fwalk_sglue+0x22>
 800c5c6:	6824      	ldr	r4, [r4, #0]
 800c5c8:	2c00      	cmp	r4, #0
 800c5ca:	d1f7      	bne.n	800c5bc <_fwalk_sglue+0xc>
 800c5cc:	4630      	mov	r0, r6
 800c5ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c5d2:	89ab      	ldrh	r3, [r5, #12]
 800c5d4:	2b01      	cmp	r3, #1
 800c5d6:	d907      	bls.n	800c5e8 <_fwalk_sglue+0x38>
 800c5d8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c5dc:	3301      	adds	r3, #1
 800c5de:	d003      	beq.n	800c5e8 <_fwalk_sglue+0x38>
 800c5e0:	4629      	mov	r1, r5
 800c5e2:	4638      	mov	r0, r7
 800c5e4:	47c0      	blx	r8
 800c5e6:	4306      	orrs	r6, r0
 800c5e8:	3568      	adds	r5, #104	@ 0x68
 800c5ea:	e7e9      	b.n	800c5c0 <_fwalk_sglue+0x10>

0800c5ec <iprintf>:
 800c5ec:	b40f      	push	{r0, r1, r2, r3}
 800c5ee:	b507      	push	{r0, r1, r2, lr}
 800c5f0:	4906      	ldr	r1, [pc, #24]	@ (800c60c <iprintf+0x20>)
 800c5f2:	ab04      	add	r3, sp, #16
 800c5f4:	6808      	ldr	r0, [r1, #0]
 800c5f6:	f853 2b04 	ldr.w	r2, [r3], #4
 800c5fa:	6881      	ldr	r1, [r0, #8]
 800c5fc:	9301      	str	r3, [sp, #4]
 800c5fe:	f000 fb05 	bl	800cc0c <_vfiprintf_r>
 800c602:	b003      	add	sp, #12
 800c604:	f85d eb04 	ldr.w	lr, [sp], #4
 800c608:	b004      	add	sp, #16
 800c60a:	4770      	bx	lr
 800c60c:	2000010c 	.word	0x2000010c

0800c610 <putchar>:
 800c610:	4b02      	ldr	r3, [pc, #8]	@ (800c61c <putchar+0xc>)
 800c612:	4601      	mov	r1, r0
 800c614:	6818      	ldr	r0, [r3, #0]
 800c616:	6882      	ldr	r2, [r0, #8]
 800c618:	f000 beac 	b.w	800d374 <_putc_r>
 800c61c:	2000010c 	.word	0x2000010c

0800c620 <_puts_r>:
 800c620:	6a03      	ldr	r3, [r0, #32]
 800c622:	b570      	push	{r4, r5, r6, lr}
 800c624:	6884      	ldr	r4, [r0, #8]
 800c626:	4605      	mov	r5, r0
 800c628:	460e      	mov	r6, r1
 800c62a:	b90b      	cbnz	r3, 800c630 <_puts_r+0x10>
 800c62c:	f7ff ffa8 	bl	800c580 <__sinit>
 800c630:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c632:	07db      	lsls	r3, r3, #31
 800c634:	d405      	bmi.n	800c642 <_puts_r+0x22>
 800c636:	89a3      	ldrh	r3, [r4, #12]
 800c638:	0598      	lsls	r0, r3, #22
 800c63a:	d402      	bmi.n	800c642 <_puts_r+0x22>
 800c63c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c63e:	f000 f9ae 	bl	800c99e <__retarget_lock_acquire_recursive>
 800c642:	89a3      	ldrh	r3, [r4, #12]
 800c644:	0719      	lsls	r1, r3, #28
 800c646:	d502      	bpl.n	800c64e <_puts_r+0x2e>
 800c648:	6923      	ldr	r3, [r4, #16]
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	d135      	bne.n	800c6ba <_puts_r+0x9a>
 800c64e:	4621      	mov	r1, r4
 800c650:	4628      	mov	r0, r5
 800c652:	f000 f8c5 	bl	800c7e0 <__swsetup_r>
 800c656:	b380      	cbz	r0, 800c6ba <_puts_r+0x9a>
 800c658:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800c65c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c65e:	07da      	lsls	r2, r3, #31
 800c660:	d405      	bmi.n	800c66e <_puts_r+0x4e>
 800c662:	89a3      	ldrh	r3, [r4, #12]
 800c664:	059b      	lsls	r3, r3, #22
 800c666:	d402      	bmi.n	800c66e <_puts_r+0x4e>
 800c668:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c66a:	f000 f999 	bl	800c9a0 <__retarget_lock_release_recursive>
 800c66e:	4628      	mov	r0, r5
 800c670:	bd70      	pop	{r4, r5, r6, pc}
 800c672:	2b00      	cmp	r3, #0
 800c674:	da04      	bge.n	800c680 <_puts_r+0x60>
 800c676:	69a2      	ldr	r2, [r4, #24]
 800c678:	429a      	cmp	r2, r3
 800c67a:	dc17      	bgt.n	800c6ac <_puts_r+0x8c>
 800c67c:	290a      	cmp	r1, #10
 800c67e:	d015      	beq.n	800c6ac <_puts_r+0x8c>
 800c680:	6823      	ldr	r3, [r4, #0]
 800c682:	1c5a      	adds	r2, r3, #1
 800c684:	6022      	str	r2, [r4, #0]
 800c686:	7019      	strb	r1, [r3, #0]
 800c688:	68a3      	ldr	r3, [r4, #8]
 800c68a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800c68e:	3b01      	subs	r3, #1
 800c690:	60a3      	str	r3, [r4, #8]
 800c692:	2900      	cmp	r1, #0
 800c694:	d1ed      	bne.n	800c672 <_puts_r+0x52>
 800c696:	2b00      	cmp	r3, #0
 800c698:	da11      	bge.n	800c6be <_puts_r+0x9e>
 800c69a:	4622      	mov	r2, r4
 800c69c:	210a      	movs	r1, #10
 800c69e:	4628      	mov	r0, r5
 800c6a0:	f000 f85f 	bl	800c762 <__swbuf_r>
 800c6a4:	3001      	adds	r0, #1
 800c6a6:	d0d7      	beq.n	800c658 <_puts_r+0x38>
 800c6a8:	250a      	movs	r5, #10
 800c6aa:	e7d7      	b.n	800c65c <_puts_r+0x3c>
 800c6ac:	4622      	mov	r2, r4
 800c6ae:	4628      	mov	r0, r5
 800c6b0:	f000 f857 	bl	800c762 <__swbuf_r>
 800c6b4:	3001      	adds	r0, #1
 800c6b6:	d1e7      	bne.n	800c688 <_puts_r+0x68>
 800c6b8:	e7ce      	b.n	800c658 <_puts_r+0x38>
 800c6ba:	3e01      	subs	r6, #1
 800c6bc:	e7e4      	b.n	800c688 <_puts_r+0x68>
 800c6be:	6823      	ldr	r3, [r4, #0]
 800c6c0:	1c5a      	adds	r2, r3, #1
 800c6c2:	6022      	str	r2, [r4, #0]
 800c6c4:	220a      	movs	r2, #10
 800c6c6:	701a      	strb	r2, [r3, #0]
 800c6c8:	e7ee      	b.n	800c6a8 <_puts_r+0x88>
	...

0800c6cc <puts>:
 800c6cc:	4b02      	ldr	r3, [pc, #8]	@ (800c6d8 <puts+0xc>)
 800c6ce:	4601      	mov	r1, r0
 800c6d0:	6818      	ldr	r0, [r3, #0]
 800c6d2:	f7ff bfa5 	b.w	800c620 <_puts_r>
 800c6d6:	bf00      	nop
 800c6d8:	2000010c 	.word	0x2000010c

0800c6dc <__sread>:
 800c6dc:	b510      	push	{r4, lr}
 800c6de:	460c      	mov	r4, r1
 800c6e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c6e4:	f000 f90c 	bl	800c900 <_read_r>
 800c6e8:	2800      	cmp	r0, #0
 800c6ea:	bfab      	itete	ge
 800c6ec:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800c6ee:	89a3      	ldrhlt	r3, [r4, #12]
 800c6f0:	181b      	addge	r3, r3, r0
 800c6f2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800c6f6:	bfac      	ite	ge
 800c6f8:	6563      	strge	r3, [r4, #84]	@ 0x54
 800c6fa:	81a3      	strhlt	r3, [r4, #12]
 800c6fc:	bd10      	pop	{r4, pc}

0800c6fe <__swrite>:
 800c6fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c702:	461f      	mov	r7, r3
 800c704:	898b      	ldrh	r3, [r1, #12]
 800c706:	05db      	lsls	r3, r3, #23
 800c708:	4605      	mov	r5, r0
 800c70a:	460c      	mov	r4, r1
 800c70c:	4616      	mov	r6, r2
 800c70e:	d505      	bpl.n	800c71c <__swrite+0x1e>
 800c710:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c714:	2302      	movs	r3, #2
 800c716:	2200      	movs	r2, #0
 800c718:	f000 f8e0 	bl	800c8dc <_lseek_r>
 800c71c:	89a3      	ldrh	r3, [r4, #12]
 800c71e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c722:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c726:	81a3      	strh	r3, [r4, #12]
 800c728:	4632      	mov	r2, r6
 800c72a:	463b      	mov	r3, r7
 800c72c:	4628      	mov	r0, r5
 800c72e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c732:	f000 b8f7 	b.w	800c924 <_write_r>

0800c736 <__sseek>:
 800c736:	b510      	push	{r4, lr}
 800c738:	460c      	mov	r4, r1
 800c73a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c73e:	f000 f8cd 	bl	800c8dc <_lseek_r>
 800c742:	1c43      	adds	r3, r0, #1
 800c744:	89a3      	ldrh	r3, [r4, #12]
 800c746:	bf15      	itete	ne
 800c748:	6560      	strne	r0, [r4, #84]	@ 0x54
 800c74a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800c74e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800c752:	81a3      	strheq	r3, [r4, #12]
 800c754:	bf18      	it	ne
 800c756:	81a3      	strhne	r3, [r4, #12]
 800c758:	bd10      	pop	{r4, pc}

0800c75a <__sclose>:
 800c75a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c75e:	f000 b8ad 	b.w	800c8bc <_close_r>

0800c762 <__swbuf_r>:
 800c762:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c764:	460e      	mov	r6, r1
 800c766:	4614      	mov	r4, r2
 800c768:	4605      	mov	r5, r0
 800c76a:	b118      	cbz	r0, 800c774 <__swbuf_r+0x12>
 800c76c:	6a03      	ldr	r3, [r0, #32]
 800c76e:	b90b      	cbnz	r3, 800c774 <__swbuf_r+0x12>
 800c770:	f7ff ff06 	bl	800c580 <__sinit>
 800c774:	69a3      	ldr	r3, [r4, #24]
 800c776:	60a3      	str	r3, [r4, #8]
 800c778:	89a3      	ldrh	r3, [r4, #12]
 800c77a:	071a      	lsls	r2, r3, #28
 800c77c:	d501      	bpl.n	800c782 <__swbuf_r+0x20>
 800c77e:	6923      	ldr	r3, [r4, #16]
 800c780:	b943      	cbnz	r3, 800c794 <__swbuf_r+0x32>
 800c782:	4621      	mov	r1, r4
 800c784:	4628      	mov	r0, r5
 800c786:	f000 f82b 	bl	800c7e0 <__swsetup_r>
 800c78a:	b118      	cbz	r0, 800c794 <__swbuf_r+0x32>
 800c78c:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800c790:	4638      	mov	r0, r7
 800c792:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c794:	6823      	ldr	r3, [r4, #0]
 800c796:	6922      	ldr	r2, [r4, #16]
 800c798:	1a98      	subs	r0, r3, r2
 800c79a:	6963      	ldr	r3, [r4, #20]
 800c79c:	b2f6      	uxtb	r6, r6
 800c79e:	4283      	cmp	r3, r0
 800c7a0:	4637      	mov	r7, r6
 800c7a2:	dc05      	bgt.n	800c7b0 <__swbuf_r+0x4e>
 800c7a4:	4621      	mov	r1, r4
 800c7a6:	4628      	mov	r0, r5
 800c7a8:	f000 fd5a 	bl	800d260 <_fflush_r>
 800c7ac:	2800      	cmp	r0, #0
 800c7ae:	d1ed      	bne.n	800c78c <__swbuf_r+0x2a>
 800c7b0:	68a3      	ldr	r3, [r4, #8]
 800c7b2:	3b01      	subs	r3, #1
 800c7b4:	60a3      	str	r3, [r4, #8]
 800c7b6:	6823      	ldr	r3, [r4, #0]
 800c7b8:	1c5a      	adds	r2, r3, #1
 800c7ba:	6022      	str	r2, [r4, #0]
 800c7bc:	701e      	strb	r6, [r3, #0]
 800c7be:	6962      	ldr	r2, [r4, #20]
 800c7c0:	1c43      	adds	r3, r0, #1
 800c7c2:	429a      	cmp	r2, r3
 800c7c4:	d004      	beq.n	800c7d0 <__swbuf_r+0x6e>
 800c7c6:	89a3      	ldrh	r3, [r4, #12]
 800c7c8:	07db      	lsls	r3, r3, #31
 800c7ca:	d5e1      	bpl.n	800c790 <__swbuf_r+0x2e>
 800c7cc:	2e0a      	cmp	r6, #10
 800c7ce:	d1df      	bne.n	800c790 <__swbuf_r+0x2e>
 800c7d0:	4621      	mov	r1, r4
 800c7d2:	4628      	mov	r0, r5
 800c7d4:	f000 fd44 	bl	800d260 <_fflush_r>
 800c7d8:	2800      	cmp	r0, #0
 800c7da:	d0d9      	beq.n	800c790 <__swbuf_r+0x2e>
 800c7dc:	e7d6      	b.n	800c78c <__swbuf_r+0x2a>
	...

0800c7e0 <__swsetup_r>:
 800c7e0:	b538      	push	{r3, r4, r5, lr}
 800c7e2:	4b29      	ldr	r3, [pc, #164]	@ (800c888 <__swsetup_r+0xa8>)
 800c7e4:	4605      	mov	r5, r0
 800c7e6:	6818      	ldr	r0, [r3, #0]
 800c7e8:	460c      	mov	r4, r1
 800c7ea:	b118      	cbz	r0, 800c7f4 <__swsetup_r+0x14>
 800c7ec:	6a03      	ldr	r3, [r0, #32]
 800c7ee:	b90b      	cbnz	r3, 800c7f4 <__swsetup_r+0x14>
 800c7f0:	f7ff fec6 	bl	800c580 <__sinit>
 800c7f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c7f8:	0719      	lsls	r1, r3, #28
 800c7fa:	d422      	bmi.n	800c842 <__swsetup_r+0x62>
 800c7fc:	06da      	lsls	r2, r3, #27
 800c7fe:	d407      	bmi.n	800c810 <__swsetup_r+0x30>
 800c800:	2209      	movs	r2, #9
 800c802:	602a      	str	r2, [r5, #0]
 800c804:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c808:	81a3      	strh	r3, [r4, #12]
 800c80a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c80e:	e033      	b.n	800c878 <__swsetup_r+0x98>
 800c810:	0758      	lsls	r0, r3, #29
 800c812:	d512      	bpl.n	800c83a <__swsetup_r+0x5a>
 800c814:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c816:	b141      	cbz	r1, 800c82a <__swsetup_r+0x4a>
 800c818:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c81c:	4299      	cmp	r1, r3
 800c81e:	d002      	beq.n	800c826 <__swsetup_r+0x46>
 800c820:	4628      	mov	r0, r5
 800c822:	f000 f8d1 	bl	800c9c8 <_free_r>
 800c826:	2300      	movs	r3, #0
 800c828:	6363      	str	r3, [r4, #52]	@ 0x34
 800c82a:	89a3      	ldrh	r3, [r4, #12]
 800c82c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c830:	81a3      	strh	r3, [r4, #12]
 800c832:	2300      	movs	r3, #0
 800c834:	6063      	str	r3, [r4, #4]
 800c836:	6923      	ldr	r3, [r4, #16]
 800c838:	6023      	str	r3, [r4, #0]
 800c83a:	89a3      	ldrh	r3, [r4, #12]
 800c83c:	f043 0308 	orr.w	r3, r3, #8
 800c840:	81a3      	strh	r3, [r4, #12]
 800c842:	6923      	ldr	r3, [r4, #16]
 800c844:	b94b      	cbnz	r3, 800c85a <__swsetup_r+0x7a>
 800c846:	89a3      	ldrh	r3, [r4, #12]
 800c848:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c84c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c850:	d003      	beq.n	800c85a <__swsetup_r+0x7a>
 800c852:	4621      	mov	r1, r4
 800c854:	4628      	mov	r0, r5
 800c856:	f000 fd51 	bl	800d2fc <__smakebuf_r>
 800c85a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c85e:	f013 0201 	ands.w	r2, r3, #1
 800c862:	d00a      	beq.n	800c87a <__swsetup_r+0x9a>
 800c864:	2200      	movs	r2, #0
 800c866:	60a2      	str	r2, [r4, #8]
 800c868:	6962      	ldr	r2, [r4, #20]
 800c86a:	4252      	negs	r2, r2
 800c86c:	61a2      	str	r2, [r4, #24]
 800c86e:	6922      	ldr	r2, [r4, #16]
 800c870:	b942      	cbnz	r2, 800c884 <__swsetup_r+0xa4>
 800c872:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c876:	d1c5      	bne.n	800c804 <__swsetup_r+0x24>
 800c878:	bd38      	pop	{r3, r4, r5, pc}
 800c87a:	0799      	lsls	r1, r3, #30
 800c87c:	bf58      	it	pl
 800c87e:	6962      	ldrpl	r2, [r4, #20]
 800c880:	60a2      	str	r2, [r4, #8]
 800c882:	e7f4      	b.n	800c86e <__swsetup_r+0x8e>
 800c884:	2000      	movs	r0, #0
 800c886:	e7f7      	b.n	800c878 <__swsetup_r+0x98>
 800c888:	2000010c 	.word	0x2000010c

0800c88c <memcmp>:
 800c88c:	b510      	push	{r4, lr}
 800c88e:	3901      	subs	r1, #1
 800c890:	4402      	add	r2, r0
 800c892:	4290      	cmp	r0, r2
 800c894:	d101      	bne.n	800c89a <memcmp+0xe>
 800c896:	2000      	movs	r0, #0
 800c898:	e005      	b.n	800c8a6 <memcmp+0x1a>
 800c89a:	7803      	ldrb	r3, [r0, #0]
 800c89c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800c8a0:	42a3      	cmp	r3, r4
 800c8a2:	d001      	beq.n	800c8a8 <memcmp+0x1c>
 800c8a4:	1b18      	subs	r0, r3, r4
 800c8a6:	bd10      	pop	{r4, pc}
 800c8a8:	3001      	adds	r0, #1
 800c8aa:	e7f2      	b.n	800c892 <memcmp+0x6>

0800c8ac <memset>:
 800c8ac:	4402      	add	r2, r0
 800c8ae:	4603      	mov	r3, r0
 800c8b0:	4293      	cmp	r3, r2
 800c8b2:	d100      	bne.n	800c8b6 <memset+0xa>
 800c8b4:	4770      	bx	lr
 800c8b6:	f803 1b01 	strb.w	r1, [r3], #1
 800c8ba:	e7f9      	b.n	800c8b0 <memset+0x4>

0800c8bc <_close_r>:
 800c8bc:	b538      	push	{r3, r4, r5, lr}
 800c8be:	4d06      	ldr	r5, [pc, #24]	@ (800c8d8 <_close_r+0x1c>)
 800c8c0:	2300      	movs	r3, #0
 800c8c2:	4604      	mov	r4, r0
 800c8c4:	4608      	mov	r0, r1
 800c8c6:	602b      	str	r3, [r5, #0]
 800c8c8:	f7f5 ff95 	bl	80027f6 <_close>
 800c8cc:	1c43      	adds	r3, r0, #1
 800c8ce:	d102      	bne.n	800c8d6 <_close_r+0x1a>
 800c8d0:	682b      	ldr	r3, [r5, #0]
 800c8d2:	b103      	cbz	r3, 800c8d6 <_close_r+0x1a>
 800c8d4:	6023      	str	r3, [r4, #0]
 800c8d6:	bd38      	pop	{r3, r4, r5, pc}
 800c8d8:	2000220c 	.word	0x2000220c

0800c8dc <_lseek_r>:
 800c8dc:	b538      	push	{r3, r4, r5, lr}
 800c8de:	4d07      	ldr	r5, [pc, #28]	@ (800c8fc <_lseek_r+0x20>)
 800c8e0:	4604      	mov	r4, r0
 800c8e2:	4608      	mov	r0, r1
 800c8e4:	4611      	mov	r1, r2
 800c8e6:	2200      	movs	r2, #0
 800c8e8:	602a      	str	r2, [r5, #0]
 800c8ea:	461a      	mov	r2, r3
 800c8ec:	f7f5 ffaa 	bl	8002844 <_lseek>
 800c8f0:	1c43      	adds	r3, r0, #1
 800c8f2:	d102      	bne.n	800c8fa <_lseek_r+0x1e>
 800c8f4:	682b      	ldr	r3, [r5, #0]
 800c8f6:	b103      	cbz	r3, 800c8fa <_lseek_r+0x1e>
 800c8f8:	6023      	str	r3, [r4, #0]
 800c8fa:	bd38      	pop	{r3, r4, r5, pc}
 800c8fc:	2000220c 	.word	0x2000220c

0800c900 <_read_r>:
 800c900:	b538      	push	{r3, r4, r5, lr}
 800c902:	4d07      	ldr	r5, [pc, #28]	@ (800c920 <_read_r+0x20>)
 800c904:	4604      	mov	r4, r0
 800c906:	4608      	mov	r0, r1
 800c908:	4611      	mov	r1, r2
 800c90a:	2200      	movs	r2, #0
 800c90c:	602a      	str	r2, [r5, #0]
 800c90e:	461a      	mov	r2, r3
 800c910:	f7f5 ff54 	bl	80027bc <_read>
 800c914:	1c43      	adds	r3, r0, #1
 800c916:	d102      	bne.n	800c91e <_read_r+0x1e>
 800c918:	682b      	ldr	r3, [r5, #0]
 800c91a:	b103      	cbz	r3, 800c91e <_read_r+0x1e>
 800c91c:	6023      	str	r3, [r4, #0]
 800c91e:	bd38      	pop	{r3, r4, r5, pc}
 800c920:	2000220c 	.word	0x2000220c

0800c924 <_write_r>:
 800c924:	b538      	push	{r3, r4, r5, lr}
 800c926:	4d07      	ldr	r5, [pc, #28]	@ (800c944 <_write_r+0x20>)
 800c928:	4604      	mov	r4, r0
 800c92a:	4608      	mov	r0, r1
 800c92c:	4611      	mov	r1, r2
 800c92e:	2200      	movs	r2, #0
 800c930:	602a      	str	r2, [r5, #0]
 800c932:	461a      	mov	r2, r3
 800c934:	f7ff fcf7 	bl	800c326 <_write>
 800c938:	1c43      	adds	r3, r0, #1
 800c93a:	d102      	bne.n	800c942 <_write_r+0x1e>
 800c93c:	682b      	ldr	r3, [r5, #0]
 800c93e:	b103      	cbz	r3, 800c942 <_write_r+0x1e>
 800c940:	6023      	str	r3, [r4, #0]
 800c942:	bd38      	pop	{r3, r4, r5, pc}
 800c944:	2000220c 	.word	0x2000220c

0800c948 <__errno>:
 800c948:	4b01      	ldr	r3, [pc, #4]	@ (800c950 <__errno+0x8>)
 800c94a:	6818      	ldr	r0, [r3, #0]
 800c94c:	4770      	bx	lr
 800c94e:	bf00      	nop
 800c950:	2000010c 	.word	0x2000010c

0800c954 <__libc_init_array>:
 800c954:	b570      	push	{r4, r5, r6, lr}
 800c956:	4d0d      	ldr	r5, [pc, #52]	@ (800c98c <__libc_init_array+0x38>)
 800c958:	4c0d      	ldr	r4, [pc, #52]	@ (800c990 <__libc_init_array+0x3c>)
 800c95a:	1b64      	subs	r4, r4, r5
 800c95c:	10a4      	asrs	r4, r4, #2
 800c95e:	2600      	movs	r6, #0
 800c960:	42a6      	cmp	r6, r4
 800c962:	d109      	bne.n	800c978 <__libc_init_array+0x24>
 800c964:	4d0b      	ldr	r5, [pc, #44]	@ (800c994 <__libc_init_array+0x40>)
 800c966:	4c0c      	ldr	r4, [pc, #48]	@ (800c998 <__libc_init_array+0x44>)
 800c968:	f000 fd6a 	bl	800d440 <_init>
 800c96c:	1b64      	subs	r4, r4, r5
 800c96e:	10a4      	asrs	r4, r4, #2
 800c970:	2600      	movs	r6, #0
 800c972:	42a6      	cmp	r6, r4
 800c974:	d105      	bne.n	800c982 <__libc_init_array+0x2e>
 800c976:	bd70      	pop	{r4, r5, r6, pc}
 800c978:	f855 3b04 	ldr.w	r3, [r5], #4
 800c97c:	4798      	blx	r3
 800c97e:	3601      	adds	r6, #1
 800c980:	e7ee      	b.n	800c960 <__libc_init_array+0xc>
 800c982:	f855 3b04 	ldr.w	r3, [r5], #4
 800c986:	4798      	blx	r3
 800c988:	3601      	adds	r6, #1
 800c98a:	e7f2      	b.n	800c972 <__libc_init_array+0x1e>
 800c98c:	0800ff30 	.word	0x0800ff30
 800c990:	0800ff30 	.word	0x0800ff30
 800c994:	0800ff30 	.word	0x0800ff30
 800c998:	0800ff34 	.word	0x0800ff34

0800c99c <__retarget_lock_init_recursive>:
 800c99c:	4770      	bx	lr

0800c99e <__retarget_lock_acquire_recursive>:
 800c99e:	4770      	bx	lr

0800c9a0 <__retarget_lock_release_recursive>:
 800c9a0:	4770      	bx	lr

0800c9a2 <__aeabi_memcpy>:
 800c9a2:	f000 b803 	b.w	800c9ac <memcpy>

0800c9a6 <__aeabi_memclr>:
 800c9a6:	2200      	movs	r2, #0
 800c9a8:	f7f5 b8dc 	b.w	8001b64 <__aeabi_memset>

0800c9ac <memcpy>:
 800c9ac:	440a      	add	r2, r1
 800c9ae:	4291      	cmp	r1, r2
 800c9b0:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800c9b4:	d100      	bne.n	800c9b8 <memcpy+0xc>
 800c9b6:	4770      	bx	lr
 800c9b8:	b510      	push	{r4, lr}
 800c9ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c9be:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c9c2:	4291      	cmp	r1, r2
 800c9c4:	d1f9      	bne.n	800c9ba <memcpy+0xe>
 800c9c6:	bd10      	pop	{r4, pc}

0800c9c8 <_free_r>:
 800c9c8:	b538      	push	{r3, r4, r5, lr}
 800c9ca:	4605      	mov	r5, r0
 800c9cc:	2900      	cmp	r1, #0
 800c9ce:	d041      	beq.n	800ca54 <_free_r+0x8c>
 800c9d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c9d4:	1f0c      	subs	r4, r1, #4
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	bfb8      	it	lt
 800c9da:	18e4      	addlt	r4, r4, r3
 800c9dc:	f000 f8e0 	bl	800cba0 <__malloc_lock>
 800c9e0:	4a1d      	ldr	r2, [pc, #116]	@ (800ca58 <_free_r+0x90>)
 800c9e2:	6813      	ldr	r3, [r2, #0]
 800c9e4:	b933      	cbnz	r3, 800c9f4 <_free_r+0x2c>
 800c9e6:	6063      	str	r3, [r4, #4]
 800c9e8:	6014      	str	r4, [r2, #0]
 800c9ea:	4628      	mov	r0, r5
 800c9ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c9f0:	f000 b8dc 	b.w	800cbac <__malloc_unlock>
 800c9f4:	42a3      	cmp	r3, r4
 800c9f6:	d908      	bls.n	800ca0a <_free_r+0x42>
 800c9f8:	6820      	ldr	r0, [r4, #0]
 800c9fa:	1821      	adds	r1, r4, r0
 800c9fc:	428b      	cmp	r3, r1
 800c9fe:	bf01      	itttt	eq
 800ca00:	6819      	ldreq	r1, [r3, #0]
 800ca02:	685b      	ldreq	r3, [r3, #4]
 800ca04:	1809      	addeq	r1, r1, r0
 800ca06:	6021      	streq	r1, [r4, #0]
 800ca08:	e7ed      	b.n	800c9e6 <_free_r+0x1e>
 800ca0a:	461a      	mov	r2, r3
 800ca0c:	685b      	ldr	r3, [r3, #4]
 800ca0e:	b10b      	cbz	r3, 800ca14 <_free_r+0x4c>
 800ca10:	42a3      	cmp	r3, r4
 800ca12:	d9fa      	bls.n	800ca0a <_free_r+0x42>
 800ca14:	6811      	ldr	r1, [r2, #0]
 800ca16:	1850      	adds	r0, r2, r1
 800ca18:	42a0      	cmp	r0, r4
 800ca1a:	d10b      	bne.n	800ca34 <_free_r+0x6c>
 800ca1c:	6820      	ldr	r0, [r4, #0]
 800ca1e:	4401      	add	r1, r0
 800ca20:	1850      	adds	r0, r2, r1
 800ca22:	4283      	cmp	r3, r0
 800ca24:	6011      	str	r1, [r2, #0]
 800ca26:	d1e0      	bne.n	800c9ea <_free_r+0x22>
 800ca28:	6818      	ldr	r0, [r3, #0]
 800ca2a:	685b      	ldr	r3, [r3, #4]
 800ca2c:	6053      	str	r3, [r2, #4]
 800ca2e:	4408      	add	r0, r1
 800ca30:	6010      	str	r0, [r2, #0]
 800ca32:	e7da      	b.n	800c9ea <_free_r+0x22>
 800ca34:	d902      	bls.n	800ca3c <_free_r+0x74>
 800ca36:	230c      	movs	r3, #12
 800ca38:	602b      	str	r3, [r5, #0]
 800ca3a:	e7d6      	b.n	800c9ea <_free_r+0x22>
 800ca3c:	6820      	ldr	r0, [r4, #0]
 800ca3e:	1821      	adds	r1, r4, r0
 800ca40:	428b      	cmp	r3, r1
 800ca42:	bf04      	itt	eq
 800ca44:	6819      	ldreq	r1, [r3, #0]
 800ca46:	685b      	ldreq	r3, [r3, #4]
 800ca48:	6063      	str	r3, [r4, #4]
 800ca4a:	bf04      	itt	eq
 800ca4c:	1809      	addeq	r1, r1, r0
 800ca4e:	6021      	streq	r1, [r4, #0]
 800ca50:	6054      	str	r4, [r2, #4]
 800ca52:	e7ca      	b.n	800c9ea <_free_r+0x22>
 800ca54:	bd38      	pop	{r3, r4, r5, pc}
 800ca56:	bf00      	nop
 800ca58:	20002218 	.word	0x20002218

0800ca5c <sbrk_aligned>:
 800ca5c:	b570      	push	{r4, r5, r6, lr}
 800ca5e:	4e0f      	ldr	r6, [pc, #60]	@ (800ca9c <sbrk_aligned+0x40>)
 800ca60:	460c      	mov	r4, r1
 800ca62:	6831      	ldr	r1, [r6, #0]
 800ca64:	4605      	mov	r5, r0
 800ca66:	b911      	cbnz	r1, 800ca6e <sbrk_aligned+0x12>
 800ca68:	f000 fcda 	bl	800d420 <_sbrk_r>
 800ca6c:	6030      	str	r0, [r6, #0]
 800ca6e:	4621      	mov	r1, r4
 800ca70:	4628      	mov	r0, r5
 800ca72:	f000 fcd5 	bl	800d420 <_sbrk_r>
 800ca76:	1c43      	adds	r3, r0, #1
 800ca78:	d103      	bne.n	800ca82 <sbrk_aligned+0x26>
 800ca7a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800ca7e:	4620      	mov	r0, r4
 800ca80:	bd70      	pop	{r4, r5, r6, pc}
 800ca82:	1cc4      	adds	r4, r0, #3
 800ca84:	f024 0403 	bic.w	r4, r4, #3
 800ca88:	42a0      	cmp	r0, r4
 800ca8a:	d0f8      	beq.n	800ca7e <sbrk_aligned+0x22>
 800ca8c:	1a21      	subs	r1, r4, r0
 800ca8e:	4628      	mov	r0, r5
 800ca90:	f000 fcc6 	bl	800d420 <_sbrk_r>
 800ca94:	3001      	adds	r0, #1
 800ca96:	d1f2      	bne.n	800ca7e <sbrk_aligned+0x22>
 800ca98:	e7ef      	b.n	800ca7a <sbrk_aligned+0x1e>
 800ca9a:	bf00      	nop
 800ca9c:	20002214 	.word	0x20002214

0800caa0 <_malloc_r>:
 800caa0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800caa4:	1ccd      	adds	r5, r1, #3
 800caa6:	f025 0503 	bic.w	r5, r5, #3
 800caaa:	3508      	adds	r5, #8
 800caac:	2d0c      	cmp	r5, #12
 800caae:	bf38      	it	cc
 800cab0:	250c      	movcc	r5, #12
 800cab2:	2d00      	cmp	r5, #0
 800cab4:	4606      	mov	r6, r0
 800cab6:	db01      	blt.n	800cabc <_malloc_r+0x1c>
 800cab8:	42a9      	cmp	r1, r5
 800caba:	d904      	bls.n	800cac6 <_malloc_r+0x26>
 800cabc:	230c      	movs	r3, #12
 800cabe:	6033      	str	r3, [r6, #0]
 800cac0:	2000      	movs	r0, #0
 800cac2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cac6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800cb9c <_malloc_r+0xfc>
 800caca:	f000 f869 	bl	800cba0 <__malloc_lock>
 800cace:	f8d8 3000 	ldr.w	r3, [r8]
 800cad2:	461c      	mov	r4, r3
 800cad4:	bb44      	cbnz	r4, 800cb28 <_malloc_r+0x88>
 800cad6:	4629      	mov	r1, r5
 800cad8:	4630      	mov	r0, r6
 800cada:	f7ff ffbf 	bl	800ca5c <sbrk_aligned>
 800cade:	1c43      	adds	r3, r0, #1
 800cae0:	4604      	mov	r4, r0
 800cae2:	d158      	bne.n	800cb96 <_malloc_r+0xf6>
 800cae4:	f8d8 4000 	ldr.w	r4, [r8]
 800cae8:	4627      	mov	r7, r4
 800caea:	2f00      	cmp	r7, #0
 800caec:	d143      	bne.n	800cb76 <_malloc_r+0xd6>
 800caee:	2c00      	cmp	r4, #0
 800caf0:	d04b      	beq.n	800cb8a <_malloc_r+0xea>
 800caf2:	6823      	ldr	r3, [r4, #0]
 800caf4:	4639      	mov	r1, r7
 800caf6:	4630      	mov	r0, r6
 800caf8:	eb04 0903 	add.w	r9, r4, r3
 800cafc:	f000 fc90 	bl	800d420 <_sbrk_r>
 800cb00:	4581      	cmp	r9, r0
 800cb02:	d142      	bne.n	800cb8a <_malloc_r+0xea>
 800cb04:	6821      	ldr	r1, [r4, #0]
 800cb06:	1a6d      	subs	r5, r5, r1
 800cb08:	4629      	mov	r1, r5
 800cb0a:	4630      	mov	r0, r6
 800cb0c:	f7ff ffa6 	bl	800ca5c <sbrk_aligned>
 800cb10:	3001      	adds	r0, #1
 800cb12:	d03a      	beq.n	800cb8a <_malloc_r+0xea>
 800cb14:	6823      	ldr	r3, [r4, #0]
 800cb16:	442b      	add	r3, r5
 800cb18:	6023      	str	r3, [r4, #0]
 800cb1a:	f8d8 3000 	ldr.w	r3, [r8]
 800cb1e:	685a      	ldr	r2, [r3, #4]
 800cb20:	bb62      	cbnz	r2, 800cb7c <_malloc_r+0xdc>
 800cb22:	f8c8 7000 	str.w	r7, [r8]
 800cb26:	e00f      	b.n	800cb48 <_malloc_r+0xa8>
 800cb28:	6822      	ldr	r2, [r4, #0]
 800cb2a:	1b52      	subs	r2, r2, r5
 800cb2c:	d420      	bmi.n	800cb70 <_malloc_r+0xd0>
 800cb2e:	2a0b      	cmp	r2, #11
 800cb30:	d917      	bls.n	800cb62 <_malloc_r+0xc2>
 800cb32:	1961      	adds	r1, r4, r5
 800cb34:	42a3      	cmp	r3, r4
 800cb36:	6025      	str	r5, [r4, #0]
 800cb38:	bf18      	it	ne
 800cb3a:	6059      	strne	r1, [r3, #4]
 800cb3c:	6863      	ldr	r3, [r4, #4]
 800cb3e:	bf08      	it	eq
 800cb40:	f8c8 1000 	streq.w	r1, [r8]
 800cb44:	5162      	str	r2, [r4, r5]
 800cb46:	604b      	str	r3, [r1, #4]
 800cb48:	4630      	mov	r0, r6
 800cb4a:	f000 f82f 	bl	800cbac <__malloc_unlock>
 800cb4e:	f104 000b 	add.w	r0, r4, #11
 800cb52:	1d23      	adds	r3, r4, #4
 800cb54:	f020 0007 	bic.w	r0, r0, #7
 800cb58:	1ac2      	subs	r2, r0, r3
 800cb5a:	bf1c      	itt	ne
 800cb5c:	1a1b      	subne	r3, r3, r0
 800cb5e:	50a3      	strne	r3, [r4, r2]
 800cb60:	e7af      	b.n	800cac2 <_malloc_r+0x22>
 800cb62:	6862      	ldr	r2, [r4, #4]
 800cb64:	42a3      	cmp	r3, r4
 800cb66:	bf0c      	ite	eq
 800cb68:	f8c8 2000 	streq.w	r2, [r8]
 800cb6c:	605a      	strne	r2, [r3, #4]
 800cb6e:	e7eb      	b.n	800cb48 <_malloc_r+0xa8>
 800cb70:	4623      	mov	r3, r4
 800cb72:	6864      	ldr	r4, [r4, #4]
 800cb74:	e7ae      	b.n	800cad4 <_malloc_r+0x34>
 800cb76:	463c      	mov	r4, r7
 800cb78:	687f      	ldr	r7, [r7, #4]
 800cb7a:	e7b6      	b.n	800caea <_malloc_r+0x4a>
 800cb7c:	461a      	mov	r2, r3
 800cb7e:	685b      	ldr	r3, [r3, #4]
 800cb80:	42a3      	cmp	r3, r4
 800cb82:	d1fb      	bne.n	800cb7c <_malloc_r+0xdc>
 800cb84:	2300      	movs	r3, #0
 800cb86:	6053      	str	r3, [r2, #4]
 800cb88:	e7de      	b.n	800cb48 <_malloc_r+0xa8>
 800cb8a:	230c      	movs	r3, #12
 800cb8c:	6033      	str	r3, [r6, #0]
 800cb8e:	4630      	mov	r0, r6
 800cb90:	f000 f80c 	bl	800cbac <__malloc_unlock>
 800cb94:	e794      	b.n	800cac0 <_malloc_r+0x20>
 800cb96:	6005      	str	r5, [r0, #0]
 800cb98:	e7d6      	b.n	800cb48 <_malloc_r+0xa8>
 800cb9a:	bf00      	nop
 800cb9c:	20002218 	.word	0x20002218

0800cba0 <__malloc_lock>:
 800cba0:	4801      	ldr	r0, [pc, #4]	@ (800cba8 <__malloc_lock+0x8>)
 800cba2:	f7ff befc 	b.w	800c99e <__retarget_lock_acquire_recursive>
 800cba6:	bf00      	nop
 800cba8:	20002210 	.word	0x20002210

0800cbac <__malloc_unlock>:
 800cbac:	4801      	ldr	r0, [pc, #4]	@ (800cbb4 <__malloc_unlock+0x8>)
 800cbae:	f7ff bef7 	b.w	800c9a0 <__retarget_lock_release_recursive>
 800cbb2:	bf00      	nop
 800cbb4:	20002210 	.word	0x20002210

0800cbb8 <__sfputc_r>:
 800cbb8:	6893      	ldr	r3, [r2, #8]
 800cbba:	3b01      	subs	r3, #1
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	b410      	push	{r4}
 800cbc0:	6093      	str	r3, [r2, #8]
 800cbc2:	da08      	bge.n	800cbd6 <__sfputc_r+0x1e>
 800cbc4:	6994      	ldr	r4, [r2, #24]
 800cbc6:	42a3      	cmp	r3, r4
 800cbc8:	db01      	blt.n	800cbce <__sfputc_r+0x16>
 800cbca:	290a      	cmp	r1, #10
 800cbcc:	d103      	bne.n	800cbd6 <__sfputc_r+0x1e>
 800cbce:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cbd2:	f7ff bdc6 	b.w	800c762 <__swbuf_r>
 800cbd6:	6813      	ldr	r3, [r2, #0]
 800cbd8:	1c58      	adds	r0, r3, #1
 800cbda:	6010      	str	r0, [r2, #0]
 800cbdc:	7019      	strb	r1, [r3, #0]
 800cbde:	4608      	mov	r0, r1
 800cbe0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cbe4:	4770      	bx	lr

0800cbe6 <__sfputs_r>:
 800cbe6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cbe8:	4606      	mov	r6, r0
 800cbea:	460f      	mov	r7, r1
 800cbec:	4614      	mov	r4, r2
 800cbee:	18d5      	adds	r5, r2, r3
 800cbf0:	42ac      	cmp	r4, r5
 800cbf2:	d101      	bne.n	800cbf8 <__sfputs_r+0x12>
 800cbf4:	2000      	movs	r0, #0
 800cbf6:	e007      	b.n	800cc08 <__sfputs_r+0x22>
 800cbf8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cbfc:	463a      	mov	r2, r7
 800cbfe:	4630      	mov	r0, r6
 800cc00:	f7ff ffda 	bl	800cbb8 <__sfputc_r>
 800cc04:	1c43      	adds	r3, r0, #1
 800cc06:	d1f3      	bne.n	800cbf0 <__sfputs_r+0xa>
 800cc08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800cc0c <_vfiprintf_r>:
 800cc0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc10:	460d      	mov	r5, r1
 800cc12:	b09d      	sub	sp, #116	@ 0x74
 800cc14:	4614      	mov	r4, r2
 800cc16:	4698      	mov	r8, r3
 800cc18:	4606      	mov	r6, r0
 800cc1a:	b118      	cbz	r0, 800cc24 <_vfiprintf_r+0x18>
 800cc1c:	6a03      	ldr	r3, [r0, #32]
 800cc1e:	b90b      	cbnz	r3, 800cc24 <_vfiprintf_r+0x18>
 800cc20:	f7ff fcae 	bl	800c580 <__sinit>
 800cc24:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cc26:	07d9      	lsls	r1, r3, #31
 800cc28:	d405      	bmi.n	800cc36 <_vfiprintf_r+0x2a>
 800cc2a:	89ab      	ldrh	r3, [r5, #12]
 800cc2c:	059a      	lsls	r2, r3, #22
 800cc2e:	d402      	bmi.n	800cc36 <_vfiprintf_r+0x2a>
 800cc30:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cc32:	f7ff feb4 	bl	800c99e <__retarget_lock_acquire_recursive>
 800cc36:	89ab      	ldrh	r3, [r5, #12]
 800cc38:	071b      	lsls	r3, r3, #28
 800cc3a:	d501      	bpl.n	800cc40 <_vfiprintf_r+0x34>
 800cc3c:	692b      	ldr	r3, [r5, #16]
 800cc3e:	b99b      	cbnz	r3, 800cc68 <_vfiprintf_r+0x5c>
 800cc40:	4629      	mov	r1, r5
 800cc42:	4630      	mov	r0, r6
 800cc44:	f7ff fdcc 	bl	800c7e0 <__swsetup_r>
 800cc48:	b170      	cbz	r0, 800cc68 <_vfiprintf_r+0x5c>
 800cc4a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cc4c:	07dc      	lsls	r4, r3, #31
 800cc4e:	d504      	bpl.n	800cc5a <_vfiprintf_r+0x4e>
 800cc50:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800cc54:	b01d      	add	sp, #116	@ 0x74
 800cc56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc5a:	89ab      	ldrh	r3, [r5, #12]
 800cc5c:	0598      	lsls	r0, r3, #22
 800cc5e:	d4f7      	bmi.n	800cc50 <_vfiprintf_r+0x44>
 800cc60:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cc62:	f7ff fe9d 	bl	800c9a0 <__retarget_lock_release_recursive>
 800cc66:	e7f3      	b.n	800cc50 <_vfiprintf_r+0x44>
 800cc68:	2300      	movs	r3, #0
 800cc6a:	9309      	str	r3, [sp, #36]	@ 0x24
 800cc6c:	2320      	movs	r3, #32
 800cc6e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800cc72:	f8cd 800c 	str.w	r8, [sp, #12]
 800cc76:	2330      	movs	r3, #48	@ 0x30
 800cc78:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800ce28 <_vfiprintf_r+0x21c>
 800cc7c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800cc80:	f04f 0901 	mov.w	r9, #1
 800cc84:	4623      	mov	r3, r4
 800cc86:	469a      	mov	sl, r3
 800cc88:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cc8c:	b10a      	cbz	r2, 800cc92 <_vfiprintf_r+0x86>
 800cc8e:	2a25      	cmp	r2, #37	@ 0x25
 800cc90:	d1f9      	bne.n	800cc86 <_vfiprintf_r+0x7a>
 800cc92:	ebba 0b04 	subs.w	fp, sl, r4
 800cc96:	d00b      	beq.n	800ccb0 <_vfiprintf_r+0xa4>
 800cc98:	465b      	mov	r3, fp
 800cc9a:	4622      	mov	r2, r4
 800cc9c:	4629      	mov	r1, r5
 800cc9e:	4630      	mov	r0, r6
 800cca0:	f7ff ffa1 	bl	800cbe6 <__sfputs_r>
 800cca4:	3001      	adds	r0, #1
 800cca6:	f000 80a7 	beq.w	800cdf8 <_vfiprintf_r+0x1ec>
 800ccaa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ccac:	445a      	add	r2, fp
 800ccae:	9209      	str	r2, [sp, #36]	@ 0x24
 800ccb0:	f89a 3000 	ldrb.w	r3, [sl]
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	f000 809f 	beq.w	800cdf8 <_vfiprintf_r+0x1ec>
 800ccba:	2300      	movs	r3, #0
 800ccbc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ccc0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ccc4:	f10a 0a01 	add.w	sl, sl, #1
 800ccc8:	9304      	str	r3, [sp, #16]
 800ccca:	9307      	str	r3, [sp, #28]
 800cccc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ccd0:	931a      	str	r3, [sp, #104]	@ 0x68
 800ccd2:	4654      	mov	r4, sl
 800ccd4:	2205      	movs	r2, #5
 800ccd6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ccda:	4853      	ldr	r0, [pc, #332]	@ (800ce28 <_vfiprintf_r+0x21c>)
 800ccdc:	f7f4 ff90 	bl	8001c00 <memchr>
 800cce0:	9a04      	ldr	r2, [sp, #16]
 800cce2:	b9d8      	cbnz	r0, 800cd1c <_vfiprintf_r+0x110>
 800cce4:	06d1      	lsls	r1, r2, #27
 800cce6:	bf44      	itt	mi
 800cce8:	2320      	movmi	r3, #32
 800ccea:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ccee:	0713      	lsls	r3, r2, #28
 800ccf0:	bf44      	itt	mi
 800ccf2:	232b      	movmi	r3, #43	@ 0x2b
 800ccf4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ccf8:	f89a 3000 	ldrb.w	r3, [sl]
 800ccfc:	2b2a      	cmp	r3, #42	@ 0x2a
 800ccfe:	d015      	beq.n	800cd2c <_vfiprintf_r+0x120>
 800cd00:	9a07      	ldr	r2, [sp, #28]
 800cd02:	4654      	mov	r4, sl
 800cd04:	2000      	movs	r0, #0
 800cd06:	f04f 0c0a 	mov.w	ip, #10
 800cd0a:	4621      	mov	r1, r4
 800cd0c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cd10:	3b30      	subs	r3, #48	@ 0x30
 800cd12:	2b09      	cmp	r3, #9
 800cd14:	d94b      	bls.n	800cdae <_vfiprintf_r+0x1a2>
 800cd16:	b1b0      	cbz	r0, 800cd46 <_vfiprintf_r+0x13a>
 800cd18:	9207      	str	r2, [sp, #28]
 800cd1a:	e014      	b.n	800cd46 <_vfiprintf_r+0x13a>
 800cd1c:	eba0 0308 	sub.w	r3, r0, r8
 800cd20:	fa09 f303 	lsl.w	r3, r9, r3
 800cd24:	4313      	orrs	r3, r2
 800cd26:	9304      	str	r3, [sp, #16]
 800cd28:	46a2      	mov	sl, r4
 800cd2a:	e7d2      	b.n	800ccd2 <_vfiprintf_r+0xc6>
 800cd2c:	9b03      	ldr	r3, [sp, #12]
 800cd2e:	1d19      	adds	r1, r3, #4
 800cd30:	681b      	ldr	r3, [r3, #0]
 800cd32:	9103      	str	r1, [sp, #12]
 800cd34:	2b00      	cmp	r3, #0
 800cd36:	bfbb      	ittet	lt
 800cd38:	425b      	neglt	r3, r3
 800cd3a:	f042 0202 	orrlt.w	r2, r2, #2
 800cd3e:	9307      	strge	r3, [sp, #28]
 800cd40:	9307      	strlt	r3, [sp, #28]
 800cd42:	bfb8      	it	lt
 800cd44:	9204      	strlt	r2, [sp, #16]
 800cd46:	7823      	ldrb	r3, [r4, #0]
 800cd48:	2b2e      	cmp	r3, #46	@ 0x2e
 800cd4a:	d10a      	bne.n	800cd62 <_vfiprintf_r+0x156>
 800cd4c:	7863      	ldrb	r3, [r4, #1]
 800cd4e:	2b2a      	cmp	r3, #42	@ 0x2a
 800cd50:	d132      	bne.n	800cdb8 <_vfiprintf_r+0x1ac>
 800cd52:	9b03      	ldr	r3, [sp, #12]
 800cd54:	1d1a      	adds	r2, r3, #4
 800cd56:	681b      	ldr	r3, [r3, #0]
 800cd58:	9203      	str	r2, [sp, #12]
 800cd5a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800cd5e:	3402      	adds	r4, #2
 800cd60:	9305      	str	r3, [sp, #20]
 800cd62:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800ce38 <_vfiprintf_r+0x22c>
 800cd66:	7821      	ldrb	r1, [r4, #0]
 800cd68:	2203      	movs	r2, #3
 800cd6a:	4650      	mov	r0, sl
 800cd6c:	f7f4 ff48 	bl	8001c00 <memchr>
 800cd70:	b138      	cbz	r0, 800cd82 <_vfiprintf_r+0x176>
 800cd72:	9b04      	ldr	r3, [sp, #16]
 800cd74:	eba0 000a 	sub.w	r0, r0, sl
 800cd78:	2240      	movs	r2, #64	@ 0x40
 800cd7a:	4082      	lsls	r2, r0
 800cd7c:	4313      	orrs	r3, r2
 800cd7e:	3401      	adds	r4, #1
 800cd80:	9304      	str	r3, [sp, #16]
 800cd82:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cd86:	4829      	ldr	r0, [pc, #164]	@ (800ce2c <_vfiprintf_r+0x220>)
 800cd88:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800cd8c:	2206      	movs	r2, #6
 800cd8e:	f7f4 ff37 	bl	8001c00 <memchr>
 800cd92:	2800      	cmp	r0, #0
 800cd94:	d03f      	beq.n	800ce16 <_vfiprintf_r+0x20a>
 800cd96:	4b26      	ldr	r3, [pc, #152]	@ (800ce30 <_vfiprintf_r+0x224>)
 800cd98:	bb1b      	cbnz	r3, 800cde2 <_vfiprintf_r+0x1d6>
 800cd9a:	9b03      	ldr	r3, [sp, #12]
 800cd9c:	3307      	adds	r3, #7
 800cd9e:	f023 0307 	bic.w	r3, r3, #7
 800cda2:	3308      	adds	r3, #8
 800cda4:	9303      	str	r3, [sp, #12]
 800cda6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cda8:	443b      	add	r3, r7
 800cdaa:	9309      	str	r3, [sp, #36]	@ 0x24
 800cdac:	e76a      	b.n	800cc84 <_vfiprintf_r+0x78>
 800cdae:	fb0c 3202 	mla	r2, ip, r2, r3
 800cdb2:	460c      	mov	r4, r1
 800cdb4:	2001      	movs	r0, #1
 800cdb6:	e7a8      	b.n	800cd0a <_vfiprintf_r+0xfe>
 800cdb8:	2300      	movs	r3, #0
 800cdba:	3401      	adds	r4, #1
 800cdbc:	9305      	str	r3, [sp, #20]
 800cdbe:	4619      	mov	r1, r3
 800cdc0:	f04f 0c0a 	mov.w	ip, #10
 800cdc4:	4620      	mov	r0, r4
 800cdc6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cdca:	3a30      	subs	r2, #48	@ 0x30
 800cdcc:	2a09      	cmp	r2, #9
 800cdce:	d903      	bls.n	800cdd8 <_vfiprintf_r+0x1cc>
 800cdd0:	2b00      	cmp	r3, #0
 800cdd2:	d0c6      	beq.n	800cd62 <_vfiprintf_r+0x156>
 800cdd4:	9105      	str	r1, [sp, #20]
 800cdd6:	e7c4      	b.n	800cd62 <_vfiprintf_r+0x156>
 800cdd8:	fb0c 2101 	mla	r1, ip, r1, r2
 800cddc:	4604      	mov	r4, r0
 800cdde:	2301      	movs	r3, #1
 800cde0:	e7f0      	b.n	800cdc4 <_vfiprintf_r+0x1b8>
 800cde2:	ab03      	add	r3, sp, #12
 800cde4:	9300      	str	r3, [sp, #0]
 800cde6:	462a      	mov	r2, r5
 800cde8:	4b12      	ldr	r3, [pc, #72]	@ (800ce34 <_vfiprintf_r+0x228>)
 800cdea:	a904      	add	r1, sp, #16
 800cdec:	4630      	mov	r0, r6
 800cdee:	f3af 8000 	nop.w
 800cdf2:	4607      	mov	r7, r0
 800cdf4:	1c78      	adds	r0, r7, #1
 800cdf6:	d1d6      	bne.n	800cda6 <_vfiprintf_r+0x19a>
 800cdf8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cdfa:	07d9      	lsls	r1, r3, #31
 800cdfc:	d405      	bmi.n	800ce0a <_vfiprintf_r+0x1fe>
 800cdfe:	89ab      	ldrh	r3, [r5, #12]
 800ce00:	059a      	lsls	r2, r3, #22
 800ce02:	d402      	bmi.n	800ce0a <_vfiprintf_r+0x1fe>
 800ce04:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ce06:	f7ff fdcb 	bl	800c9a0 <__retarget_lock_release_recursive>
 800ce0a:	89ab      	ldrh	r3, [r5, #12]
 800ce0c:	065b      	lsls	r3, r3, #25
 800ce0e:	f53f af1f 	bmi.w	800cc50 <_vfiprintf_r+0x44>
 800ce12:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ce14:	e71e      	b.n	800cc54 <_vfiprintf_r+0x48>
 800ce16:	ab03      	add	r3, sp, #12
 800ce18:	9300      	str	r3, [sp, #0]
 800ce1a:	462a      	mov	r2, r5
 800ce1c:	4b05      	ldr	r3, [pc, #20]	@ (800ce34 <_vfiprintf_r+0x228>)
 800ce1e:	a904      	add	r1, sp, #16
 800ce20:	4630      	mov	r0, r6
 800ce22:	f000 f879 	bl	800cf18 <_printf_i>
 800ce26:	e7e4      	b.n	800cdf2 <_vfiprintf_r+0x1e6>
 800ce28:	0800f4f5 	.word	0x0800f4f5
 800ce2c:	0800f4ff 	.word	0x0800f4ff
 800ce30:	00000000 	.word	0x00000000
 800ce34:	0800cbe7 	.word	0x0800cbe7
 800ce38:	0800f4fb 	.word	0x0800f4fb

0800ce3c <_printf_common>:
 800ce3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ce40:	4616      	mov	r6, r2
 800ce42:	4698      	mov	r8, r3
 800ce44:	688a      	ldr	r2, [r1, #8]
 800ce46:	690b      	ldr	r3, [r1, #16]
 800ce48:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ce4c:	4293      	cmp	r3, r2
 800ce4e:	bfb8      	it	lt
 800ce50:	4613      	movlt	r3, r2
 800ce52:	6033      	str	r3, [r6, #0]
 800ce54:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ce58:	4607      	mov	r7, r0
 800ce5a:	460c      	mov	r4, r1
 800ce5c:	b10a      	cbz	r2, 800ce62 <_printf_common+0x26>
 800ce5e:	3301      	adds	r3, #1
 800ce60:	6033      	str	r3, [r6, #0]
 800ce62:	6823      	ldr	r3, [r4, #0]
 800ce64:	0699      	lsls	r1, r3, #26
 800ce66:	bf42      	ittt	mi
 800ce68:	6833      	ldrmi	r3, [r6, #0]
 800ce6a:	3302      	addmi	r3, #2
 800ce6c:	6033      	strmi	r3, [r6, #0]
 800ce6e:	6825      	ldr	r5, [r4, #0]
 800ce70:	f015 0506 	ands.w	r5, r5, #6
 800ce74:	d106      	bne.n	800ce84 <_printf_common+0x48>
 800ce76:	f104 0a19 	add.w	sl, r4, #25
 800ce7a:	68e3      	ldr	r3, [r4, #12]
 800ce7c:	6832      	ldr	r2, [r6, #0]
 800ce7e:	1a9b      	subs	r3, r3, r2
 800ce80:	42ab      	cmp	r3, r5
 800ce82:	dc26      	bgt.n	800ced2 <_printf_common+0x96>
 800ce84:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ce88:	6822      	ldr	r2, [r4, #0]
 800ce8a:	3b00      	subs	r3, #0
 800ce8c:	bf18      	it	ne
 800ce8e:	2301      	movne	r3, #1
 800ce90:	0692      	lsls	r2, r2, #26
 800ce92:	d42b      	bmi.n	800ceec <_printf_common+0xb0>
 800ce94:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ce98:	4641      	mov	r1, r8
 800ce9a:	4638      	mov	r0, r7
 800ce9c:	47c8      	blx	r9
 800ce9e:	3001      	adds	r0, #1
 800cea0:	d01e      	beq.n	800cee0 <_printf_common+0xa4>
 800cea2:	6823      	ldr	r3, [r4, #0]
 800cea4:	6922      	ldr	r2, [r4, #16]
 800cea6:	f003 0306 	and.w	r3, r3, #6
 800ceaa:	2b04      	cmp	r3, #4
 800ceac:	bf02      	ittt	eq
 800ceae:	68e5      	ldreq	r5, [r4, #12]
 800ceb0:	6833      	ldreq	r3, [r6, #0]
 800ceb2:	1aed      	subeq	r5, r5, r3
 800ceb4:	68a3      	ldr	r3, [r4, #8]
 800ceb6:	bf0c      	ite	eq
 800ceb8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cebc:	2500      	movne	r5, #0
 800cebe:	4293      	cmp	r3, r2
 800cec0:	bfc4      	itt	gt
 800cec2:	1a9b      	subgt	r3, r3, r2
 800cec4:	18ed      	addgt	r5, r5, r3
 800cec6:	2600      	movs	r6, #0
 800cec8:	341a      	adds	r4, #26
 800ceca:	42b5      	cmp	r5, r6
 800cecc:	d11a      	bne.n	800cf04 <_printf_common+0xc8>
 800cece:	2000      	movs	r0, #0
 800ced0:	e008      	b.n	800cee4 <_printf_common+0xa8>
 800ced2:	2301      	movs	r3, #1
 800ced4:	4652      	mov	r2, sl
 800ced6:	4641      	mov	r1, r8
 800ced8:	4638      	mov	r0, r7
 800ceda:	47c8      	blx	r9
 800cedc:	3001      	adds	r0, #1
 800cede:	d103      	bne.n	800cee8 <_printf_common+0xac>
 800cee0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800cee4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cee8:	3501      	adds	r5, #1
 800ceea:	e7c6      	b.n	800ce7a <_printf_common+0x3e>
 800ceec:	18e1      	adds	r1, r4, r3
 800ceee:	1c5a      	adds	r2, r3, #1
 800cef0:	2030      	movs	r0, #48	@ 0x30
 800cef2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800cef6:	4422      	add	r2, r4
 800cef8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800cefc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800cf00:	3302      	adds	r3, #2
 800cf02:	e7c7      	b.n	800ce94 <_printf_common+0x58>
 800cf04:	2301      	movs	r3, #1
 800cf06:	4622      	mov	r2, r4
 800cf08:	4641      	mov	r1, r8
 800cf0a:	4638      	mov	r0, r7
 800cf0c:	47c8      	blx	r9
 800cf0e:	3001      	adds	r0, #1
 800cf10:	d0e6      	beq.n	800cee0 <_printf_common+0xa4>
 800cf12:	3601      	adds	r6, #1
 800cf14:	e7d9      	b.n	800ceca <_printf_common+0x8e>
	...

0800cf18 <_printf_i>:
 800cf18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cf1c:	7e0f      	ldrb	r7, [r1, #24]
 800cf1e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800cf20:	2f78      	cmp	r7, #120	@ 0x78
 800cf22:	4691      	mov	r9, r2
 800cf24:	4680      	mov	r8, r0
 800cf26:	460c      	mov	r4, r1
 800cf28:	469a      	mov	sl, r3
 800cf2a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800cf2e:	d807      	bhi.n	800cf40 <_printf_i+0x28>
 800cf30:	2f62      	cmp	r7, #98	@ 0x62
 800cf32:	d80a      	bhi.n	800cf4a <_printf_i+0x32>
 800cf34:	2f00      	cmp	r7, #0
 800cf36:	f000 80d2 	beq.w	800d0de <_printf_i+0x1c6>
 800cf3a:	2f58      	cmp	r7, #88	@ 0x58
 800cf3c:	f000 80b9 	beq.w	800d0b2 <_printf_i+0x19a>
 800cf40:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800cf44:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800cf48:	e03a      	b.n	800cfc0 <_printf_i+0xa8>
 800cf4a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800cf4e:	2b15      	cmp	r3, #21
 800cf50:	d8f6      	bhi.n	800cf40 <_printf_i+0x28>
 800cf52:	a101      	add	r1, pc, #4	@ (adr r1, 800cf58 <_printf_i+0x40>)
 800cf54:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800cf58:	0800cfb1 	.word	0x0800cfb1
 800cf5c:	0800cfc5 	.word	0x0800cfc5
 800cf60:	0800cf41 	.word	0x0800cf41
 800cf64:	0800cf41 	.word	0x0800cf41
 800cf68:	0800cf41 	.word	0x0800cf41
 800cf6c:	0800cf41 	.word	0x0800cf41
 800cf70:	0800cfc5 	.word	0x0800cfc5
 800cf74:	0800cf41 	.word	0x0800cf41
 800cf78:	0800cf41 	.word	0x0800cf41
 800cf7c:	0800cf41 	.word	0x0800cf41
 800cf80:	0800cf41 	.word	0x0800cf41
 800cf84:	0800d0c5 	.word	0x0800d0c5
 800cf88:	0800cfef 	.word	0x0800cfef
 800cf8c:	0800d07f 	.word	0x0800d07f
 800cf90:	0800cf41 	.word	0x0800cf41
 800cf94:	0800cf41 	.word	0x0800cf41
 800cf98:	0800d0e7 	.word	0x0800d0e7
 800cf9c:	0800cf41 	.word	0x0800cf41
 800cfa0:	0800cfef 	.word	0x0800cfef
 800cfa4:	0800cf41 	.word	0x0800cf41
 800cfa8:	0800cf41 	.word	0x0800cf41
 800cfac:	0800d087 	.word	0x0800d087
 800cfb0:	6833      	ldr	r3, [r6, #0]
 800cfb2:	1d1a      	adds	r2, r3, #4
 800cfb4:	681b      	ldr	r3, [r3, #0]
 800cfb6:	6032      	str	r2, [r6, #0]
 800cfb8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800cfbc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800cfc0:	2301      	movs	r3, #1
 800cfc2:	e09d      	b.n	800d100 <_printf_i+0x1e8>
 800cfc4:	6833      	ldr	r3, [r6, #0]
 800cfc6:	6820      	ldr	r0, [r4, #0]
 800cfc8:	1d19      	adds	r1, r3, #4
 800cfca:	6031      	str	r1, [r6, #0]
 800cfcc:	0606      	lsls	r6, r0, #24
 800cfce:	d501      	bpl.n	800cfd4 <_printf_i+0xbc>
 800cfd0:	681d      	ldr	r5, [r3, #0]
 800cfd2:	e003      	b.n	800cfdc <_printf_i+0xc4>
 800cfd4:	0645      	lsls	r5, r0, #25
 800cfd6:	d5fb      	bpl.n	800cfd0 <_printf_i+0xb8>
 800cfd8:	f9b3 5000 	ldrsh.w	r5, [r3]
 800cfdc:	2d00      	cmp	r5, #0
 800cfde:	da03      	bge.n	800cfe8 <_printf_i+0xd0>
 800cfe0:	232d      	movs	r3, #45	@ 0x2d
 800cfe2:	426d      	negs	r5, r5
 800cfe4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800cfe8:	4859      	ldr	r0, [pc, #356]	@ (800d150 <_printf_i+0x238>)
 800cfea:	230a      	movs	r3, #10
 800cfec:	e011      	b.n	800d012 <_printf_i+0xfa>
 800cfee:	6821      	ldr	r1, [r4, #0]
 800cff0:	6833      	ldr	r3, [r6, #0]
 800cff2:	0608      	lsls	r0, r1, #24
 800cff4:	f853 5b04 	ldr.w	r5, [r3], #4
 800cff8:	d402      	bmi.n	800d000 <_printf_i+0xe8>
 800cffa:	0649      	lsls	r1, r1, #25
 800cffc:	bf48      	it	mi
 800cffe:	b2ad      	uxthmi	r5, r5
 800d000:	2f6f      	cmp	r7, #111	@ 0x6f
 800d002:	4853      	ldr	r0, [pc, #332]	@ (800d150 <_printf_i+0x238>)
 800d004:	6033      	str	r3, [r6, #0]
 800d006:	bf14      	ite	ne
 800d008:	230a      	movne	r3, #10
 800d00a:	2308      	moveq	r3, #8
 800d00c:	2100      	movs	r1, #0
 800d00e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800d012:	6866      	ldr	r6, [r4, #4]
 800d014:	60a6      	str	r6, [r4, #8]
 800d016:	2e00      	cmp	r6, #0
 800d018:	bfa2      	ittt	ge
 800d01a:	6821      	ldrge	r1, [r4, #0]
 800d01c:	f021 0104 	bicge.w	r1, r1, #4
 800d020:	6021      	strge	r1, [r4, #0]
 800d022:	b90d      	cbnz	r5, 800d028 <_printf_i+0x110>
 800d024:	2e00      	cmp	r6, #0
 800d026:	d04b      	beq.n	800d0c0 <_printf_i+0x1a8>
 800d028:	4616      	mov	r6, r2
 800d02a:	fbb5 f1f3 	udiv	r1, r5, r3
 800d02e:	fb03 5711 	mls	r7, r3, r1, r5
 800d032:	5dc7      	ldrb	r7, [r0, r7]
 800d034:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d038:	462f      	mov	r7, r5
 800d03a:	42bb      	cmp	r3, r7
 800d03c:	460d      	mov	r5, r1
 800d03e:	d9f4      	bls.n	800d02a <_printf_i+0x112>
 800d040:	2b08      	cmp	r3, #8
 800d042:	d10b      	bne.n	800d05c <_printf_i+0x144>
 800d044:	6823      	ldr	r3, [r4, #0]
 800d046:	07df      	lsls	r7, r3, #31
 800d048:	d508      	bpl.n	800d05c <_printf_i+0x144>
 800d04a:	6923      	ldr	r3, [r4, #16]
 800d04c:	6861      	ldr	r1, [r4, #4]
 800d04e:	4299      	cmp	r1, r3
 800d050:	bfde      	ittt	le
 800d052:	2330      	movle	r3, #48	@ 0x30
 800d054:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d058:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800d05c:	1b92      	subs	r2, r2, r6
 800d05e:	6122      	str	r2, [r4, #16]
 800d060:	f8cd a000 	str.w	sl, [sp]
 800d064:	464b      	mov	r3, r9
 800d066:	aa03      	add	r2, sp, #12
 800d068:	4621      	mov	r1, r4
 800d06a:	4640      	mov	r0, r8
 800d06c:	f7ff fee6 	bl	800ce3c <_printf_common>
 800d070:	3001      	adds	r0, #1
 800d072:	d14a      	bne.n	800d10a <_printf_i+0x1f2>
 800d074:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d078:	b004      	add	sp, #16
 800d07a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d07e:	6823      	ldr	r3, [r4, #0]
 800d080:	f043 0320 	orr.w	r3, r3, #32
 800d084:	6023      	str	r3, [r4, #0]
 800d086:	4833      	ldr	r0, [pc, #204]	@ (800d154 <_printf_i+0x23c>)
 800d088:	2778      	movs	r7, #120	@ 0x78
 800d08a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800d08e:	6823      	ldr	r3, [r4, #0]
 800d090:	6831      	ldr	r1, [r6, #0]
 800d092:	061f      	lsls	r7, r3, #24
 800d094:	f851 5b04 	ldr.w	r5, [r1], #4
 800d098:	d402      	bmi.n	800d0a0 <_printf_i+0x188>
 800d09a:	065f      	lsls	r7, r3, #25
 800d09c:	bf48      	it	mi
 800d09e:	b2ad      	uxthmi	r5, r5
 800d0a0:	6031      	str	r1, [r6, #0]
 800d0a2:	07d9      	lsls	r1, r3, #31
 800d0a4:	bf44      	itt	mi
 800d0a6:	f043 0320 	orrmi.w	r3, r3, #32
 800d0aa:	6023      	strmi	r3, [r4, #0]
 800d0ac:	b11d      	cbz	r5, 800d0b6 <_printf_i+0x19e>
 800d0ae:	2310      	movs	r3, #16
 800d0b0:	e7ac      	b.n	800d00c <_printf_i+0xf4>
 800d0b2:	4827      	ldr	r0, [pc, #156]	@ (800d150 <_printf_i+0x238>)
 800d0b4:	e7e9      	b.n	800d08a <_printf_i+0x172>
 800d0b6:	6823      	ldr	r3, [r4, #0]
 800d0b8:	f023 0320 	bic.w	r3, r3, #32
 800d0bc:	6023      	str	r3, [r4, #0]
 800d0be:	e7f6      	b.n	800d0ae <_printf_i+0x196>
 800d0c0:	4616      	mov	r6, r2
 800d0c2:	e7bd      	b.n	800d040 <_printf_i+0x128>
 800d0c4:	6833      	ldr	r3, [r6, #0]
 800d0c6:	6825      	ldr	r5, [r4, #0]
 800d0c8:	6961      	ldr	r1, [r4, #20]
 800d0ca:	1d18      	adds	r0, r3, #4
 800d0cc:	6030      	str	r0, [r6, #0]
 800d0ce:	062e      	lsls	r6, r5, #24
 800d0d0:	681b      	ldr	r3, [r3, #0]
 800d0d2:	d501      	bpl.n	800d0d8 <_printf_i+0x1c0>
 800d0d4:	6019      	str	r1, [r3, #0]
 800d0d6:	e002      	b.n	800d0de <_printf_i+0x1c6>
 800d0d8:	0668      	lsls	r0, r5, #25
 800d0da:	d5fb      	bpl.n	800d0d4 <_printf_i+0x1bc>
 800d0dc:	8019      	strh	r1, [r3, #0]
 800d0de:	2300      	movs	r3, #0
 800d0e0:	6123      	str	r3, [r4, #16]
 800d0e2:	4616      	mov	r6, r2
 800d0e4:	e7bc      	b.n	800d060 <_printf_i+0x148>
 800d0e6:	6833      	ldr	r3, [r6, #0]
 800d0e8:	1d1a      	adds	r2, r3, #4
 800d0ea:	6032      	str	r2, [r6, #0]
 800d0ec:	681e      	ldr	r6, [r3, #0]
 800d0ee:	6862      	ldr	r2, [r4, #4]
 800d0f0:	2100      	movs	r1, #0
 800d0f2:	4630      	mov	r0, r6
 800d0f4:	f7f4 fd84 	bl	8001c00 <memchr>
 800d0f8:	b108      	cbz	r0, 800d0fe <_printf_i+0x1e6>
 800d0fa:	1b80      	subs	r0, r0, r6
 800d0fc:	6060      	str	r0, [r4, #4]
 800d0fe:	6863      	ldr	r3, [r4, #4]
 800d100:	6123      	str	r3, [r4, #16]
 800d102:	2300      	movs	r3, #0
 800d104:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d108:	e7aa      	b.n	800d060 <_printf_i+0x148>
 800d10a:	6923      	ldr	r3, [r4, #16]
 800d10c:	4632      	mov	r2, r6
 800d10e:	4649      	mov	r1, r9
 800d110:	4640      	mov	r0, r8
 800d112:	47d0      	blx	sl
 800d114:	3001      	adds	r0, #1
 800d116:	d0ad      	beq.n	800d074 <_printf_i+0x15c>
 800d118:	6823      	ldr	r3, [r4, #0]
 800d11a:	079b      	lsls	r3, r3, #30
 800d11c:	d413      	bmi.n	800d146 <_printf_i+0x22e>
 800d11e:	68e0      	ldr	r0, [r4, #12]
 800d120:	9b03      	ldr	r3, [sp, #12]
 800d122:	4298      	cmp	r0, r3
 800d124:	bfb8      	it	lt
 800d126:	4618      	movlt	r0, r3
 800d128:	e7a6      	b.n	800d078 <_printf_i+0x160>
 800d12a:	2301      	movs	r3, #1
 800d12c:	4632      	mov	r2, r6
 800d12e:	4649      	mov	r1, r9
 800d130:	4640      	mov	r0, r8
 800d132:	47d0      	blx	sl
 800d134:	3001      	adds	r0, #1
 800d136:	d09d      	beq.n	800d074 <_printf_i+0x15c>
 800d138:	3501      	adds	r5, #1
 800d13a:	68e3      	ldr	r3, [r4, #12]
 800d13c:	9903      	ldr	r1, [sp, #12]
 800d13e:	1a5b      	subs	r3, r3, r1
 800d140:	42ab      	cmp	r3, r5
 800d142:	dcf2      	bgt.n	800d12a <_printf_i+0x212>
 800d144:	e7eb      	b.n	800d11e <_printf_i+0x206>
 800d146:	2500      	movs	r5, #0
 800d148:	f104 0619 	add.w	r6, r4, #25
 800d14c:	e7f5      	b.n	800d13a <_printf_i+0x222>
 800d14e:	bf00      	nop
 800d150:	0800f506 	.word	0x0800f506
 800d154:	0800f517 	.word	0x0800f517

0800d158 <__sflush_r>:
 800d158:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d15c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d160:	0716      	lsls	r6, r2, #28
 800d162:	4605      	mov	r5, r0
 800d164:	460c      	mov	r4, r1
 800d166:	d454      	bmi.n	800d212 <__sflush_r+0xba>
 800d168:	684b      	ldr	r3, [r1, #4]
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	dc02      	bgt.n	800d174 <__sflush_r+0x1c>
 800d16e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d170:	2b00      	cmp	r3, #0
 800d172:	dd48      	ble.n	800d206 <__sflush_r+0xae>
 800d174:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d176:	2e00      	cmp	r6, #0
 800d178:	d045      	beq.n	800d206 <__sflush_r+0xae>
 800d17a:	2300      	movs	r3, #0
 800d17c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d180:	682f      	ldr	r7, [r5, #0]
 800d182:	6a21      	ldr	r1, [r4, #32]
 800d184:	602b      	str	r3, [r5, #0]
 800d186:	d030      	beq.n	800d1ea <__sflush_r+0x92>
 800d188:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d18a:	89a3      	ldrh	r3, [r4, #12]
 800d18c:	0759      	lsls	r1, r3, #29
 800d18e:	d505      	bpl.n	800d19c <__sflush_r+0x44>
 800d190:	6863      	ldr	r3, [r4, #4]
 800d192:	1ad2      	subs	r2, r2, r3
 800d194:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d196:	b10b      	cbz	r3, 800d19c <__sflush_r+0x44>
 800d198:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d19a:	1ad2      	subs	r2, r2, r3
 800d19c:	2300      	movs	r3, #0
 800d19e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d1a0:	6a21      	ldr	r1, [r4, #32]
 800d1a2:	4628      	mov	r0, r5
 800d1a4:	47b0      	blx	r6
 800d1a6:	1c43      	adds	r3, r0, #1
 800d1a8:	89a3      	ldrh	r3, [r4, #12]
 800d1aa:	d106      	bne.n	800d1ba <__sflush_r+0x62>
 800d1ac:	6829      	ldr	r1, [r5, #0]
 800d1ae:	291d      	cmp	r1, #29
 800d1b0:	d82b      	bhi.n	800d20a <__sflush_r+0xb2>
 800d1b2:	4a2a      	ldr	r2, [pc, #168]	@ (800d25c <__sflush_r+0x104>)
 800d1b4:	410a      	asrs	r2, r1
 800d1b6:	07d6      	lsls	r6, r2, #31
 800d1b8:	d427      	bmi.n	800d20a <__sflush_r+0xb2>
 800d1ba:	2200      	movs	r2, #0
 800d1bc:	6062      	str	r2, [r4, #4]
 800d1be:	04d9      	lsls	r1, r3, #19
 800d1c0:	6922      	ldr	r2, [r4, #16]
 800d1c2:	6022      	str	r2, [r4, #0]
 800d1c4:	d504      	bpl.n	800d1d0 <__sflush_r+0x78>
 800d1c6:	1c42      	adds	r2, r0, #1
 800d1c8:	d101      	bne.n	800d1ce <__sflush_r+0x76>
 800d1ca:	682b      	ldr	r3, [r5, #0]
 800d1cc:	b903      	cbnz	r3, 800d1d0 <__sflush_r+0x78>
 800d1ce:	6560      	str	r0, [r4, #84]	@ 0x54
 800d1d0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d1d2:	602f      	str	r7, [r5, #0]
 800d1d4:	b1b9      	cbz	r1, 800d206 <__sflush_r+0xae>
 800d1d6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d1da:	4299      	cmp	r1, r3
 800d1dc:	d002      	beq.n	800d1e4 <__sflush_r+0x8c>
 800d1de:	4628      	mov	r0, r5
 800d1e0:	f7ff fbf2 	bl	800c9c8 <_free_r>
 800d1e4:	2300      	movs	r3, #0
 800d1e6:	6363      	str	r3, [r4, #52]	@ 0x34
 800d1e8:	e00d      	b.n	800d206 <__sflush_r+0xae>
 800d1ea:	2301      	movs	r3, #1
 800d1ec:	4628      	mov	r0, r5
 800d1ee:	47b0      	blx	r6
 800d1f0:	4602      	mov	r2, r0
 800d1f2:	1c50      	adds	r0, r2, #1
 800d1f4:	d1c9      	bne.n	800d18a <__sflush_r+0x32>
 800d1f6:	682b      	ldr	r3, [r5, #0]
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	d0c6      	beq.n	800d18a <__sflush_r+0x32>
 800d1fc:	2b1d      	cmp	r3, #29
 800d1fe:	d001      	beq.n	800d204 <__sflush_r+0xac>
 800d200:	2b16      	cmp	r3, #22
 800d202:	d11e      	bne.n	800d242 <__sflush_r+0xea>
 800d204:	602f      	str	r7, [r5, #0]
 800d206:	2000      	movs	r0, #0
 800d208:	e022      	b.n	800d250 <__sflush_r+0xf8>
 800d20a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d20e:	b21b      	sxth	r3, r3
 800d210:	e01b      	b.n	800d24a <__sflush_r+0xf2>
 800d212:	690f      	ldr	r7, [r1, #16]
 800d214:	2f00      	cmp	r7, #0
 800d216:	d0f6      	beq.n	800d206 <__sflush_r+0xae>
 800d218:	0793      	lsls	r3, r2, #30
 800d21a:	680e      	ldr	r6, [r1, #0]
 800d21c:	bf08      	it	eq
 800d21e:	694b      	ldreq	r3, [r1, #20]
 800d220:	600f      	str	r7, [r1, #0]
 800d222:	bf18      	it	ne
 800d224:	2300      	movne	r3, #0
 800d226:	eba6 0807 	sub.w	r8, r6, r7
 800d22a:	608b      	str	r3, [r1, #8]
 800d22c:	f1b8 0f00 	cmp.w	r8, #0
 800d230:	dde9      	ble.n	800d206 <__sflush_r+0xae>
 800d232:	6a21      	ldr	r1, [r4, #32]
 800d234:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800d236:	4643      	mov	r3, r8
 800d238:	463a      	mov	r2, r7
 800d23a:	4628      	mov	r0, r5
 800d23c:	47b0      	blx	r6
 800d23e:	2800      	cmp	r0, #0
 800d240:	dc08      	bgt.n	800d254 <__sflush_r+0xfc>
 800d242:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d246:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d24a:	81a3      	strh	r3, [r4, #12]
 800d24c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d250:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d254:	4407      	add	r7, r0
 800d256:	eba8 0800 	sub.w	r8, r8, r0
 800d25a:	e7e7      	b.n	800d22c <__sflush_r+0xd4>
 800d25c:	dfbffffe 	.word	0xdfbffffe

0800d260 <_fflush_r>:
 800d260:	b538      	push	{r3, r4, r5, lr}
 800d262:	690b      	ldr	r3, [r1, #16]
 800d264:	4605      	mov	r5, r0
 800d266:	460c      	mov	r4, r1
 800d268:	b913      	cbnz	r3, 800d270 <_fflush_r+0x10>
 800d26a:	2500      	movs	r5, #0
 800d26c:	4628      	mov	r0, r5
 800d26e:	bd38      	pop	{r3, r4, r5, pc}
 800d270:	b118      	cbz	r0, 800d27a <_fflush_r+0x1a>
 800d272:	6a03      	ldr	r3, [r0, #32]
 800d274:	b90b      	cbnz	r3, 800d27a <_fflush_r+0x1a>
 800d276:	f7ff f983 	bl	800c580 <__sinit>
 800d27a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d27e:	2b00      	cmp	r3, #0
 800d280:	d0f3      	beq.n	800d26a <_fflush_r+0xa>
 800d282:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d284:	07d0      	lsls	r0, r2, #31
 800d286:	d404      	bmi.n	800d292 <_fflush_r+0x32>
 800d288:	0599      	lsls	r1, r3, #22
 800d28a:	d402      	bmi.n	800d292 <_fflush_r+0x32>
 800d28c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d28e:	f7ff fb86 	bl	800c99e <__retarget_lock_acquire_recursive>
 800d292:	4628      	mov	r0, r5
 800d294:	4621      	mov	r1, r4
 800d296:	f7ff ff5f 	bl	800d158 <__sflush_r>
 800d29a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d29c:	07da      	lsls	r2, r3, #31
 800d29e:	4605      	mov	r5, r0
 800d2a0:	d4e4      	bmi.n	800d26c <_fflush_r+0xc>
 800d2a2:	89a3      	ldrh	r3, [r4, #12]
 800d2a4:	059b      	lsls	r3, r3, #22
 800d2a6:	d4e1      	bmi.n	800d26c <_fflush_r+0xc>
 800d2a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d2aa:	f7ff fb79 	bl	800c9a0 <__retarget_lock_release_recursive>
 800d2ae:	e7dd      	b.n	800d26c <_fflush_r+0xc>

0800d2b0 <__swhatbuf_r>:
 800d2b0:	b570      	push	{r4, r5, r6, lr}
 800d2b2:	460c      	mov	r4, r1
 800d2b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d2b8:	2900      	cmp	r1, #0
 800d2ba:	b096      	sub	sp, #88	@ 0x58
 800d2bc:	4615      	mov	r5, r2
 800d2be:	461e      	mov	r6, r3
 800d2c0:	da0d      	bge.n	800d2de <__swhatbuf_r+0x2e>
 800d2c2:	89a3      	ldrh	r3, [r4, #12]
 800d2c4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d2c8:	f04f 0100 	mov.w	r1, #0
 800d2cc:	bf14      	ite	ne
 800d2ce:	2340      	movne	r3, #64	@ 0x40
 800d2d0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d2d4:	2000      	movs	r0, #0
 800d2d6:	6031      	str	r1, [r6, #0]
 800d2d8:	602b      	str	r3, [r5, #0]
 800d2da:	b016      	add	sp, #88	@ 0x58
 800d2dc:	bd70      	pop	{r4, r5, r6, pc}
 800d2de:	466a      	mov	r2, sp
 800d2e0:	f000 f87c 	bl	800d3dc <_fstat_r>
 800d2e4:	2800      	cmp	r0, #0
 800d2e6:	dbec      	blt.n	800d2c2 <__swhatbuf_r+0x12>
 800d2e8:	9901      	ldr	r1, [sp, #4]
 800d2ea:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d2ee:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d2f2:	4259      	negs	r1, r3
 800d2f4:	4159      	adcs	r1, r3
 800d2f6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d2fa:	e7eb      	b.n	800d2d4 <__swhatbuf_r+0x24>

0800d2fc <__smakebuf_r>:
 800d2fc:	898b      	ldrh	r3, [r1, #12]
 800d2fe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d300:	079d      	lsls	r5, r3, #30
 800d302:	4606      	mov	r6, r0
 800d304:	460c      	mov	r4, r1
 800d306:	d507      	bpl.n	800d318 <__smakebuf_r+0x1c>
 800d308:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800d30c:	6023      	str	r3, [r4, #0]
 800d30e:	6123      	str	r3, [r4, #16]
 800d310:	2301      	movs	r3, #1
 800d312:	6163      	str	r3, [r4, #20]
 800d314:	b003      	add	sp, #12
 800d316:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d318:	ab01      	add	r3, sp, #4
 800d31a:	466a      	mov	r2, sp
 800d31c:	f7ff ffc8 	bl	800d2b0 <__swhatbuf_r>
 800d320:	9f00      	ldr	r7, [sp, #0]
 800d322:	4605      	mov	r5, r0
 800d324:	4639      	mov	r1, r7
 800d326:	4630      	mov	r0, r6
 800d328:	f7ff fbba 	bl	800caa0 <_malloc_r>
 800d32c:	b948      	cbnz	r0, 800d342 <__smakebuf_r+0x46>
 800d32e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d332:	059a      	lsls	r2, r3, #22
 800d334:	d4ee      	bmi.n	800d314 <__smakebuf_r+0x18>
 800d336:	f023 0303 	bic.w	r3, r3, #3
 800d33a:	f043 0302 	orr.w	r3, r3, #2
 800d33e:	81a3      	strh	r3, [r4, #12]
 800d340:	e7e2      	b.n	800d308 <__smakebuf_r+0xc>
 800d342:	89a3      	ldrh	r3, [r4, #12]
 800d344:	6020      	str	r0, [r4, #0]
 800d346:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d34a:	81a3      	strh	r3, [r4, #12]
 800d34c:	9b01      	ldr	r3, [sp, #4]
 800d34e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d352:	b15b      	cbz	r3, 800d36c <__smakebuf_r+0x70>
 800d354:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d358:	4630      	mov	r0, r6
 800d35a:	f000 f851 	bl	800d400 <_isatty_r>
 800d35e:	b128      	cbz	r0, 800d36c <__smakebuf_r+0x70>
 800d360:	89a3      	ldrh	r3, [r4, #12]
 800d362:	f023 0303 	bic.w	r3, r3, #3
 800d366:	f043 0301 	orr.w	r3, r3, #1
 800d36a:	81a3      	strh	r3, [r4, #12]
 800d36c:	89a3      	ldrh	r3, [r4, #12]
 800d36e:	431d      	orrs	r5, r3
 800d370:	81a5      	strh	r5, [r4, #12]
 800d372:	e7cf      	b.n	800d314 <__smakebuf_r+0x18>

0800d374 <_putc_r>:
 800d374:	b570      	push	{r4, r5, r6, lr}
 800d376:	460d      	mov	r5, r1
 800d378:	4614      	mov	r4, r2
 800d37a:	4606      	mov	r6, r0
 800d37c:	b118      	cbz	r0, 800d386 <_putc_r+0x12>
 800d37e:	6a03      	ldr	r3, [r0, #32]
 800d380:	b90b      	cbnz	r3, 800d386 <_putc_r+0x12>
 800d382:	f7ff f8fd 	bl	800c580 <__sinit>
 800d386:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d388:	07d8      	lsls	r0, r3, #31
 800d38a:	d405      	bmi.n	800d398 <_putc_r+0x24>
 800d38c:	89a3      	ldrh	r3, [r4, #12]
 800d38e:	0599      	lsls	r1, r3, #22
 800d390:	d402      	bmi.n	800d398 <_putc_r+0x24>
 800d392:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d394:	f7ff fb03 	bl	800c99e <__retarget_lock_acquire_recursive>
 800d398:	68a3      	ldr	r3, [r4, #8]
 800d39a:	3b01      	subs	r3, #1
 800d39c:	2b00      	cmp	r3, #0
 800d39e:	60a3      	str	r3, [r4, #8]
 800d3a0:	da05      	bge.n	800d3ae <_putc_r+0x3a>
 800d3a2:	69a2      	ldr	r2, [r4, #24]
 800d3a4:	4293      	cmp	r3, r2
 800d3a6:	db12      	blt.n	800d3ce <_putc_r+0x5a>
 800d3a8:	b2eb      	uxtb	r3, r5
 800d3aa:	2b0a      	cmp	r3, #10
 800d3ac:	d00f      	beq.n	800d3ce <_putc_r+0x5a>
 800d3ae:	6823      	ldr	r3, [r4, #0]
 800d3b0:	1c5a      	adds	r2, r3, #1
 800d3b2:	6022      	str	r2, [r4, #0]
 800d3b4:	701d      	strb	r5, [r3, #0]
 800d3b6:	b2ed      	uxtb	r5, r5
 800d3b8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d3ba:	07da      	lsls	r2, r3, #31
 800d3bc:	d405      	bmi.n	800d3ca <_putc_r+0x56>
 800d3be:	89a3      	ldrh	r3, [r4, #12]
 800d3c0:	059b      	lsls	r3, r3, #22
 800d3c2:	d402      	bmi.n	800d3ca <_putc_r+0x56>
 800d3c4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d3c6:	f7ff faeb 	bl	800c9a0 <__retarget_lock_release_recursive>
 800d3ca:	4628      	mov	r0, r5
 800d3cc:	bd70      	pop	{r4, r5, r6, pc}
 800d3ce:	4629      	mov	r1, r5
 800d3d0:	4622      	mov	r2, r4
 800d3d2:	4630      	mov	r0, r6
 800d3d4:	f7ff f9c5 	bl	800c762 <__swbuf_r>
 800d3d8:	4605      	mov	r5, r0
 800d3da:	e7ed      	b.n	800d3b8 <_putc_r+0x44>

0800d3dc <_fstat_r>:
 800d3dc:	b538      	push	{r3, r4, r5, lr}
 800d3de:	4d07      	ldr	r5, [pc, #28]	@ (800d3fc <_fstat_r+0x20>)
 800d3e0:	2300      	movs	r3, #0
 800d3e2:	4604      	mov	r4, r0
 800d3e4:	4608      	mov	r0, r1
 800d3e6:	4611      	mov	r1, r2
 800d3e8:	602b      	str	r3, [r5, #0]
 800d3ea:	f7f5 fa10 	bl	800280e <_fstat>
 800d3ee:	1c43      	adds	r3, r0, #1
 800d3f0:	d102      	bne.n	800d3f8 <_fstat_r+0x1c>
 800d3f2:	682b      	ldr	r3, [r5, #0]
 800d3f4:	b103      	cbz	r3, 800d3f8 <_fstat_r+0x1c>
 800d3f6:	6023      	str	r3, [r4, #0]
 800d3f8:	bd38      	pop	{r3, r4, r5, pc}
 800d3fa:	bf00      	nop
 800d3fc:	2000220c 	.word	0x2000220c

0800d400 <_isatty_r>:
 800d400:	b538      	push	{r3, r4, r5, lr}
 800d402:	4d06      	ldr	r5, [pc, #24]	@ (800d41c <_isatty_r+0x1c>)
 800d404:	2300      	movs	r3, #0
 800d406:	4604      	mov	r4, r0
 800d408:	4608      	mov	r0, r1
 800d40a:	602b      	str	r3, [r5, #0]
 800d40c:	f7f5 fa0f 	bl	800282e <_isatty>
 800d410:	1c43      	adds	r3, r0, #1
 800d412:	d102      	bne.n	800d41a <_isatty_r+0x1a>
 800d414:	682b      	ldr	r3, [r5, #0]
 800d416:	b103      	cbz	r3, 800d41a <_isatty_r+0x1a>
 800d418:	6023      	str	r3, [r4, #0]
 800d41a:	bd38      	pop	{r3, r4, r5, pc}
 800d41c:	2000220c 	.word	0x2000220c

0800d420 <_sbrk_r>:
 800d420:	b538      	push	{r3, r4, r5, lr}
 800d422:	4d06      	ldr	r5, [pc, #24]	@ (800d43c <_sbrk_r+0x1c>)
 800d424:	2300      	movs	r3, #0
 800d426:	4604      	mov	r4, r0
 800d428:	4608      	mov	r0, r1
 800d42a:	602b      	str	r3, [r5, #0]
 800d42c:	f7f5 fa18 	bl	8002860 <_sbrk>
 800d430:	1c43      	adds	r3, r0, #1
 800d432:	d102      	bne.n	800d43a <_sbrk_r+0x1a>
 800d434:	682b      	ldr	r3, [r5, #0]
 800d436:	b103      	cbz	r3, 800d43a <_sbrk_r+0x1a>
 800d438:	6023      	str	r3, [r4, #0]
 800d43a:	bd38      	pop	{r3, r4, r5, pc}
 800d43c:	2000220c 	.word	0x2000220c

0800d440 <_init>:
 800d440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d442:	bf00      	nop
 800d444:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d446:	bc08      	pop	{r3}
 800d448:	469e      	mov	lr, r3
 800d44a:	4770      	bx	lr

0800d44c <_fini>:
 800d44c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d44e:	bf00      	nop
 800d450:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d452:	bc08      	pop	{r3}
 800d454:	469e      	mov	lr, r3
 800d456:	4770      	bx	lr
